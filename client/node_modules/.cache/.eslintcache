[{"/Users/albertshay/Desktop/silkroad/client/src/index.js":"1","/Users/albertshay/Desktop/silkroad/client/src/App.js":"2","/Users/albertshay/Desktop/silkroad/client/src/reducers/index.js":"3","/Users/albertshay/Desktop/silkroad/client/src/components/Navbar/Navbar.js":"4","/Users/albertshay/Desktop/silkroad/client/src/components/Home/Home.js":"5","/Users/albertshay/Desktop/silkroad/client/src/components/Auth/Auth.js":"6","/Users/albertshay/Desktop/silkroad/client/src/components/PostDetails/PostDetails.jsx":"7","/Users/albertshay/Desktop/silkroad/client/src/reducers/auth.js":"8","/Users/albertshay/Desktop/silkroad/client/src/reducers/posts.js":"9","/Users/albertshay/Desktop/silkroad/client/src/components/Navbar/styles.js":"10","/Users/albertshay/Desktop/silkroad/client/src/components/Home/styles.js":"11","/Users/albertshay/Desktop/silkroad/client/src/components/Auth/icon.js":"12","/Users/albertshay/Desktop/silkroad/client/src/components/Auth/styles.js":"13","/Users/albertshay/Desktop/silkroad/client/src/components/Auth/Input.js":"14","/Users/albertshay/Desktop/silkroad/client/src/components/Form/Form.js":"15","/Users/albertshay/Desktop/silkroad/client/src/actions/posts.js":"16","/Users/albertshay/Desktop/silkroad/client/src/actions/auth.js":"17","/Users/albertshay/Desktop/silkroad/client/src/constants/actionTypes.js":"18","/Users/albertshay/Desktop/silkroad/client/src/api/travelAdvisorAPI.js":"19","/Users/albertshay/Desktop/silkroad/client/src/components/Posts/Posts.js":"20","/Users/albertshay/Desktop/silkroad/client/src/components/Modal/Modal.js":"21","/Users/albertshay/Desktop/silkroad/client/src/components/PostDetails/styles.js":"22","/Users/albertshay/Desktop/silkroad/client/src/components/Pagination.jsx":"23","/Users/albertshay/Desktop/silkroad/client/src/components/PostDetails/CommentSection.jsx":"24","/Users/albertshay/Desktop/silkroad/client/src/api/index.js":"25","/Users/albertshay/Desktop/silkroad/client/src/components/Form/UploadIcon.js":"26","/Users/albertshay/Desktop/silkroad/client/src/components/Form/styles.js":"27","/Users/albertshay/Desktop/silkroad/client/src/components/Posts/styles.js":"28","/Users/albertshay/Desktop/silkroad/client/src/components/styles.js":"29","/Users/albertshay/Desktop/silkroad/client/src/components/Posts/Post/Post.js":"30","/Users/albertshay/Desktop/silkroad/client/src/components/Posts/Post/styles.js":"31","/Users/albertshay/Desktop/silkroad/client/src/components/Form/Uploader.js":"32"},{"size":464,"mtime":1634690704659,"results":"33","hashOfConfig":"34"},{"size":3612,"mtime":1635009158178,"results":"35","hashOfConfig":"34"},{"size":157,"mtime":1634256318104,"results":"36","hashOfConfig":"34"},{"size":6041,"mtime":1635362652833,"results":"37","hashOfConfig":"34"},{"size":5398,"mtime":1635362729013,"results":"38","hashOfConfig":"34"},{"size":5918,"mtime":1634691347116,"results":"39","hashOfConfig":"34"},{"size":9558,"mtime":1635291386249,"results":"40","hashOfConfig":"34"},{"size":664,"mtime":1634653980591,"results":"41","hashOfConfig":"34"},{"size":1784,"mtime":1634680463686,"results":"42","hashOfConfig":"34"},{"size":3842,"mtime":1635285481616,"results":"43","hashOfConfig":"34"},{"size":3127,"mtime":1635291387734,"results":"44","hashOfConfig":"34"},{"size":502,"mtime":1634256317888,"results":"45","hashOfConfig":"34"},{"size":1410,"mtime":1634690973137,"results":"46","hashOfConfig":"34"},{"size":1459,"mtime":1634691383636,"results":"47","hashOfConfig":"34"},{"size":8338,"mtime":1635409528466,"results":"48","hashOfConfig":"34"},{"size":3351,"mtime":1634663219786,"results":"49","hashOfConfig":"34"},{"size":559,"mtime":1634653921303,"results":"50","hashOfConfig":"34"},{"size":604,"mtime":1634680462503,"results":"51","hashOfConfig":"34"},{"size":0,"mtime":1635291384614,"results":"52","hashOfConfig":"34"},{"size":1055,"mtime":1635264752223,"results":"53","hashOfConfig":"34"},{"size":1310,"mtime":1634257428583,"results":"54","hashOfConfig":"34"},{"size":2237,"mtime":1635036074275,"results":"55","hashOfConfig":"34"},{"size":919,"mtime":1634256317906,"results":"56","hashOfConfig":"34"},{"size":2843,"mtime":1634683019335,"results":"57","hashOfConfig":"34"},{"size":1405,"mtime":1635549700661,"results":"58","hashOfConfig":"34"},{"size":161,"mtime":1634783136146,"results":"59","hashOfConfig":"34"},{"size":3806,"mtime":1635410674095,"results":"60","hashOfConfig":"34"},{"size":385,"mtime":1635013454336,"results":"61","hashOfConfig":"34"},{"size":145,"mtime":1634256317922,"results":"62","hashOfConfig":"34"},{"size":4647,"mtime":1635264845912,"results":"63","hashOfConfig":"34"},{"size":2116,"mtime":1635291386753,"results":"64","hashOfConfig":"34"},{"size":670,"mtime":1635402199437,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"k8o672",{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/albertshay/Desktop/silkroad/client/src/index.js",[],["143","144"],"/Users/albertshay/Desktop/silkroad/client/src/App.js",["145"],"// import React from 'react';\n// import {\n//   Container,\n//   Paper,\n//   BottomNavigation,\n//   BottomNavigationAction,\n//   AppBar,\n//   IconButton,\n//   Typography,\n//   Toolbar,\n//   Box,\n// } from '@material-ui/core';\n// // import SearchIcon from '@mui/icons-material/Search';\n// // import AddCircleIcon from '@mui/icons-material/AddCircle';\n// // import HomeIcon from '@mui/icons-material/Home';\n// // import LoginIcon from '@mui/icons-material/Login';\n// // import { styled } from '@mmui/material/styles';\n// // import RestoreIcon from '@material-ui/icons/RestoreIcon';\n// // import FavoriteIcon from '@material-ui/icons/FavoriteIcon';\n// // import ArchiveIcon from '@material-ui/icons/ArchiveIcon';\n// import { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n// import PostDetails from '../components/PostDetails/PostDetails';\n// import Home from '../components/Home/Home';\n// import Navbar from '../components/Navbar/Navbar';\n// import Auth from './components/Auth/Auth';\n// // const StyledFab = styled(Fab)({\n// //   position: 'absolute',\n// //   zIndex: 1,\n// //   top: -30,\n// //   left: 0,\n// //   right: 0,\n// //   margin: '0 auto',\n// // });\n// import useStyles from '../styles';\n// const App = () => {\n//   const user = JSON.parse(localStorage.getItem('profile'));\n//   const classes = useStyles();\n//   return (\n//     <BrowserRouter>\n//       <Container maxWidth='xl' className={classes.container}>\n//         <Navbar />\n//         <Switch>\n//           <Route path='/' exact component={() => <Redirect to='/posts' />} />\n//           <Route path='/posts' exact component={Home} />\n//           <Route path='/posts/search' exact component={Home} />\n//           <Route path='/posts/:id' component={PostDetails} />\n//           <Route\n//             path='/auth'\n//             exact\n//             component={() => (!user ? <Auth /> : <Redirect to='/posts' />)}\n//           />\n//         </Switch>\n//       </Container>\n//       {/*  <AppBar position='fixed' color='primary' sx={{ top: 'auto', bottom: 0 }}>\n//         <Toolbar></Toolbar>\n//   </AppBar>*/}\n//       <BottomNav className={classes.bottomNav}>\n//         <Toolbar variant='dense'> </Toolbar>\n//       </BottomNav>\n//     </BrowserRouter>\n//   );\n// };\n\n// export default App;\nimport React from 'react';\nimport { Container } from '@material-ui/core';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\nimport PostDetails from './components/PostDetails/PostDetails';\nimport Navbar from './components/Navbar/Navbar';\nimport Home from './components/Home/Home';\nimport Auth from './components/Auth/Auth';\n// import Profile from './components/Profile/Profile';\nimport createHistory from 'history/createBrowserHistory';\n\nconst App = () => {\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const history = createHistory();\n  return (\n    <BrowserRouter history={history}>\n      <Container maxWidth='xl'>\n        <Navbar />\n        <Switch>\n          <Route path='/' exact component={() => <Redirect to='/posts' />} />\n          <Route path='/posts' exact component={Home} />\n          <Route path='/posts/search' exact component={Home} />\n          <Route path='/posts/:id' exact component={PostDetails} />\n          <Route\n            path='/auth'\n            exact\n            // component={() => (!user ? <Auth /> : <Redirect to='/posts' />)}\n            component={Auth}\n          />\n          {/*<Route path={`/profile/${user.results._id}`}>\n            <Profile />\n          </Route>*/}\n        </Switch>\n      </Container>\n    </BrowserRouter>\n  );\n};\nexport default App;\n","/Users/albertshay/Desktop/silkroad/client/src/reducers/index.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Navbar/Navbar.js",["146","147","148","149","150","151","152","153","154"],"import React, { useState, useEffect } from 'react';\nimport {\n  AppBar,\n  Typography,\n  Toolbar,\n  Avatar,\n  Button,\n  TextField,\n  InputBase,\n} from '@material-ui/core';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport decode from 'jwt-decode';\nimport ChipInput from 'material-ui-chip-input';\nimport Form from '../Form/Form';\nimport silkroadText from '../../images/silkroadLogo.png';\nimport silkroadLogo from '../../images/imgLogo.png';\n// import { Autocomplete } from '@react-google-maps/api';\nimport {\n  getPosts,\n  getPostsBySearch,\n  getPostsByUser,\n} from '../../actions/posts';\n// import SearchIcon from '@material-ui/icons/Search';\nimport * as actionType from '../../constants/actionTypes';\nimport useStyles from './styles';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\nconst Navbar = () => {\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const history = useHistory();\n\n  const classes = useStyles();\n\n  const [currentId, setCurrentId] = useState(0);\n\n  const query = useQuery();\n\n  const page = query.get('page') || 1;\n  const searchQuery = query.get('searchQuery');\n\n  const [search, setSearch] = useState('');\n  const [tags, setTags] = useState([]);\n\n  const logout = () => {\n    dispatch({ type: actionType.LOGOUT });\n\n    history.push('/auth');\n\n    setUser(null);\n  };\n  // const login = () => {\n  //   console.log('login');\n  //   dispatch({ type: actionType.LOGIN });\n\n  //   history.push('/auth');\n\n  //   setUser(null);\n  // };\n\n  useEffect(() => {\n    const token = user?.token;\n\n    if (token) {\n      const decodedToken = decode(token);\n\n      if (decodedToken.exp * 1000 < new Date().getTime()) logout();\n    }\n\n    setUser(JSON.parse(localStorage.getItem('profile')));\n  }, [location]);\n\n  const searchPost = () => {\n    if (search.trim()) {\n      //to have something to dispatch we need to create the action 'getPostsBySearch\n      //dispatch -> fetch search post\n      dispatch(getPostsBySearch({ search, tags: tags.join(',') }));\n      // history.push(`/posts/search?searchQuery=${search || 'none'}`);\n      history.push(\n        `/posts/search?searchQuery=${search || 'none'}&tags=${tags.join(',')}`\n      );\n    } else {\n      history.push('/');\n    }\n  };\n  // const searchByUser = () => {\n  //   const user = JSON.parse(localStorage.getItem('profile'));\n  //   if (user) dispatch(getPostsByUser(user.result._id));\n  //   history.push(`/posts/user/`);\n  //   console.log(user);\n  // };\n\n  const handleKeyPress = (e) => {\n    console.log(e.key);\n    if (e.key === 'Enter') {\n      searchPost();\n      // search post\n    }\n  };\n  const handleAddChip = (tag) => setTags([...tags, tag]);\n\n  const handleDeleteChip = (chipToDelete) =>\n    setTags(tags.filter((tag) => tag !== chipToDelete));\n\n  return (\n    <AppBar className={classes.appBar} position='sticky' color='inherit'>\n      <Link to='/' className={classes.brandContainer}>\n        <img\n          className={classes.text}\n          component={Link}\n          to='/'\n          src={silkroadText}\n          alt='icon'\n          height='40px'\n        />\n        <img\n          className={classes.image}\n          component={Link}\n          to='/'\n          src={silkroadLogo}\n          alt='icon'\n          height='40px'\n        />\n      </Link>\n      <TextField\n        name='search'\n        variant='outlined'\n        className={classes.searchinput}\n        label={`Search products by name or...`}\n        onKeyPress={handleKeyPress}\n        size={`small`}\n        fontFamily={`Montserrat`}\n        value={search}\n        // fullWidth\n        onChange={(e) => setSearch(e.target.value)}\n        InputProps={{\n          style: { fontSize: 12 },\n          classes: { root: classes.inputRoot },\n        }}\n        InputLabelProps={{\n          style: { fontSize: 12 },\n          classes: {\n            root: classes.labelRoot,\n            focused: classes.labelFocused,\n          },\n        }}\n      />\n      <br />\n\n      <ChipInput\n        name='search'\n        style={{ margin: '5px 5px 5px 5px' }}\n        value={tags}\n        onAdd={(chip) => handleAddChip(chip)}\n        onDelete={(chip) => handleDeleteChip(chip)}\n        size={`small`}\n        height={'small'}\n        variant='outlined'\n        fullWidth\n        disableUnderline={true}\n        // alignText='center'\n        alignItem='center'\n        fontFamily={`Montserrat`}\n        label='price'\n        className={classes.pricesearchinput}\n        InputProps={{\n          style: { fontSize: 11 },\n          classes: { root: classes.inputRoot },\n        }}\n        InputLabelProps={{\n          style: { fontSize: 11 },\n          classes: {\n            root: classes.labelRoot,\n            focused: classes.labelFocused,\n          },\n        }}\n      />\n\n      <Button\n        onClick={searchPost}\n        className={classes.searchButton}\n        // color='primary'\n        variant='contained'\n      >\n        Search\n      </Button>\n\n      <Toolbar className={classes.toolbar}>\n        {user?.result ? (\n          <>\n            <div className={classes.profile}>\n              <Typography className={classes.userName} variant='h6'>\n                {user?.result.name.slice(0, user?.result.name.indexOf(' '))}\n                {/*   {user?.result.name}*/}\n              </Typography>\n\n              <Avatar\n                className={classes.avatar}\n                alt={user?.result.name}\n                src={user?.result.imageUrl}\n                onClick={logout}\n              >\n                {user?.result.name.charAt(0)}\n              </Avatar>\n            </div>\n          </>\n        ) : (\n          <Button\n            className={classes.logout}\n            component={Link}\n            to='/auth'\n            //   onClick={login}\n            variant='contained'\n          >\n            Sign In\n          </Button>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n","/Users/albertshay/Desktop/silkroad/client/src/components/Home/Home.js",["155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171"],"import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Container,\n  Grow,\n  Grid,\n  Paper,\n  AppBar,\n  BottomNavigation,\n  TextField,\n  Button,\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { getPlacesData, getWeatherData } from '../../api/travelAdvisorAPI';\n// import ChipInput from 'material-ui-chip-input';\nimport {\n  getPosts,\n  getPostsBySearch,\n  getPostsByUser,\n} from '../../actions/posts';\nimport Pagination from '../Pagination';\nimport Posts from '../Posts/Posts';\n//import Map from '../Map/Map';\nimport ChipInput from 'material-ui-chip-input';\nimport Form from '../Form/Form';\nimport ModalUnstyledDemo from '../Modal/Modal';\nimport useStyles from './styles';\nimport AddBoxIcon from '@mui/icons-material/AddBox';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\nconst scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop);\nconst Home = () => {\n  const [show, setShow] = useState(false);\n  const [currentId, setCurrentId] = useState(0);\n  const dispatch = useDispatch();\n  const query = useQuery();\n  const history = useHistory();\n  const page = query.get('page') || 1;\n  const searchQuery = query.get('searchQuery');\n  const classes = useStyles();\n  const [search, setSearch] = useState('');\n  const [tags, setTags] = useState([]);\n  const [location, setLocation] = useState('');\n  const myRef = useRef(null);\n  const { posts, isLoading } = useSelector((state) => state.posts);\n\n  //end of map feature\n  // useEffect(() => {\n  //   dispatch(getPosts());\n  // }, [currentId, dispatch]);\n\n  const searchPost = () => {\n    if (search.trim()) {\n      //to have something to dispatch we need to create the action 'getPostsBySearch\n      //dispatch -> fetch search post\n      dispatch(getPostsBySearch({ search, tags: tags.join(',') }));\n      // history.push(`/posts/search?searchQuery=${search || 'none'}`);\n      history.push(\n        `/posts/search?searchQuery=${search || 'none'}&tags=${tags.join(',')}`\n      );\n    } else {\n      history.push('/');\n    }\n  };\n\n  const searchByUser = () => {\n    const user = JSON.parse(localStorage.getItem('profile'));\n    if (user) dispatch(getPostsByUser(user.result._id));\n    history.push(`/posts/user/`);\n    console.log(user);\n  };\n  const handleKeyPress = (e) => {\n    if (e.keycode === 13) {\n      searchPost();\n      // search post\n    }\n  };\n  const handleAddChip = (tag) => setTags([...tags, tag]);\n\n  const handleDeleteChip = (chipToDelete) =>\n    setTags(tags.filter((tag) => tag !== chipToDelete));\n\n  const showHideClassName = show\n    ? classes.inputFormShow\n    : classes.inputFormHide;\n\n  const executeScroll = () => scrollToRef(myRef);\n  const showModal = () => {\n    setShow(!show);\n    executeScroll();\n  };\n\n  // const hideModal = () => {\n  //   setShow(false);\n  // };\n  return (\n    <>\n      {/*hidden form*/}\n      <div ref={myRef} className={showHideClassName}>\n        <Grid item xs={16} sm={9} md={12} className={classes.centerForm}>\n          <Form\n            currentId={currentId}\n            setCurrentId={setCurrentId}\n            showModal={showModal}\n            location={location}\n            setLocation={setLocation}\n          />\n        </Grid>\n      </div>\n      <AppBar\n        className={classes.addBar}\n        position='fixed'\n        color='inherit'\n        elevation={0}\n      >\n        <AddBoxIcon\n          className={classes.addIcon}\n          type='button'\n          fontSize='large'\n          onClick={showModal}\n        />\n      </AppBar>\n\n      {/*post*/}\n      <Grow in>\n        <Container maxWidth='xl' position='center'>\n          {/*   <Grid container spacing={3} style={{ width: '100%' }}>*/}\n          <Grid\n            item\n            container\n            justify='space-between'\n            alignItems='stretch'\n            spacing={3}\n            className={classes.gridContainer}\n          >\n            <Grid item xs={16} sm={9} md={12}>\n              {/*remove line below and uncomment the line above*/}\n              {/*  <Grid item xs={12} md={6}>*/}\n              <Posts setCurrentId={setCurrentId} showModal={showModal} />\n            </Grid>\n            {/*remove map componement*/}\n            {/*map*/}\n            {/*\n            <Grid\n              item\n              xs={12}\n              md={6}\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                flexDirection: 'column',\n                height: '100%',\n              }}\n            >\n            {posts?.map((post) => (\n        \n \n          <Map post={post} />\n          </Grid>\n        ))\n              <Map\n                setChildClicked={setChildClicked}\n                setBounds={setBounds}\n                setCoords={setCoords}\n                coords={coords}\n                places={location}\n              />\n            </Grid>*/}\n            {/*map componement ends here*/}\n            {/*remove grid line below*/}\n          </Grid>\n\n          <br />\n\n          {/*//pagination*/}\n          <Grid item xs={16} sm={9} md={12}>\n            {!searchQuery && !tags.length && (\n              <Pagination page={page} className={classes.pagination} />\n            )}\n          </Grid>\n        </Container>\n      </Grow>\n    </>\n  );\n};\n\nexport default Home;\n","/Users/albertshay/Desktop/silkroad/client/src/components/Auth/Auth.js",["172","173"],"import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Avatar,\n  Button,\n  Paper,\n  Grid,\n  Typography,\n  Container,\n} from '@material-ui/core';\nimport { useHistory, Link } from 'react-router-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n\nimport Icon from './icon';\nimport { signin, signup } from '../../actions/auth';\nimport { AUTH } from '../../constants/actionTypes';\nimport useStyles from './styles';\nimport Input from './Input';\n\nconst initialState = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\nconst SignUp = () => {\n  const [form, setForm] = useState(initialState);\n  const [isSignup, setIsSignup] = useState(false);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const classes = useStyles();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const handleShowPassword = () => setShowPassword(!showPassword);\n\n  const switchMode = () => {\n    setForm(initialState);\n    setIsSignup((prevIsSignup) => !prevIsSignup);\n    setShowPassword(false);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (isSignup) {\n      dispatch(signup(form, history));\n    } else {\n      dispatch(signin(form, history));\n    }\n  };\n\n  const googleSuccess = async (res) => {\n    const result = res?.profileObj;\n    const token = res?.tokenId;\n\n    try {\n      dispatch({ type: AUTH, data: { result, token } });\n\n      history.push('/');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const googleError = () =>\n    alert('Google Sign In was unsuccessful. Try again later');\n\n  const handleChange = (e) =>\n    setForm({ ...form, [e.target.name]: e.target.value });\n  const MouseOver = (event) => {\n    event.target.style.color = 'blue';\n  };\n  const MouseOut = (event) => {\n    event.target.style.color = '';\n  };\n  return (\n    <Container component='main' maxWidth='xs'>\n      <Paper className={classes.paper} elevation={3}>\n        <Typography className={classes.header} component='h1' variant='h5'>\n          {isSignup ? 'Sign up' : 'Sign in'}\n        </Typography>\n        <form className={classes.form} onSubmit={handleSubmit}>\n          <Grid container spacing={2}>\n            {isSignup && (\n              <>\n                <Input\n                  name='firstName'\n                  label='First Name'\n                  handleChange={handleChange}\n                  autoFocus\n                  half\n                />\n                <Input\n                  name='lastName'\n                  label='Last Name'\n                  handleChange={handleChange}\n                  half\n                />\n              </>\n            )}\n            <Input\n              name='email'\n              label='Email Address'\n              handleChange={handleChange}\n              type='email'\n              InputProps={{\n                style: { fontSize: 12, fontFamily: 'Montserrat' },\n              }}\n              InputLabelProps={{\n                style: { fontSize: 12 },\n              }}\n            />\n            <Input\n              name='password'\n              label='Password'\n              handleChange={handleChange}\n              type={showPassword ? 'text' : 'password'}\n              handleShowPassword={handleShowPassword}\n              InputProps={{\n                style: { fontSize: 12 },\n              }}\n              InputLabelProps={{\n                style: { fontSize: 12 },\n              }}\n            />\n            {isSignup && (\n              <Input\n                name='confirmPassword'\n                label='Repeat Password'\n                handleChange={handleChange}\n                type='password'\n                InputProps={{\n                  style: { fontSize: 12 },\n                }}\n                InputLabelProps={{\n                  style: { fontSize: 12 },\n                }}\n              />\n            )}\n          </Grid>\n          <Button\n            type='submit'\n            fullWidth\n            color='primary'\n            variant='contained'\n            className={classes.submit}\n          >\n            {isSignup ? 'Sign Up' : 'Sign In'}\n          </Button>\n          <GoogleLogin\n            clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n            render={(renderProps) => (\n              <Button\n                className={classes.googleButton}\n                fullWidth\n                color='primary'\n                onClick={renderProps.onClick}\n                disabled={renderProps.disabled}\n                startIcon={<Icon />}\n                variant='contained'\n              >\n                Google Sign In\n              </Button>\n            )}\n            onSuccess={googleSuccess}\n            onFailure={googleError}\n            cookiePolicy='single_host_origin'\n          />\n          <Grid container justify='flex-end'>\n            <Grid item>\n              <Button onClick={switchMode} className={classes.button}>\n                {isSignup ? (\n                  <Typography\n                    className={classes.signup}\n                    onMouseOver={MouseOver}\n                    onMouseOut={MouseOut}\n                    component={Link}\n                    to='/auth'\n                  >\n                    Already have an account? Sign in\n                  </Typography>\n                ) : (\n                  <Typography\n                    className={classes.signup}\n                    onMouseOver={MouseOver}\n                    onMouseOut={MouseOut}\n                    component={Link}\n                    to='/auth'\n                  >\n                    {' '}\n                    Don't have an account? Sign Up\n                  </Typography>\n                )}\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default SignUp;\n","/Users/albertshay/Desktop/silkroad/client/src/components/PostDetails/PostDetails.jsx",["174","175","176","177","178"],"// import React, { useEffect } from 'react';\n// import {\n//   Paper,\n//   Typography,\n//   CircularProgress,\n//   Divider,\n// } from '@material-ui/core/';\n// import { useDispatch, useSelector } from 'react-redux';\n// import moment from 'moment';\n// import { useParams, useHistory } from 'react-router-dom';\n// import CommentSection from './CommentSection';\n// import { getPost, getPostsBySearch } from '../../actions/posts';\n// import useStyles from './styles';\n\n// const Post = () => {\n//   const { post, posts, isLoading } = useSelector((state) => state.posts);\n//   const dispatch = useDispatch();\n//   const history = useHistory();\n//   const classes = useStyles();\n//   const { id } = useParams();\n//   // const recommendedPosts = posts.filter(({ _id }) => _id !== post._id);\n//   useEffect(() => {\n//     dispatch(getPost(id));\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (post) {\n//       dispatch(\n//         getPostsBySearch({ search: 'none', tags: post?.tags.join(',') })\n//       );\n//     }\n//   }, [post]);\n\n//   if (!post) return null;\n\n//   const openPost = (_id) => history.push(`/posts/${_id}`);\n\n//   if (isLoading) {\n//     return (\n//       <Paper elevation={6} className={classes.loadingPaper}>\n//         <CircularProgress size='7em' />\n//       </Paper>\n//     );\n//   }\n//   const recommendedPosts = posts.filter(({ _id }) => _id !== post._id);\n//   return (\n//     <Paper style={{ padding: '20px', borderRadius: '15px' }} elevation={6}>\n//       <div className={classes.card}>\n//         <div className={classes.section}>\n//           <Typography variant='h3' component='h2'>\n//             {post.title}\n//           </Typography>\n//           <Typography\n//             gutterBottom\n//             variant='h6'\n//             color='textSecondary'\n//             component='h2'\n//           >\n//             {post.tags.map((tag) => `#${tag} `)}\n//           </Typography>\n//           <Typography gutterBottom variant='body1' component='p'>\n//             {post.message}\n//           </Typography>\n//           <Typography variant='h6'>Created by: {post.name}</Typography>\n//           <Typography variant='body1'>\n//             {moment(post.createdAt).fromNow()}\n//           </Typography>\n\n//           <Divider style={{ margin: '20px 0' }} />\n//           <CommentSection post={post} />\n//           <Divider style={{ margin: '20px 0' }} />\n//         </div>\n//         <div className={classes.imageSection}>\n//           <img\n//             className={classes.media}\n//             src={\n//               post.selectedFile ||\n//               'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png'\n//             }\n//             alt={post.title}\n//           />\n//         </div>\n//       </div>\n//       {!!recommendedPosts.length && (\n//         <div className={classes.section}>\n//           <Typography gutterBottom variant='h5'>\n//             You might also like:\n//           </Typography>\n//           <Divider />\n//           <div className={classes.recommendedPosts}>\n//             {recommendedPosts.map(\n//               ({ title, name, message, likes, selectedFile, _id }) => (\n//                 <div\n//                   style={{ margin: '20px', cursor: 'pointer' }}\n//                   onClick={() => openPost(_id)}\n//                   key={_id}\n//                 >\n//                   <Typography gutterBottom variant='h6'>\n//                     {title}\n//                   </Typography>\n//                   <Typography gutterBottom variant='subtitle2'>\n//                     {name}\n//                   </Typography>\n//                   <Typography gutterBottom variant='subtitle2'>\n//                     {message}\n//                   </Typography>\n//                   <Typography gutterBottom variant='subtitle1'>\n//                     Likes: {likes.length}\n//                   </Typography>\n//                   <img src={selectedFile} width='200px' alt='placeholder' />\n//                 </div>\n//               )\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </Paper>\n//   );\n// };\n\n// export default Post;\n\nimport React, { useEffect } from 'react';\nimport {\n  Paper,\n  Typography,\n  CircularProgress,\n  Divider,\n  Button,\n} from '@material-ui/core/';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { useParams, useHistory } from 'react-router-dom';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport { getPost, getPostsBySearch } from '../../actions/posts';\nimport CommentSection from './CommentSection';\nimport useStyles from './styles';\n\nconst Post = () => {\n  const { post, posts, isLoading } = useSelector((state) => state.posts);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const classes = useStyles();\n  const { id } = useParams();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  useEffect(() => {\n    dispatch(getPost(id));\n  }, [id]);\n\n  useEffect(() => {\n    if (post) {\n      dispatch(\n        getPostsBySearch({ search: 'none', tags: post?.tags?.join(',') })\n      );\n    }\n  }, [post]);\n\n  if (!post) return null;\n\n  const openPost = (_id) => history.push(`/posts/${_id}`);\n\n  if (isLoading) {\n    return (\n      <Paper elevation={6} className={classes.loadingPaper}>\n        <CircularProgress size='7em' />\n      </Paper>\n    );\n  }\n\n  const recommendedPosts = posts.filter(({ _id }) => _id !== post._id);\n\n  return (\n    <Paper style={{ padding: '20px', borderRadius: '15px' }} elevation={6}>\n      <div className={classes.card}>\n        <div className={classes.section}>\n          <Typography variant='h6' component='h5' className={classes.nameLabel}>\n            {post.title}\n          </Typography>\n          <Typography\n            gutterBottom\n            variant='h7'\n            className={classes.price}\n            // color='textSecondary'\n            component='h3'\n            fontFamily='Montserrat'\n          >\n            {post?.tags?.map((tag) => `$${tag} `)}\n          </Typography>\n\n          <Typography variant='body1' className={classes.timeCreated}>\n            {moment(post.createdAt).fromNow()}\n          </Typography>\n          <div className={classes.imageSection}>\n            <img\n              className={classes.media}\n              src={\n                post.selectedFile ||\n                'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png'\n              }\n              alt={post.title}\n            />\n          </div>\n          <Divider style={{ margin: '10px 0' }} />\n          <Typography\n            gutterBottom\n            variant='body1'\n            component='p'\n            className={classes.postDetails}\n          >\n            {post.message}\n          </Typography>\n          <Typography\n            gutterBottom\n            variant='body1'\n            component='p'\n            className={classes.postDetails}\n          >\n            {post.location}\n          </Typography>\n          <Typography className={classes.hostedBy}>\n            Hosted by: {post.name}\n          </Typography>\n          <Divider style={{ margin: '20px 0' }} />\n          {/* {(user?.result?.googleId === post?.creator ||\n            user?.result?._id === post?.creator) && (\n            <CommentSection post={post} className={classes.nameLabel} />\n            )}*/}\n          <CommentSection post={post} className={classes.nameLabel} />\n          <Divider style={{ margin: '20px 0' }} />\n        </div>\n      </div>\n      {!!recommendedPosts.length && (\n        <div className={classes.section}>\n          <Typography\n            className={classes.alsoLike}\n            gutterBottom\n            variant='h5'\n            className={classes.nameLabel}\n          >\n            You might also like:\n          </Typography>\n          <Divider />\n          <div className={classes.recommendedPosts}>\n            {recommendedPosts.map(\n              ({ title, name, message, likes, selectedFile, _id }) => (\n                <div\n                  style={{ margin: '20px', cursor: 'pointer' }}\n                  onClick={() => openPost(_id)}\n                  key={_id}\n                >\n                  <Typography\n                    gutterBottom\n                    variant='h6'\n                    className={classes.alsoLike}\n                  >\n                    {title}\n                  </Typography>\n                  <Typography\n                    gutterBottom\n                    variant='subtitle2'\n                    className={classes.alsoLike}\n                  >\n                    {name}\n                  </Typography>\n                  <Typography\n                    gutterBottom\n                    variant='subtitle2'\n                    className={classes.alsoLike}\n                  >\n                    {message}\n                  </Typography>\n                  <Typography\n                    className={classes.alsoLike}\n                    gutterBottom\n                    variant='subtitle1'\n                  >\n                    <FavoriteBorderIcon\n                      className={classes.likeIcon}\n                      alt={`: ${likes?.length}`}\n                    ></FavoriteBorderIcon>\n                    Likes: {likes?.length}\n                  </Typography>\n                  <img src={selectedFile} width='200px' alt='placeholder' />\n                </div>\n              )\n            )}\n          </div>\n        </div>\n      )}\n    </Paper>\n  );\n};\n\nexport default Post;\n","/Users/albertshay/Desktop/silkroad/client/src/reducers/auth.js",[],"/Users/albertshay/Desktop/silkroad/client/src/reducers/posts.js",["179","180"],"import {\n  FETCH_ALL,\n  FETCH_BY_SEARCH,\n  FETCH_POST,\n  // FETCH_BY_USER,\n  // FETCH_BY_LIKES,\n  PROFILE,\n  CREATE,\n  UPDATE,\n  DELETE,\n  LIKE,\n  COMMENT,\n} from '../constants/actionTypes';\n\nexport default (state = { isLoading: true, posts: [] }, action) => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return { ...state, isLoading: true };\n    case 'END_LOADING':\n      return { ...state, isLoading: false };\n    case FETCH_ALL:\n      return {\n        ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages,\n      };\n    case FETCH_BY_SEARCH:\n      return { ...state, posts: action.payload.data };\n    // case FETCH_BY_LIKES:\n    //   return { ...state, posts: action.payload.data };\n    case PROFILE:\n      return { ...state, posts: action.payload.data };\n    case FETCH_POST:\n      return { ...state, post: action.payload.post };\n    case LIKE:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload._id ? action.payload : post\n        ),\n      };\n    case COMMENT:\n      return {\n        ...state,\n        posts: state.posts.map((post) => {\n          if (post._id == +action.payload._id) {\n            return action.payload;\n          }\n          return post;\n        }),\n      };\n    case CREATE:\n      return { ...state, posts: [...state.posts, action.payload] };\n    case UPDATE:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload._id ? action.payload : post\n        ),\n      };\n    case DELETE:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n","/Users/albertshay/Desktop/silkroad/client/src/components/Navbar/styles.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Home/styles.js",["181"],"// import { makeStyles } from '@material-ui/core/styles';\n\n// export default makeStyles((theme) => ({\n//   appBarSearch: {\n//     borderRadius: 4,\n//     marginBottom: '1rem',\n//     display: 'flex',\n//     padding: '16px',\n//     position: 'relative',\n//   },\n//   addBar: {\n//     borderRadius: 15,\n//     margin: '500px 0',\n\n//     display: 'flex',\n\n//     flexDirection: 'row-reverse',\n//     justifyContent: 'space-between-evenly',\n//     alignItems: 'center',\n//     backgroundColor: 'transparent',\n\n//     // padding: '10px 50px',\n\n//     height: '64px',\n//   },\n//   addIcon: {\n//     float: 'right',\n//   },\n//   addName: {\n//     display: 'block',\n//   },\n//   pagination: {\n//     borderRadius: 4,\n//     marginTop: '1rem',\n//     padding: '16px',\n//   },\n//   gridContainer: {\n//     [theme.breakpoints.down('xs')]: {\n//       flexDirection: 'column-reverse',\n//     },\n//     // flexDirection: 'column-reverse',\n//     // float: 'right',\n//   },\n//   searchButton: {\n//     color: 'white',\n//     backgroundColor: 'black',\n//     fontFamily: 'Montserrat',\n//   },\n//   bottomNav: {\n//     position: 'fixed',\n//     bottom: 0,\n//     width: '100%',\n//     zIndex: 1,\n//     color: 'black',\n//   },\n//   inputFormHide: {\n//     display: 'none',\n//   },\n//   inputFormShow: {\n//     display: 'flex',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//   },\n//   add: {\n//     // width: '25px',\n//     position: 'fixed',\n//     top: '25%',\n//     left: '10px',\n//   },\n//   centerForm: {\n//     display: 'flex',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     width: '100%',\n//   },\n// }));\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  appBarSearch: {\n    borderRadius: 4,\n    marginBottom: '1rem',\n    display: 'flex',\n    padding: '16px',\n    position: 'relative',\n  },\n  addBar: {\n    borderRadius: 15,\n    margin: '650px 0',\n    marginLeft: '100px',\n    display: 'flex',\n    height: '50px',\n    width: '20%',\n    flexDirection: 'row-reverse',\n    [theme.breakpoints.down('xs')]: {\n      flexDirection: 'row',\n    },\n    justifyContent: 'space-between-evenly',\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n\n    // padding: '10px 50px',\n\n    height: '64px',\n  },\n  addIcon: {\n    float: 'right',\n  },\n  addName: {\n    display: 'block',\n  },\n  pagination: {\n    borderRadius: 4,\n    marginTop: '1rem',\n    padding: '16px',\n  },\n  gridContainer: {\n    [theme.breakpoints.down('xs')]: {\n      flexDirection: 'column-reverse',\n    },\n  },\n  searchButton: {\n    color: 'white',\n    backgroundColor: 'black',\n    fontFamily: 'Montserrat',\n  },\n  bottomNav: {\n    position: 'fixed',\n    bottom: 0,\n    width: '100%',\n    zIndex: 1,\n    color: 'black',\n  },\n  inputFormHide: {\n    display: 'none',\n  },\n  inputFormShow: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  add: {\n    // width: '25px',\n    position: 'fixed',\n    top: '25%',\n    left: '10px',\n  },\n  centerForm: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n  },\n}));\n","/Users/albertshay/Desktop/silkroad/client/src/components/Auth/icon.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Auth/styles.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Auth/Input.js",["182"],"import React from 'react';\nimport { TextField, Grid, InputAdornment, IconButton } from '@material-ui/core';\n\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { fontSize } from '@mui/system';\nimport useStyles from './styles';\n\nconst Input = ({\n  name,\n  handleChange,\n  label,\n  half,\n  autoFocus,\n  type,\n  handleShowPassword,\n}) => {\n  const classes = useStyles();\n  return (\n    <Grid item xs={12} sm={half ? 6 : 12}>\n      <TextField\n        name={name}\n        onChange={handleChange}\n        variant='outlined'\n        required\n        fullWidth\n        label={label}\n        autoFocus={autoFocus}\n        type={type}\n        InputLabelProps={{\n          style: { fontSize: 12 },\n          classes: {\n            root: classes.labelRoot,\n            focused: classes.labelFocused,\n          },\n        }}\n        InputProps={\n          name === 'password'\n            ? {\n                style: { fontSize: 12 },\n                classes: { root: classes.inputRoot },\n                endAdornment: (\n                  <InputAdornment position='end'>\n                    <IconButton onClick={handleShowPassword}>\n                      {type === 'password' ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }\n            : null\n        }\n      />\n    </Grid>\n  );\n};\n\nexport default Input;\n","/Users/albertshay/Desktop/silkroad/client/src/components/Form/Form.js",["183","184","185","186","187","188","189","190","191","192"],"import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { Dashboard } from '@uppy/react';\nimport {\n  TextField,\n  Button,\n  Typography,\n  Paper,\n  Grid,\n  FormControl,\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\nimport { useHistory, Link } from 'react-router-dom';\nimport ChipInput from 'material-ui-chip-input';\nimport AlgoliaPlaces from 'algolia-places-react';\nimport { createPost, updatePost } from '../../actions/posts';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n// import Uploader from './Uploader';\nimport places from 'places.js';\nimport UploadIcon from './UploadIcon';\nimport useStyles from './styles';\n\nconst config = {\n  addId: process.env.REACT_APP_ALOGLIA_APP_ID,\n  apiKey: process.env.REACT_APP_ALOGLIA_API_KEY,\n  language: 'en',\n  countries: ['us'],\n};\nconst Form = ({ showModal, currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({\n    title: '',\n    message: '',\n    location: '',\n    tags: [],\n    selectedFile: '',\n  });\n  const [location, setLocation] = useState('');\n\n  const post = useSelector((state) =>\n    currentId\n      ? state.posts.posts.find((message) => message._id === currentId)\n      : null\n  );\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const notify = () => toast('Please select image');\n  const history = useHistory();\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: '',\n      message: '',\n      location: '',\n      tags: [],\n      selectedFile: '',\n    });\n  };\n\n  useEffect(() => {\n    if (!post?.title) clear();\n    if (post) setPostData(post);\n  }, [post]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      dispatch(\n        createPost(\n          {\n            ...postData,\n            name: user?.result?.name,\n          },\n          history\n        )\n      );\n      clear();\n    } else {\n      dispatch(\n        updatePost(currentId, {\n          ...postData,\n          name: user?.result?.name,\n        })\n      );\n      clear();\n      showModal();\n    }\n  };\n\n  if (!user?.result?.name) {\n    return (\n      <Paper className={classes.paperSmall} elevation={0}>\n        <Typography variant='h7' align='center' component={Link} to='/auth'>\n          Sign in to buy & sell products\n        </Typography>\n      </Paper>\n    );\n  }\n\n  const handleAddChip = (tag) => {\n    setPostData({ ...postData, tags: [...postData.tags, tag] });\n  };\n\n  const handleDeleteChip = (chipToDelete) => {\n    setPostData({\n      ...postData,\n      tags: postData.tags.filter((tag) => tag !== chipToDelete),\n    });\n  };\n\n  <Grid item xs={16} sm={9} md={12}>\n    <Form\n      currentId={currentId}\n      setCurrentId={setCurrentId}\n      showModal={showModal}\n    />\n  </Grid>;\n\n  return (\n    <Grid item xs={12} sm={6} md={9}>\n      <Paper className={classes.paper} elevation={10}>\n        <form\n          autoComplete='off'\n          noValidate\n          className={`${classes.root} ${classes.form}`}\n          onSubmit={handleSubmit}\n        >\n          <Typography variant='h7'>\n            {currentId ? `Editing product` : 'Add new product'}\n          </Typography>\n          <TextField\n            required={true}\n            name='title'\n            className={classes.titleField}\n            variant='outlined'\n            label='Title'\n            fullWidth\n            value={postData.title}\n            onChange={(e) =>\n              setPostData({ ...postData, title: e.target.value })\n            }\n            InputProps={{ classes: { root: classes.inputRoot } }}\n            InputLabelProps={{\n              classes: {\n                root: classes.labelRoot,\n                focused: classes.labelFocused,\n              },\n            }}\n            margin='normal'\n          />\n          <TextField\n            required={true}\n            name='message'\n            variant='outlined'\n            label='Description'\n            fullWidth\n            multiline\n            className={classes.textField}\n            rows={10}\n            value={postData.message}\n            onChange={(e) =>\n              setPostData({ ...postData, message: e.target.value })\n            }\n            InputProps={{ classes: { root: classes.inputRoot } }}\n            InputLabelProps={{\n              classes: {\n                root: classes.labelRoot,\n                focused: classes.labelFocused,\n              },\n            }}\n            margin='normal'\n          />\n\n          {/* <TextField\n            name='message'\n            variant='outlined'\n            label='location'\n            fullWidth\n            option={config}\n            rows={1}\n            value={postData.message}\n            onChange={(e) => {\n              if (e.target.value === '') {\n                navigator.geolocation.getCurrentPosition(function (position) {\n                  console.log('Latitude is :', position.coords.latitude);\n                  console.log('Longitude is :', position.coords.longitude);\n                  location = position;\n                });\n              }\n              setPostData({\n                ...postData,\n                location: location\n                  ? { ...postData, location: location }\n                  : { ...postData, location: e.target.value },\n              });\n            }}\n            InputProps={{ classes: { root: classes.inputRoot } }}\n            InputLabelProps={{\n              classes: {\n                root: classes.labelRoot,\n                focused: classes.labelFocused,\n              },\n            }}\n            margin='normal'\n          /> */}\n          {/*   <ChipInput\n            name='tags'\n            variant='outlined'\n            label='Price'\n            fullWidth\n            value={postData.tags}\n            onAdd={(chip) => handleAddChip(chip)}\n            onDelete={(chip) => handleDeleteChip(chip)}\n        />*/}\n          <FormControl>\n            <AlgoliaPlaces\n              placeholder='Type location here*'\n              defaultValue={location}\n              options={config}\n              onChange={(e) => setLocation(e.suggestion.value)}\n              className={classes.locationAlgolia}\n            />\n          </FormControl>\n          <input\n            label='Location'\n            name='location'\n            className={classes.location}\n            style={{ fontFamily: 'Montserrat' }}\n            placeholder=' Click to confirm location*'\n            value={postData.location}\n            onClick={(e) => setPostData({ ...postData, location: location })}\n          />\n\n          <TextField\n            required={true}\n            name='tags'\n            variant='outlined'\n            label='Price'\n            className={classes.priceInput}\n            fullWidth\n            value={postData.tags}\n            onChange={(e) =>\n              setPostData({ ...postData, tags: e.target.value.split(',') })\n            }\n            InputProps={{ classes: { root: classes.inputRoot } }}\n            InputLabelProps={{\n              classes: {\n                root: classes.labelRoot,\n                focused: classes.labelFocused,\n              },\n            }}\n            margin='normal'\n          />\n\n          <br />\n          <div className={classes.fileInput}>\n            <FileBase\n              type='file'\n              className={classes.fileInput}\n              multiple={false}\n              onDone={({ base64 }) =>\n                setPostData({ ...postData, selectedFile: base64 })\n              }\n              label={UploadIcon}\n            />\n          </div>\n\n          <Button\n            className={classes.buttonSubmit}\n            variant='contained'\n            color='primary'\n            size='large'\n            type='submit'\n          >\n            Submit\n          </Button>\n          <ToastContainer />\n          {/*  <Button\n            variant='contained'\n            color='secondary'\n            size='small'\n            onClick={clear}\n            fullWidth\n          >\n            Clear\n        </Button>*/}\n        </form>\n      </Paper>\n      <br />\n    </Grid>\n  );\n};\n\nexport default Form;\n","/Users/albertshay/Desktop/silkroad/client/src/actions/posts.js",["193","194"],"import {\n  START_LOADING,\n  END_LOADING,\n  FETCH_ALL,\n  FETCH_POST,\n  FETCH_BY_SEARCH,\n  CREATE,\n  UPDATE,\n  DELETE,\n  LIKE,\n  COMMENT,\n  PROFILE,\n  FETCH_BY_USER,\n  FETCH_BY_LIKES,\n} from '../constants/actionTypes';\nimport * as api from '../api/index.js';\n\nexport const getPost = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n\n    const { data } = await api.fetchPost(id);\n\n    dispatch({ type: FETCH_POST, payload: { post: data } });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getPosts = (page) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const {\n      data: { data, currentPage, numberOfPages },\n    } = await api.fetchPosts(page);\n\n    dispatch({\n      type: FETCH_ALL,\n      payload: { data, currentPage, numberOfPages },\n    });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// export const getPostsByLikes = (likes) => async (dispatch) => {\n//   try {\n//     dispatch({ type: START_LOADING });\n//     const {\n//       data: { data },\n//     } = await api.fetchPostsByLikes(likes);\n//     console.log(data);\n//     dispatch({ type: FETCH_BY_LIKES, payload: { data } });\n//     dispatch({ type: END_LOADING });\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\nexport const getPostsByUser = (user) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const {\n      data: { data },\n    } = await api.fetchPostsByUser(user);\n    console.log(data);\n    dispatch({ type: PROFILE, payload: { data } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const {\n      data: { data },\n    } = await api.fetchPostsBySearch(searchQuery);\n    console.log(data);\n    dispatch({ type: FETCH_BY_SEARCH, payload: { data } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const createPost = (post, history) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.createPost(post);\n\n    history.push(`/posts/${data._id}`);\n    dispatch({ type: CREATE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n\n    dispatch({ type: UPDATE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const likePost = (id) => async (dispatch) => {\n  const user = JSON.parse(localStorage.getItem('profile')).token;\n  // console.log(user.token);\n  try {\n    const { data } = await api.likePost(id, user?.token);\n    // console.log('data', data);\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const commentPost = (value, id) => async (dispatch) => {\n  try {\n    const { data } = await api.comment(value, id);\n\n    dispatch({ type: COMMENT, payload: data });\n\n    return data.comments;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await await api.deletePost(id);\n\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","/Users/albertshay/Desktop/silkroad/client/src/actions/auth.js",[],"/Users/albertshay/Desktop/silkroad/client/src/constants/actionTypes.js",[],"/Users/albertshay/Desktop/silkroad/client/src/api/travelAdvisorAPI.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Posts/Posts.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Modal/Modal.js",["195","196"],"import * as React from 'react';\nimport { styled, Box } from '@mui/system';\nimport ModalUnstyled from '@mui/core/ModalUnstyled';\nimport Form from '../Form/Form';\nconst StyledModal = styled(ModalUnstyled)`\n  position: fixed;\n  z-index: 1300;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Backdrop = styled('div')`\n  z-index: -1;\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  -webkit-tap-highlight-color: transparent;\n`;\n\nconst style = {\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  p: 2,\n  px: 4,\n  pb: 3,\n};\n\nexport default function ModalUnstyledDemo({ currentId, setCurrentId }) {\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <div>\n      <button type='button' onClick={handleOpen}>\n        Open modal\n      </button>\n      <StyledModal\n        aria-labelledby='unstyled-modal-title'\n        aria-describedby='unstyled-modal-description'\n        open={open}\n        onClose={handleClose}\n        BackdropComponent={Backdrop}\n      >\n        <Form current={currentId} setCurrentId={setCurrentId} />\n      </StyledModal>\n    </div>\n  );\n}\n","/Users/albertshay/Desktop/silkroad/client/src/components/PostDetails/styles.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Pagination.jsx",[],"/Users/albertshay/Desktop/silkroad/client/src/components/PostDetails/CommentSection.jsx",[],"/Users/albertshay/Desktop/silkroad/client/src/api/index.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Form/UploadIcon.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Form/styles.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Posts/styles.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/styles.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Posts/Post/Post.js",["197","198"],"import React from 'react';\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Button,\n  Typography,\n  ButtonBase,\n} from '@material-ui/core/';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\n// import ThumbUpAltOutlined from '@material-ui/icons/ThumbUpAltOutlined';\nimport { useDispatch } from 'react-redux';\nimport moment from 'moment';\nimport { useHistory } from 'react-router-dom';\n\nimport { likePost, deletePost } from '../../../actions/posts';\nimport useStyles from './styles';\n\nconst Post = ({ post, setCurrentId, showModal }) => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const history = useHistory();\n\n  const Likes = () => {\n    console.log(post);\n    if (post?.likes?.length > 0) {\n      return post.likes.find(\n        (like) => like === (user?.result?.googleId || user?.result?._id)\n      ) ? (\n        <>\n          <FavoriteBorderIcon fontSize='small' />\n          &nbsp;\n          {post.likes.length > 2\n            ? `You and ${post.likes.length - 1} others`\n            : `${post.likes.length} like${post.likes.length > 1 ? 's' : ''}`}\n        </>\n      ) : (\n        <>\n          <FavoriteBorderIcon fontSize='small' />\n          &nbsp;{post.likes.length} {post.likes.length === 1 ? 'Like' : 'Likes'}\n        </>\n      );\n    }\n\n    return (\n      <>\n        <FavoriteBorderIcon fontSize='small' />\n        &nbsp;Like\n      </>\n    );\n  };\n  const handleLike = () => {\n    if (!user?.token) {\n      history.push('/auth');\n    } else {\n      dispatch(likePost(post._id));\n    }\n  };\n  const openPost = (e) => {\n    // dispatch(getPost(post._id, history));\n\n    history.push(`/posts/${post._id}`);\n  };\n\n  return (\n    <Card className={classes.card}>\n      <CardMedia\n        className={classes.media}\n        image={\n          post.selectedFile ||\n          'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png'\n        }\n        title={post.title}\n        onClick={openPost}\n      />\n      <div className={classes.overlay}>\n        {/*<Typography className={classes.creator}>{post.name}</Typography> */}\n        <Typography className={classes.creator} variant='body2'>\n          {moment(post.createdAt).fromNow()}\n        </Typography>\n      </div>\n      {(user?.result?.googleId === post?.creator ||\n        user?.result?._id === post?.creator) && (\n        <div className={classes.overlay2}>\n          <Button\n            onClick={() => {\n              showModal();\n              setCurrentId(post._id);\n            }}\n            style={{ color: 'white' }}\n            size='small'\n          >\n            <MoreHorizIcon fontSize='default' />\n          </Button>\n        </div>\n      )}\n\n      <div>\n        <Button\n          className={classes.overlay3}\n          size='small'\n          color='primary'\n          //  disabled={!user?.result}\n          //onClick={() => dispatch(likePost(post._id))}\n          onClick={handleLike}\n        >\n          <Likes />\n        </Button>\n      </div>\n      <div className={classes.details}></div>\n      <Typography\n        className={classes.title}\n        //gutterBottom\n        variant='h6'\n        component='h2'\n      >\n        {post.title}\n      </Typography>\n      <Typography\n        className={classes.location}\n        //gutterBottom\n        variant='h6'\n        component='h2'\n      >\n        {post.location}\n      </Typography>\n      <Typography className={classes.message}>{post.message}</Typography>\n      <Typography\n        className={classes.price}\n        //gutterBottom\n        variant='h6'\n        component='h2'\n      >\n        {`$${post.tags}`}\n      </Typography>\n\n      {/*<CardContent className={classes.message}>\n       \n       </CardContent> */}\n\n      <CardActions>\n        {/*  <Button\n          className={classes.likeButton}\n          size='small'\n          color='primary'\n          //  disabled={!user?.result}\n          //onClick={() => dispatch(likePost(post._id))}\n          onClick={handleLike}\n        >\n          <Likes />\n        </Button>*/}\n\n        {(user?.result?.googleId === post?.creator ||\n          user?.result?._id === post?.creator) && (\n          <Button\n            className={classes.overlay4}\n            size='small'\n            color='secondary'\n            onClick={() => dispatch(deletePost(post._id))}\n          >\n            <DeleteIcon fontSize='small' />\n          </Button>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Post;\n","/Users/albertshay/Desktop/silkroad/client/src/components/Posts/Post/styles.js",[],"/Users/albertshay/Desktop/silkroad/client/src/components/Form/Uploader.js",["199"],{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":77,"column":9,"nodeType":"206","messageId":"207","endLine":77,"endColumn":13},{"ruleId":"204","severity":1,"message":"208","line":9,"column":3,"nodeType":"206","messageId":"207","endLine":9,"endColumn":12},{"ruleId":"204","severity":1,"message":"209","line":15,"column":8,"nodeType":"206","messageId":"207","endLine":15,"endColumn":12},{"ruleId":"204","severity":1,"message":"210","line":20,"column":3,"nodeType":"206","messageId":"207","endLine":20,"endColumn":11},{"ruleId":"204","severity":1,"message":"211","line":22,"column":3,"nodeType":"206","messageId":"207","endLine":22,"endColumn":17},{"ruleId":"204","severity":1,"message":"212","line":39,"column":10,"nodeType":"206","messageId":"207","endLine":39,"endColumn":19},{"ruleId":"204","severity":1,"message":"213","line":39,"column":21,"nodeType":"206","messageId":"207","endLine":39,"endColumn":33},{"ruleId":"204","severity":1,"message":"214","line":43,"column":9,"nodeType":"206","messageId":"207","endLine":43,"endColumn":13},{"ruleId":"204","severity":1,"message":"215","line":44,"column":9,"nodeType":"206","messageId":"207","endLine":44,"endColumn":20},{"ruleId":"216","severity":1,"message":"217","line":75,"column":6,"nodeType":"218","endLine":75,"endColumn":16,"suggestions":"219"},{"ruleId":"204","severity":1,"message":"220","line":1,"column":27,"nodeType":"206","messageId":"207","endLine":1,"endColumn":36},{"ruleId":"204","severity":1,"message":"221","line":6,"column":3,"nodeType":"206","messageId":"207","endLine":6,"endColumn":8},{"ruleId":"204","severity":1,"message":"222","line":8,"column":3,"nodeType":"206","messageId":"207","endLine":8,"endColumn":19},{"ruleId":"204","severity":1,"message":"223","line":9,"column":3,"nodeType":"206","messageId":"207","endLine":9,"endColumn":12},{"ruleId":"204","severity":1,"message":"224","line":10,"column":3,"nodeType":"206","messageId":"207","endLine":10,"endColumn":9},{"ruleId":"204","severity":1,"message":"225","line":14,"column":10,"nodeType":"206","messageId":"207","endLine":14,"endColumn":23},{"ruleId":"204","severity":1,"message":"226","line":14,"column":25,"nodeType":"206","messageId":"207","endLine":14,"endColumn":39},{"ruleId":"204","severity":1,"message":"210","line":17,"column":3,"nodeType":"206","messageId":"207","endLine":17,"endColumn":11},{"ruleId":"204","severity":1,"message":"227","line":24,"column":8,"nodeType":"206","messageId":"207","endLine":24,"endColumn":17},{"ruleId":"204","severity":1,"message":"228","line":26,"column":8,"nodeType":"206","messageId":"207","endLine":26,"endColumn":25},{"ruleId":"204","severity":1,"message":"229","line":43,"column":18,"nodeType":"206","messageId":"207","endLine":43,"endColumn":27},{"ruleId":"204","severity":1,"message":"230","line":47,"column":11,"nodeType":"206","messageId":"207","endLine":47,"endColumn":16},{"ruleId":"204","severity":1,"message":"231","line":47,"column":18,"nodeType":"206","messageId":"207","endLine":47,"endColumn":27},{"ruleId":"204","severity":1,"message":"232","line":68,"column":9,"nodeType":"206","messageId":"207","endLine":68,"endColumn":21},{"ruleId":"204","severity":1,"message":"233","line":74,"column":9,"nodeType":"206","messageId":"207","endLine":74,"endColumn":23},{"ruleId":"204","severity":1,"message":"234","line":80,"column":9,"nodeType":"206","messageId":"207","endLine":80,"endColumn":22},{"ruleId":"204","severity":1,"message":"235","line":82,"column":9,"nodeType":"206","messageId":"207","endLine":82,"endColumn":25},{"ruleId":"204","severity":1,"message":"236","line":4,"column":3,"nodeType":"206","messageId":"207","endLine":4,"endColumn":9},{"ruleId":"204","severity":1,"message":"237","line":13,"column":8,"nodeType":"206","messageId":"207","endLine":13,"endColumn":24},{"ruleId":"204","severity":1,"message":"224","line":129,"column":3,"nodeType":"206","messageId":"207","endLine":129,"endColumn":9},{"ruleId":"204","severity":1,"message":"205","line":146,"column":9,"nodeType":"206","messageId":"207","endLine":146,"endColumn":13},{"ruleId":"216","severity":1,"message":"238","line":149,"column":6,"nodeType":"218","endLine":149,"endColumn":10,"suggestions":"239"},{"ruleId":"216","severity":1,"message":"238","line":157,"column":6,"nodeType":"218","endLine":157,"endColumn":12,"suggestions":"240"},{"ruleId":"241","severity":1,"message":"242","line":239,"column":13,"nodeType":"243","messageId":"244","endLine":239,"endColumn":42},{"ruleId":"245","severity":1,"message":"246","line":15,"column":1,"nodeType":"247","endLine":70,"endColumn":3},{"ruleId":"248","severity":1,"message":"249","line":47,"column":24,"nodeType":"250","messageId":"251","endLine":47,"endColumn":26},{"ruleId":"252","severity":1,"message":"253","line":105,"column":5,"nodeType":"254","messageId":"251","endLine":105,"endColumn":11},{"ruleId":"204","severity":1,"message":"255","line":6,"column":10,"nodeType":"206","messageId":"207","endLine":6,"endColumn":18},{"ruleId":"204","severity":1,"message":"256","line":1,"column":38,"nodeType":"206","messageId":"207","endLine":1,"endColumn":44},{"ruleId":"204","severity":1,"message":"257","line":1,"column":46,"nodeType":"206","messageId":"207","endLine":1,"endColumn":53},{"ruleId":"204","severity":1,"message":"258","line":2,"column":10,"nodeType":"206","messageId":"207","endLine":2,"endColumn":19},{"ruleId":"204","severity":1,"message":"259","line":13,"column":8,"nodeType":"206","messageId":"207","endLine":13,"endColumn":22},{"ruleId":"204","severity":1,"message":"227","line":15,"column":8,"nodeType":"206","messageId":"207","endLine":15,"endColumn":17},{"ruleId":"204","severity":1,"message":"260","line":21,"column":8,"nodeType":"206","messageId":"207","endLine":21,"endColumn":14},{"ruleId":"204","severity":1,"message":"261","line":49,"column":9,"nodeType":"206","messageId":"207","endLine":49,"endColumn":15},{"ruleId":"216","severity":1,"message":"262","line":66,"column":6,"nodeType":"218","endLine":66,"endColumn":12,"suggestions":"263"},{"ruleId":"204","severity":1,"message":"234","line":104,"column":9,"nodeType":"206","messageId":"207","endLine":104,"endColumn":22},{"ruleId":"204","severity":1,"message":"235","line":108,"column":9,"nodeType":"206","messageId":"207","endLine":108,"endColumn":25},{"ruleId":"204","severity":1,"message":"264","line":13,"column":3,"nodeType":"206","messageId":"207","endLine":13,"endColumn":16},{"ruleId":"204","severity":1,"message":"265","line":14,"column":3,"nodeType":"206","messageId":"207","endLine":14,"endColumn":17},{"ruleId":"204","severity":1,"message":"266","line":2,"column":18,"nodeType":"206","messageId":"207","endLine":2,"endColumn":21},{"ruleId":"204","severity":1,"message":"267","line":28,"column":7,"nodeType":"206","messageId":"207","endLine":28,"endColumn":12},{"ruleId":"204","severity":1,"message":"268","line":5,"column":3,"nodeType":"206","messageId":"207","endLine":5,"endColumn":14},{"ruleId":"204","severity":1,"message":"269","line":9,"column":3,"nodeType":"206","messageId":"207","endLine":9,"endColumn":13},{"ruleId":"216","severity":1,"message":"270","line":20,"column":6,"nodeType":"218","endLine":20,"endColumn":8,"suggestions":"271"},"no-native-reassign",["272"],"no-negated-in-lhs",["273"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'InputBase' is defined but never used.","'Form' is defined but never used.","'getPosts' is defined but never used.","'getPostsByUser' is defined but never used.","'currentId' is assigned a value but never used.","'setCurrentId' is assigned a value but never used.","'page' is assigned a value but never used.","'searchQuery' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'logout' and 'user?.token'. Either include them or remove the dependency array.","ArrayExpression",["274"],"'useEffect' is defined but never used.","'Paper' is defined but never used.","'BottomNavigation' is defined but never used.","'TextField' is defined but never used.","'Button' is defined but never used.","'getPlacesData' is defined but never used.","'getWeatherData' is defined but never used.","'ChipInput' is defined but never used.","'ModalUnstyledDemo' is defined but never used.","'setSearch' is assigned a value but never used.","'posts' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'searchByUser' is assigned a value but never used.","'handleKeyPress' is assigned a value but never used.","'handleAddChip' is assigned a value but never used.","'handleDeleteChip' is assigned a value but never used.","'Avatar' is defined but never used.","'LockOutlinedIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["275"],["276"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-keys","Duplicate key 'height'.","ObjectExpression","'fontSize' is defined but never used.","'useRef' is defined but never used.","'useMemo' is defined but never used.","'Dashboard' is defined but never used.","'FileUploadIcon' is defined but never used.","'places' is defined but never used.","'notify' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'clear'. Either include it or remove the dependency array.",["277"],"'FETCH_BY_USER' is defined but never used.","'FETCH_BY_LIKES' is defined but never used.","'Box' is defined but never used.","'style' is assigned a value but never used.","'CardContent' is defined but never used.","'ButtonBase' is defined but never used.","React Hook useEffect has a missing dependency: 'uppy'. Either include it or remove the dependency array.",["278"],"no-global-assign","no-unsafe-negation",{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},"Update the dependencies array to be: [location, logout, user?.token]",{"range":"289","text":"290"},"Update the dependencies array to be: [dispatch, id]",{"range":"291","text":"292"},"Update the dependencies array to be: [dispatch, post]",{"range":"293","text":"294"},"Update the dependencies array to be: [clear, post]",{"range":"295","text":"296"},"Update the dependencies array to be: [uppy]",{"range":"297","text":"298"},[1900,1910],"[location, logout, user?.token]",[4994,4998],"[dispatch, id]",[5148,5154],"[dispatch, post]",[1850,1856],"[clear, post]",[566,568],"[uppy]"]