{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar React = require('react');\n\nvar DashboardPlugin = require('@uppy/dashboard');\n\nvar basePropTypes = require('./propTypes').dashboard;\n\nvar getHTMLProps = require('./getHTMLProps');\n\nvar nonHtmlPropsHaveChanged = require('./nonHtmlPropsHaveChanged');\n\nvar h = React.createElement;\n/**\n * React Component that renders a Dashboard for an Uppy instance. This component\n * renders the Dashboard inline, so you can put it anywhere you want.\n */\n\nvar Dashboard = /*#__PURE__*/function (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  var _super = _createSuper(Dashboard);\n\n  function Dashboard() {\n    _classCallCheck(this, Dashboard);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.installPlugin();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.uppy !== this.props.uppy) {\n        this.uninstallPlugin(prevProps);\n        this.installPlugin();\n      } else if (nonHtmlPropsHaveChanged(this, prevProps)) {\n        var options = _objectSpread(_objectSpread({}, this.props), {}, {\n          target: this.container\n        });\n\n        delete options.uppy;\n        this.plugin.setOptions(options);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.uninstallPlugin();\n    }\n  }, {\n    key: \"installPlugin\",\n    value: function installPlugin() {\n      var uppy = this.props.uppy;\n\n      var options = _objectSpread(_objectSpread({\n        id: 'react:Dashboard'\n      }, this.props), {}, {\n        target: this.container\n      });\n\n      delete options.uppy;\n      uppy.use(DashboardPlugin, options);\n      this.plugin = uppy.getPlugin(options.id);\n    }\n  }, {\n    key: \"uninstallPlugin\",\n    value: function uninstallPlugin() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var uppy = props.uppy;\n      uppy.removePlugin(this.plugin);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      // TODO: stop exposing `validProps` as a public property and rename it to `htmlProps`\n      this.validProps = getHTMLProps(this.props);\n      return h('div', _objectSpread({\n        ref: function ref(container) {\n          _this.container = container;\n        }\n      }, this.validProps));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nDashboard.propTypes = basePropTypes;\nDashboard.defaultProps = {\n  inline: true\n};\nmodule.exports = Dashboard;","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/react/lib/Dashboard.js"],"names":["React","require","DashboardPlugin","basePropTypes","dashboard","getHTMLProps","nonHtmlPropsHaveChanged","h","createElement","Dashboard","installPlugin","prevProps","uppy","props","uninstallPlugin","options","target","container","plugin","setOptions","id","use","getPlugin","removePlugin","validProps","ref","Component","propTypes","defaultProps","inline","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,eAAe,GAAGD,OAAO,CAAC,iBAAD,CAA/B;;AAEA,IAAME,aAAa,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBG,SAA7C;;AAEA,IAAMC,YAAY,GAAGJ,OAAO,CAAC,gBAAD,CAA5B;;AAEA,IAAMK,uBAAuB,GAAGL,OAAO,CAAC,2BAAD,CAAvC;;AAEA,IAAMM,CAAC,GAAGP,KAAK,CAACQ,aAAhB;AACA;AACA;AACA;AACA;;IAEMC,S;;;;;;;;;;;;;WACJ,6BAAoB;AAClB,WAAKC,aAAL;AACD;;;WAED,4BAAmBC,SAAnB,EAA8B;AAC5B,UAAIA,SAAS,CAACC,IAAV,KAAmB,KAAKC,KAAL,CAAWD,IAAlC,EAAwC;AACtC,aAAKE,eAAL,CAAqBH,SAArB;AACA,aAAKD,aAAL;AACD,OAHD,MAGO,IAAIJ,uBAAuB,CAAC,IAAD,EAAOK,SAAP,CAA3B,EAA8C;AACnD,YAAMI,OAAO,mCAAQ,KAAKF,KAAb;AACXG,UAAAA,MAAM,EAAE,KAAKC;AADF,UAAb;;AAGA,eAAOF,OAAO,CAACH,IAAf;AACA,aAAKM,MAAL,CAAYC,UAAZ,CAAuBJ,OAAvB;AACD;AACF;;;WAED,gCAAuB;AACrB,WAAKD,eAAL;AACD;;;WAED,yBAAgB;AACd,UACEF,IADF,GAEI,KAAKC,KAFT,CACED,IADF;;AAGA,UAAMG,OAAO;AACXK,QAAAA,EAAE,EAAE;AADO,SAER,KAAKP,KAFG;AAGXG,QAAAA,MAAM,EAAE,KAAKC;AAHF,QAAb;;AAKA,aAAOF,OAAO,CAACH,IAAf;AACAA,MAAAA,IAAI,CAACS,GAAL,CAASnB,eAAT,EAA0Ba,OAA1B;AACA,WAAKG,MAAL,GAAcN,IAAI,CAACU,SAAL,CAAeP,OAAO,CAACK,EAAvB,CAAd;AACD;;;WAED,2BAAoC;AAAA,UAApBP,KAAoB,uEAAZ,KAAKA,KAAO;AAClC,UACED,IADF,GAEIC,KAFJ,CACED,IADF;AAGAA,MAAAA,IAAI,CAACW,YAAL,CAAkB,KAAKL,MAAvB;AACD;;;WAED,kBAAS;AAAA;;AACP;AACA,WAAKM,UAAL,GAAkBnB,YAAY,CAAC,KAAKQ,KAAN,CAA9B;AACA,aAAON,CAAC,CAAC,KAAD;AACNkB,QAAAA,GAAG,EAAE,aAAAR,SAAS,EAAI;AAChB,UAAA,KAAI,CAACA,SAAL,GAAiBA,SAAjB;AACD;AAHK,SAIH,KAAKO,UAJF,EAAR;AAMD;;;;EApDqBxB,KAAK,CAAC0B,S;;AAwD9BjB,SAAS,CAACkB,SAAV,GAAsBxB,aAAtB;AACAM,SAAS,CAACmB,YAAV,GAAyB;AACvBC,EAAAA,MAAM,EAAE;AADe,CAAzB;AAGAC,MAAM,CAACC,OAAP,GAAiBtB,SAAjB","sourcesContent":["\"use strict\";\n\nconst React = require('react');\n\nconst DashboardPlugin = require('@uppy/dashboard');\n\nconst basePropTypes = require('./propTypes').dashboard;\n\nconst getHTMLProps = require('./getHTMLProps');\n\nconst nonHtmlPropsHaveChanged = require('./nonHtmlPropsHaveChanged');\n\nconst h = React.createElement;\n/**\n * React Component that renders a Dashboard for an Uppy instance. This component\n * renders the Dashboard inline, so you can put it anywhere you want.\n */\n\nclass Dashboard extends React.Component {\n  componentDidMount() {\n    this.installPlugin();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.uppy !== this.props.uppy) {\n      this.uninstallPlugin(prevProps);\n      this.installPlugin();\n    } else if (nonHtmlPropsHaveChanged(this, prevProps)) {\n      const options = { ...this.props,\n        target: this.container\n      };\n      delete options.uppy;\n      this.plugin.setOptions(options);\n    }\n  }\n\n  componentWillUnmount() {\n    this.uninstallPlugin();\n  }\n\n  installPlugin() {\n    const {\n      uppy\n    } = this.props;\n    const options = {\n      id: 'react:Dashboard',\n      ...this.props,\n      target: this.container\n    };\n    delete options.uppy;\n    uppy.use(DashboardPlugin, options);\n    this.plugin = uppy.getPlugin(options.id);\n  }\n\n  uninstallPlugin(props = this.props) {\n    const {\n      uppy\n    } = props;\n    uppy.removePlugin(this.plugin);\n  }\n\n  render() {\n    // TODO: stop exposing `validProps` as a public property and rename it to `htmlProps`\n    this.validProps = getHTMLProps(this.props);\n    return h('div', {\n      ref: container => {\n        this.container = container;\n      },\n      ...this.validProps\n    });\n  }\n\n}\n\nDashboard.propTypes = basePropTypes;\nDashboard.defaultProps = {\n  inline: true\n};\nmodule.exports = Dashboard;"]},"metadata":{},"sourceType":"script"}