{"ast":null,"code":"\"use strict\";\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n\n  return receiver;\n}\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\n\nconst {\n  render\n} = require('preact');\n\nconst findDOMElement = require('@uppy/utils/lib/findDOMElement');\n\nconst BasePlugin = require('./BasePlugin');\n/**\n * Defer a frequent call to the microtask queue.\n *\n * @param {() => T} fn\n * @returns {Promise<T>}\n */\n\n\nfunction debounce(fn) {\n  let calling = null;\n  let latestArgs = null;\n  return (...args) => {\n    latestArgs = args;\n\n    if (!calling) {\n      calling = Promise.resolve().then(() => {\n        calling = null; // At this point `args` may be different from the most\n        // recent state, if multiple calls happened since this task\n        // was queued. So we use the `latestArgs`, which definitely\n        // is the most recent call.\n\n        return fn(...latestArgs);\n      });\n    }\n\n    return calling;\n  };\n}\n/**\n * UIPlugin is the extended version of BasePlugin to incorporate rendering with Preact.\n * Use this for plugins that need a user interface.\n *\n * For plugins without an user interface, see BasePlugin.\n */\n\n\nvar _updateUI = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateUI\");\n\nclass UIPlugin extends BasePlugin {\n  constructor(...args) {\n    super(...args);\n    Object.defineProperty(this, _updateUI, {\n      writable: true,\n      value: void 0\n    });\n  }\n  /**\n   * Check if supplied `target` is a DOM element or an `object`.\n   * If it’s an object — target is a plugin, and we search `plugins`\n   * for a plugin with same name and return its target.\n   */\n\n\n  mount(target, plugin) {\n    const callerPluginName = plugin.id;\n    const targetElement = findDOMElement(target);\n\n    if (targetElement) {\n      this.isTargetDOMEl = true; // When target is <body> with a single <div> element,\n      // Preact thinks it’s the Uppy root element in there when doing a diff,\n      // and destroys it. So we are creating a fragment (could be empty div)\n\n      const uppyRootElement = document.createDocumentFragment(); // API for plugins that require a synchronous rerender.\n\n      _classPrivateFieldLooseBase(this, _updateUI)[_updateUI] = debounce(state => {\n        // plugin could be removed, but this.rerender is debounced below,\n        // so it could still be called even after uppy.removePlugin or uppy.close\n        // hence the check\n        if (!this.uppy.getPlugin(this.id)) return;\n        render(this.render(state), uppyRootElement);\n        this.afterUpdate();\n      });\n      this.uppy.log(`Installing ${callerPluginName} to a DOM element '${target}'`);\n\n      if (this.opts.replaceTargetContent) {\n        // Doing render(h(null), targetElement), which should have been\n        // a better way, since because the component might need to do additional cleanup when it is removed,\n        // stopped working — Preact just adds null into target, not replacing\n        targetElement.innerHTML = '';\n      }\n\n      render(this.render(this.uppy.getState()), uppyRootElement);\n      this.el = uppyRootElement.firstElementChild;\n      targetElement.appendChild(uppyRootElement);\n      this.onMount();\n      return this.el;\n    }\n\n    let targetPlugin;\n\n    if (typeof target === 'object' && target instanceof UIPlugin) {\n      // Targeting a plugin *instance*\n      targetPlugin = target;\n    } else if (typeof target === 'function') {\n      // Targeting a plugin type\n      const Target = target; // Find the target plugin instance.\n\n      this.uppy.iteratePlugins(p => {\n        if (p instanceof Target) {\n          targetPlugin = p;\n          return false;\n        }\n      });\n    }\n\n    if (targetPlugin) {\n      this.uppy.log(`Installing ${callerPluginName} to ${targetPlugin.id}`);\n      this.parent = targetPlugin;\n      this.el = targetPlugin.addTarget(plugin);\n      this.onMount();\n      return this.el;\n    }\n\n    this.uppy.log(`Not installing ${callerPluginName}`);\n    let message = `Invalid target option given to ${callerPluginName}.`;\n\n    if (typeof target === 'function') {\n      message += ' The given target is not a Plugin class. ' + 'Please check that you\\'re not specifying a React Component instead of a plugin. ' + 'If you are using @uppy/* packages directly, make sure you have only 1 version of @uppy/core installed: ' + 'run `npm ls @uppy/core` on the command line and verify that all the versions match and are deduped correctly.';\n    } else {\n      message += 'If you meant to target an HTML element, please make sure that the element exists. ' + 'Check that the <script> tag initializing Uppy is right before the closing </body> tag at the end of the page. ' + '(see https://github.com/transloadit/uppy/issues/1042)\\n\\n' + 'If you meant to target a plugin, please confirm that your `import` statements or `require` calls are correct.';\n    }\n\n    throw new Error(message);\n  }\n\n  update(state) {\n    if (this.el != null) {\n      var _classPrivateFieldLoo, _classPrivateFieldLoo2;\n\n      (_classPrivateFieldLoo = (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(this, _updateUI))[_updateUI]) == null ? void 0 : _classPrivateFieldLoo.call(_classPrivateFieldLoo2, state);\n    }\n  }\n\n  unmount() {\n    if (this.isTargetDOMEl) {\n      var _this$el;\n\n      (_this$el = this.el) == null ? void 0 : _this$el.remove();\n    }\n\n    this.onUnmount();\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  onMount() {} // eslint-disable-next-line class-methods-use-this\n\n\n  onUnmount() {}\n\n}\n\nmodule.exports = UIPlugin;","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/core/lib/UIPlugin.js"],"names":["_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","render","require","findDOMElement","BasePlugin","debounce","fn","calling","latestArgs","args","Promise","resolve","then","_updateUI","UIPlugin","constructor","defineProperty","writable","value","mount","target","plugin","callerPluginName","targetElement","isTargetDOMEl","uppyRootElement","document","createDocumentFragment","state","uppy","getPlugin","afterUpdate","log","opts","replaceTargetContent","innerHTML","getState","el","firstElementChild","appendChild","onMount","targetPlugin","Target","iteratePlugins","p","parent","addTarget","message","Error","update","_classPrivateFieldLoo","_classPrivateFieldLoo2","unmount","_this$el","remove","onUnmount","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\n\nconst {\n  render\n} = require('preact');\n\nconst findDOMElement = require('@uppy/utils/lib/findDOMElement');\n\nconst BasePlugin = require('./BasePlugin');\n/**\n * Defer a frequent call to the microtask queue.\n *\n * @param {() => T} fn\n * @returns {Promise<T>}\n */\n\n\nfunction debounce(fn) {\n  let calling = null;\n  let latestArgs = null;\n  return (...args) => {\n    latestArgs = args;\n\n    if (!calling) {\n      calling = Promise.resolve().then(() => {\n        calling = null; // At this point `args` may be different from the most\n        // recent state, if multiple calls happened since this task\n        // was queued. So we use the `latestArgs`, which definitely\n        // is the most recent call.\n\n        return fn(...latestArgs);\n      });\n    }\n\n    return calling;\n  };\n}\n/**\n * UIPlugin is the extended version of BasePlugin to incorporate rendering with Preact.\n * Use this for plugins that need a user interface.\n *\n * For plugins without an user interface, see BasePlugin.\n */\n\n\nvar _updateUI = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateUI\");\n\nclass UIPlugin extends BasePlugin {\n  constructor(...args) {\n    super(...args);\n    Object.defineProperty(this, _updateUI, {\n      writable: true,\n      value: void 0\n    });\n  }\n\n  /**\n   * Check if supplied `target` is a DOM element or an `object`.\n   * If it’s an object — target is a plugin, and we search `plugins`\n   * for a plugin with same name and return its target.\n   */\n  mount(target, plugin) {\n    const callerPluginName = plugin.id;\n    const targetElement = findDOMElement(target);\n\n    if (targetElement) {\n      this.isTargetDOMEl = true; // When target is <body> with a single <div> element,\n      // Preact thinks it’s the Uppy root element in there when doing a diff,\n      // and destroys it. So we are creating a fragment (could be empty div)\n\n      const uppyRootElement = document.createDocumentFragment(); // API for plugins that require a synchronous rerender.\n\n      _classPrivateFieldLooseBase(this, _updateUI)[_updateUI] = debounce(state => {\n        // plugin could be removed, but this.rerender is debounced below,\n        // so it could still be called even after uppy.removePlugin or uppy.close\n        // hence the check\n        if (!this.uppy.getPlugin(this.id)) return;\n        render(this.render(state), uppyRootElement);\n        this.afterUpdate();\n      });\n      this.uppy.log(`Installing ${callerPluginName} to a DOM element '${target}'`);\n\n      if (this.opts.replaceTargetContent) {\n        // Doing render(h(null), targetElement), which should have been\n        // a better way, since because the component might need to do additional cleanup when it is removed,\n        // stopped working — Preact just adds null into target, not replacing\n        targetElement.innerHTML = '';\n      }\n\n      render(this.render(this.uppy.getState()), uppyRootElement);\n      this.el = uppyRootElement.firstElementChild;\n      targetElement.appendChild(uppyRootElement);\n      this.onMount();\n      return this.el;\n    }\n\n    let targetPlugin;\n\n    if (typeof target === 'object' && target instanceof UIPlugin) {\n      // Targeting a plugin *instance*\n      targetPlugin = target;\n    } else if (typeof target === 'function') {\n      // Targeting a plugin type\n      const Target = target; // Find the target plugin instance.\n\n      this.uppy.iteratePlugins(p => {\n        if (p instanceof Target) {\n          targetPlugin = p;\n          return false;\n        }\n      });\n    }\n\n    if (targetPlugin) {\n      this.uppy.log(`Installing ${callerPluginName} to ${targetPlugin.id}`);\n      this.parent = targetPlugin;\n      this.el = targetPlugin.addTarget(plugin);\n      this.onMount();\n      return this.el;\n    }\n\n    this.uppy.log(`Not installing ${callerPluginName}`);\n    let message = `Invalid target option given to ${callerPluginName}.`;\n\n    if (typeof target === 'function') {\n      message += ' The given target is not a Plugin class. ' + 'Please check that you\\'re not specifying a React Component instead of a plugin. ' + 'If you are using @uppy/* packages directly, make sure you have only 1 version of @uppy/core installed: ' + 'run `npm ls @uppy/core` on the command line and verify that all the versions match and are deduped correctly.';\n    } else {\n      message += 'If you meant to target an HTML element, please make sure that the element exists. ' + 'Check that the <script> tag initializing Uppy is right before the closing </body> tag at the end of the page. ' + '(see https://github.com/transloadit/uppy/issues/1042)\\n\\n' + 'If you meant to target a plugin, please confirm that your `import` statements or `require` calls are correct.';\n    }\n\n    throw new Error(message);\n  }\n\n  update(state) {\n    if (this.el != null) {\n      var _classPrivateFieldLoo, _classPrivateFieldLoo2;\n\n      (_classPrivateFieldLoo = (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(this, _updateUI))[_updateUI]) == null ? void 0 : _classPrivateFieldLoo.call(_classPrivateFieldLoo2, state);\n    }\n  }\n\n  unmount() {\n    if (this.isTargetDOMEl) {\n      var _this$el;\n\n      (_this$el = this.el) == null ? void 0 : _this$el.remove();\n    }\n\n    this.onUnmount();\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  onMount() {} // eslint-disable-next-line class-methods-use-this\n\n\n  onUnmount() {}\n\n}\n\nmodule.exports = UIPlugin;"]},"metadata":{},"sourceType":"script"}