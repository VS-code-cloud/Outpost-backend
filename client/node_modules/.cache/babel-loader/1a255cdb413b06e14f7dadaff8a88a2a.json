{"ast":null,"code":"\"use strict\";\n\nconst {\n  h\n} = require('preact');\n\nconst classNames = require('classnames');\n\nconst statusBarStates = require('./StatusBarStates');\n\nconst calculateProcessingProgress = require('./calculateProcessingProgress');\n\nconst {\n  UploadBtn,\n  RetryBtn,\n  CancelBtn,\n  PauseResumeButton,\n  DoneBtn,\n  ProgressBarProcessing,\n  ProgressBarError,\n  ProgressBarUploading,\n  ProgressBarComplete\n} = require('./Components');\n\nconst {\n  STATE_ERROR,\n  STATE_WAITING,\n  STATE_PREPROCESSING,\n  STATE_UPLOADING,\n  STATE_POSTPROCESSING,\n  STATE_COMPLETE\n} = statusBarStates;\nmodule.exports = StatusBar;\n\nfunction StatusBar(props) {\n  const {\n    newFiles,\n    allowNewUpload,\n    isUploadInProgress,\n    isAllPaused,\n    resumableUploads,\n    error,\n    hideUploadButton,\n    hidePauseResumeButton,\n    hideCancelButton,\n    hideRetryButton,\n    recoveredState,\n    uploadState,\n    totalProgress,\n    files,\n    supportsUploadProgress,\n    hideAfterFinish,\n    isSomeGhost,\n    isTargetDOMEl,\n    doneButtonHandler,\n    isUploadStarted,\n    i18n,\n    startUpload,\n    uppy,\n    isAllComplete,\n    showProgressDetails,\n    numUploads,\n    complete,\n    totalSize,\n    totalETA,\n    totalUploadedSize\n  } = props;\n\n  function getProgressValue() {\n    switch (uploadState) {\n      case STATE_POSTPROCESSING:\n      case STATE_PREPROCESSING:\n        {\n          const progress = calculateProcessingProgress(files);\n\n          if (progress.mode === 'determinate') {\n            return progress.value * 100;\n          }\n\n          return totalProgress;\n        }\n\n      case STATE_ERROR:\n        {\n          return null;\n        }\n\n      case STATE_UPLOADING:\n        {\n          if (!supportsUploadProgress) {\n            return null;\n          }\n\n          return totalProgress;\n        }\n\n      default:\n        return totalProgress;\n    }\n  }\n\n  function getIsIndeterminate() {\n    switch (uploadState) {\n      case STATE_POSTPROCESSING:\n      case STATE_PREPROCESSING:\n        {\n          const {\n            mode\n          } = calculateProcessingProgress(files);\n          return mode === 'indeterminate';\n        }\n\n      case STATE_UPLOADING:\n        {\n          if (!supportsUploadProgress) {\n            return true;\n          }\n\n          return false;\n        }\n\n      default:\n        return false;\n    }\n  }\n\n  function getIsHidden() {\n    if (recoveredState) {\n      return false;\n    }\n\n    switch (uploadState) {\n      case STATE_WAITING:\n        return hideUploadButton || newFiles === 0;\n\n      case STATE_COMPLETE:\n        return hideAfterFinish;\n\n      default:\n        return false;\n    }\n  }\n\n  const progressValue = getProgressValue();\n  const isHidden = getIsHidden();\n  const width = progressValue != null ? progressValue : 100;\n  const showUploadBtn = !error && newFiles && !isUploadInProgress && !isAllPaused && allowNewUpload && !hideUploadButton;\n  const showCancelBtn = !hideCancelButton && uploadState !== STATE_WAITING && uploadState !== STATE_COMPLETE;\n  const showPauseResumeBtn = resumableUploads && !hidePauseResumeButton && uploadState === STATE_UPLOADING;\n  const showRetryBtn = error && !hideRetryButton;\n  const showDoneBtn = doneButtonHandler && uploadState === STATE_COMPLETE;\n  const progressClassNames = classNames('uppy-StatusBar-progress', {\n    'is-indeterminate': getIsIndeterminate()\n  });\n  const statusBarClassNames = classNames({\n    'uppy-Root': isTargetDOMEl\n  }, 'uppy-StatusBar', `is-${uploadState}`, {\n    'has-ghosts': isSomeGhost\n  });\n  return h(\"div\", {\n    className: statusBarClassNames,\n    \"aria-hidden\": isHidden\n  }, h(\"div\", {\n    className: progressClassNames,\n    style: {\n      width: `${width}%`\n    },\n    role: \"progressbar\",\n    \"aria-label\": `${width}%`,\n    \"aria-valuetext\": `${width}%`,\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressValue\n  }), (() => {\n    switch (uploadState) {\n      case STATE_PREPROCESSING:\n      case STATE_POSTPROCESSING:\n        return h(ProgressBarProcessing, {\n          progress: calculateProcessingProgress(files)\n        });\n\n      case STATE_COMPLETE:\n        return h(ProgressBarComplete, {\n          i18n: i18n\n        });\n\n      case STATE_ERROR:\n        return h(ProgressBarError, {\n          error: error,\n          i18n: i18n\n        });\n\n      case STATE_UPLOADING:\n        return h(ProgressBarUploading, {\n          i18n: i18n,\n          supportsUploadProgress: supportsUploadProgress,\n          totalProgress: totalProgress,\n          showProgressDetails: showProgressDetails,\n          isUploadStarted: isUploadStarted,\n          isAllComplete: isAllComplete,\n          isAllPaused: isAllPaused,\n          newFiles: newFiles,\n          numUploads: numUploads,\n          complete: complete,\n          totalUploadedSize: totalUploadedSize,\n          totalSize: totalSize,\n          totalETA: totalETA,\n          startUpload: startUpload\n        });\n\n      default:\n        return null;\n    }\n  })(), h(\"div\", {\n    className: \"uppy-StatusBar-actions\"\n  }, recoveredState || showUploadBtn ? h(UploadBtn, {\n    newFiles: newFiles,\n    isUploadStarted: isUploadStarted,\n    recoveredState: recoveredState,\n    i18n: i18n,\n    isSomeGhost: isSomeGhost,\n    startUpload: startUpload,\n    uploadState: uploadState\n  }) : null, showRetryBtn ? h(RetryBtn, {\n    i18n: i18n,\n    uppy: uppy\n  }) : null, showPauseResumeBtn ? h(PauseResumeButton, {\n    isAllPaused: isAllPaused,\n    i18n: i18n,\n    isAllComplete: isAllComplete,\n    resumableUploads: resumableUploads,\n    uppy: uppy\n  }) : null, showCancelBtn ? h(CancelBtn, {\n    i18n: i18n,\n    uppy: uppy\n  }) : null, showDoneBtn ? h(DoneBtn, {\n    i18n: i18n,\n    doneButtonHandler: doneButtonHandler\n  }) : null));\n}","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/status-bar/lib/StatusBar.js"],"names":["h","require","classNames","statusBarStates","calculateProcessingProgress","UploadBtn","RetryBtn","CancelBtn","PauseResumeButton","DoneBtn","ProgressBarProcessing","ProgressBarError","ProgressBarUploading","ProgressBarComplete","STATE_ERROR","STATE_WAITING","STATE_PREPROCESSING","STATE_UPLOADING","STATE_POSTPROCESSING","STATE_COMPLETE","module","exports","StatusBar","props","newFiles","allowNewUpload","isUploadInProgress","isAllPaused","resumableUploads","error","hideUploadButton","hidePauseResumeButton","hideCancelButton","hideRetryButton","recoveredState","uploadState","totalProgress","files","supportsUploadProgress","hideAfterFinish","isSomeGhost","isTargetDOMEl","doneButtonHandler","isUploadStarted","i18n","startUpload","uppy","isAllComplete","showProgressDetails","numUploads","complete","totalSize","totalETA","totalUploadedSize","getProgressValue","progress","mode","value","getIsIndeterminate","getIsHidden","progressValue","isHidden","width","showUploadBtn","showCancelBtn","showPauseResumeBtn","showRetryBtn","showDoneBtn","progressClassNames","statusBarClassNames","className","style","role"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst {\n  h\n} = require('preact');\n\nconst classNames = require('classnames');\n\nconst statusBarStates = require('./StatusBarStates');\n\nconst calculateProcessingProgress = require('./calculateProcessingProgress');\n\nconst {\n  UploadBtn,\n  RetryBtn,\n  CancelBtn,\n  PauseResumeButton,\n  DoneBtn,\n  ProgressBarProcessing,\n  ProgressBarError,\n  ProgressBarUploading,\n  ProgressBarComplete\n} = require('./Components');\n\nconst {\n  STATE_ERROR,\n  STATE_WAITING,\n  STATE_PREPROCESSING,\n  STATE_UPLOADING,\n  STATE_POSTPROCESSING,\n  STATE_COMPLETE\n} = statusBarStates;\nmodule.exports = StatusBar;\n\nfunction StatusBar(props) {\n  const {\n    newFiles,\n    allowNewUpload,\n    isUploadInProgress,\n    isAllPaused,\n    resumableUploads,\n    error,\n    hideUploadButton,\n    hidePauseResumeButton,\n    hideCancelButton,\n    hideRetryButton,\n    recoveredState,\n    uploadState,\n    totalProgress,\n    files,\n    supportsUploadProgress,\n    hideAfterFinish,\n    isSomeGhost,\n    isTargetDOMEl,\n    doneButtonHandler,\n    isUploadStarted,\n    i18n,\n    startUpload,\n    uppy,\n    isAllComplete,\n    showProgressDetails,\n    numUploads,\n    complete,\n    totalSize,\n    totalETA,\n    totalUploadedSize\n  } = props;\n\n  function getProgressValue() {\n    switch (uploadState) {\n      case STATE_POSTPROCESSING:\n      case STATE_PREPROCESSING:\n        {\n          const progress = calculateProcessingProgress(files);\n\n          if (progress.mode === 'determinate') {\n            return progress.value * 100;\n          }\n\n          return totalProgress;\n        }\n\n      case STATE_ERROR:\n        {\n          return null;\n        }\n\n      case STATE_UPLOADING:\n        {\n          if (!supportsUploadProgress) {\n            return null;\n          }\n\n          return totalProgress;\n        }\n\n      default:\n        return totalProgress;\n    }\n  }\n\n  function getIsIndeterminate() {\n    switch (uploadState) {\n      case STATE_POSTPROCESSING:\n      case STATE_PREPROCESSING:\n        {\n          const {\n            mode\n          } = calculateProcessingProgress(files);\n          return mode === 'indeterminate';\n        }\n\n      case STATE_UPLOADING:\n        {\n          if (!supportsUploadProgress) {\n            return true;\n          }\n\n          return false;\n        }\n\n      default:\n        return false;\n    }\n  }\n\n  function getIsHidden() {\n    if (recoveredState) {\n      return false;\n    }\n\n    switch (uploadState) {\n      case STATE_WAITING:\n        return hideUploadButton || newFiles === 0;\n\n      case STATE_COMPLETE:\n        return hideAfterFinish;\n\n      default:\n        return false;\n    }\n  }\n\n  const progressValue = getProgressValue();\n  const isHidden = getIsHidden();\n  const width = progressValue != null ? progressValue : 100;\n  const showUploadBtn = !error && newFiles && !isUploadInProgress && !isAllPaused && allowNewUpload && !hideUploadButton;\n  const showCancelBtn = !hideCancelButton && uploadState !== STATE_WAITING && uploadState !== STATE_COMPLETE;\n  const showPauseResumeBtn = resumableUploads && !hidePauseResumeButton && uploadState === STATE_UPLOADING;\n  const showRetryBtn = error && !hideRetryButton;\n  const showDoneBtn = doneButtonHandler && uploadState === STATE_COMPLETE;\n  const progressClassNames = classNames('uppy-StatusBar-progress', {\n    'is-indeterminate': getIsIndeterminate()\n  });\n  const statusBarClassNames = classNames({\n    'uppy-Root': isTargetDOMEl\n  }, 'uppy-StatusBar', `is-${uploadState}`, {\n    'has-ghosts': isSomeGhost\n  });\n  return h(\"div\", {\n    className: statusBarClassNames,\n    \"aria-hidden\": isHidden\n  }, h(\"div\", {\n    className: progressClassNames,\n    style: {\n      width: `${width}%`\n    },\n    role: \"progressbar\",\n    \"aria-label\": `${width}%`,\n    \"aria-valuetext\": `${width}%`,\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressValue\n  }), (() => {\n    switch (uploadState) {\n      case STATE_PREPROCESSING:\n      case STATE_POSTPROCESSING:\n        return h(ProgressBarProcessing, {\n          progress: calculateProcessingProgress(files)\n        });\n\n      case STATE_COMPLETE:\n        return h(ProgressBarComplete, {\n          i18n: i18n\n        });\n\n      case STATE_ERROR:\n        return h(ProgressBarError, {\n          error: error,\n          i18n: i18n\n        });\n\n      case STATE_UPLOADING:\n        return h(ProgressBarUploading, {\n          i18n: i18n,\n          supportsUploadProgress: supportsUploadProgress,\n          totalProgress: totalProgress,\n          showProgressDetails: showProgressDetails,\n          isUploadStarted: isUploadStarted,\n          isAllComplete: isAllComplete,\n          isAllPaused: isAllPaused,\n          newFiles: newFiles,\n          numUploads: numUploads,\n          complete: complete,\n          totalUploadedSize: totalUploadedSize,\n          totalSize: totalSize,\n          totalETA: totalETA,\n          startUpload: startUpload\n        });\n\n      default:\n        return null;\n    }\n  })(), h(\"div\", {\n    className: \"uppy-StatusBar-actions\"\n  }, recoveredState || showUploadBtn ? h(UploadBtn, {\n    newFiles: newFiles,\n    isUploadStarted: isUploadStarted,\n    recoveredState: recoveredState,\n    i18n: i18n,\n    isSomeGhost: isSomeGhost,\n    startUpload: startUpload,\n    uploadState: uploadState\n  }) : null, showRetryBtn ? h(RetryBtn, {\n    i18n: i18n,\n    uppy: uppy\n  }) : null, showPauseResumeBtn ? h(PauseResumeButton, {\n    isAllPaused: isAllPaused,\n    i18n: i18n,\n    isAllComplete: isAllComplete,\n    resumableUploads: resumableUploads,\n    uppy: uppy\n  }) : null, showCancelBtn ? h(CancelBtn, {\n    i18n: i18n,\n    uppy: uppy\n  }) : null, showDoneBtn ? h(DoneBtn, {\n    i18n: i18n,\n    doneButtonHandler: doneButtonHandler\n  }) : null));\n}"]},"metadata":{},"sourceType":"script"}