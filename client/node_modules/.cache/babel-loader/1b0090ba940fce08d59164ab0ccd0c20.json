{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _objectWithoutProperties = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _classCallCheck = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _excluded = [\"data\", \"rowHeight\", \"renderRow\", \"overscanCount\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\n * Adapted from preact-virtual-list: https://github.com/developit/preact-virtual-list\n *\n * Â© 2016 Jason Miller\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * Adaptations:\n * - Added role=presentation to helper elements\n * - Tweaked styles for Uppy's Dashboard use case\n */\n\n\nvar _require = require('preact'),\n    h = _require.h,\n    Component = _require.Component;\n\nvar STYLE_INNER = {\n  position: 'relative',\n  // Disabled for our use case: the wrapper elements around FileList already deal with overflow,\n  // and this additional property would hide things that we want to show.\n  //\n  // overflow: 'hidden',\n  width: '100%',\n  minHeight: '100%'\n};\nvar STYLE_CONTENT = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  // Because the `top` value gets set to some offset, this `height` being 100% would make the scrollbar\n  // stretch far beyond the content. For our use case, the content div actually can get its height from\n  // the elements inside it, so we don't need to specify a `height` property at all.\n  //\n  // height: '100%',\n  width: '100%',\n  overflow: 'visible'\n};\n\nvar VirtualList = /*#__PURE__*/function (_Component) {\n  _inherits(VirtualList, _Component);\n\n  var _super = _createSuper(VirtualList);\n\n  function VirtualList(props) {\n    var _this;\n\n    _classCallCheck(this, VirtualList);\n\n    _this = _super.call(this, props); // The currently focused node, used to retain focus when the visible rows change.\n    // To avoid update loops, this should not cause state updates, so it's kept as a plain property.\n\n    _this.handleScroll = function () {\n      _this.setState({\n        offset: _this.base.scrollTop\n      });\n    };\n\n    _this.handleResize = function () {\n      _this.resize();\n    };\n\n    _this.focusElement = null;\n    _this.state = {\n      offset: 0,\n      height: 0\n    };\n    return _this;\n  }\n\n  _createClass(VirtualList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.resize();\n      window.addEventListener('resize', this.handleResize);\n    } // TODO: refactor to stable lifecycle method\n    // eslint-disable-next-line\n\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      if (this.base.contains(document.activeElement)) {\n        this.focusElement = document.activeElement;\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // Maintain focus when rows are added and removed.\n      if (this.focusElement && this.focusElement.parentNode && document.activeElement !== this.focusElement) {\n        this.focusElement.focus();\n      }\n\n      this.focusElement = null;\n      this.resize();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var height = this.state.height;\n\n      if (height !== this.base.offsetHeight) {\n        this.setState({\n          height: this.base.offsetHeight\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(_ref) {\n      var data = _ref.data,\n          rowHeight = _ref.rowHeight,\n          renderRow = _ref.renderRow,\n          _ref$overscanCount = _ref.overscanCount,\n          overscanCount = _ref$overscanCount === void 0 ? 10 : _ref$overscanCount,\n          props = _objectWithoutProperties(_ref, _excluded);\n\n      var _this$state = this.state,\n          offset = _this$state.offset,\n          height = _this$state.height; // first visible row index\n\n      var start = Math.floor(offset / rowHeight); // actual number of visible rows (without overscan)\n\n      var visibleRowCount = Math.floor(height / rowHeight); // Overscan: render blocks of rows modulo an overscan row count\n      // This dramatically reduces DOM writes during scrolling\n\n      if (overscanCount) {\n        start = Math.max(0, start - start % overscanCount);\n        visibleRowCount += overscanCount;\n      } // last visible + overscan row index + padding to allow keyboard focus to travel past the visible area\n\n\n      var end = start + visibleRowCount + 4; // data slice currently in viewport plus overscan items\n\n      var selection = data.slice(start, end);\n\n      var styleInner = _objectSpread(_objectSpread({}, STYLE_INNER), {}, {\n        height: data.length * rowHeight\n      });\n\n      var styleContent = _objectSpread(_objectSpread({}, STYLE_CONTENT), {}, {\n        top: start * rowHeight\n      }); // The `role=\"presentation\"` attributes ensure that these wrapper elements are not treated as list\n      // items by accessibility and outline tools.\n\n\n      return h(\"div\", _extends({\n        onScroll: this.handleScroll\n      }, props), h(\"div\", {\n        role: \"presentation\",\n        style: styleInner\n      }, h(\"div\", {\n        role: \"presentation\",\n        style: styleContent\n      }, selection.map(renderRow))));\n    }\n  }]);\n\n  return VirtualList;\n}(Component);\n\nmodule.exports = VirtualList;","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/dashboard/lib/components/VirtualList.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","require","h","Component","STYLE_INNER","position","width","minHeight","STYLE_CONTENT","top","left","overflow","VirtualList","props","handleScroll","setState","offset","base","scrollTop","handleResize","resize","focusElement","state","height","window","addEventListener","contains","document","activeElement","parentNode","focus","removeEventListener","offsetHeight","data","rowHeight","renderRow","overscanCount","start","Math","floor","visibleRowCount","max","end","selection","slice","styleInner","styleContent","onScroll","role","style","map","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * Adapted from preact-virtual-list: https://github.com/developit/preact-virtual-list\n *\n * Â© 2016 Jason Miller\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * Adaptations:\n * - Added role=presentation to helper elements\n * - Tweaked styles for Uppy's Dashboard use case\n */\nconst {\n  h,\n  Component\n} = require('preact');\n\nconst STYLE_INNER = {\n  position: 'relative',\n  // Disabled for our use case: the wrapper elements around FileList already deal with overflow,\n  // and this additional property would hide things that we want to show.\n  //\n  // overflow: 'hidden',\n  width: '100%',\n  minHeight: '100%'\n};\nconst STYLE_CONTENT = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  // Because the `top` value gets set to some offset, this `height` being 100% would make the scrollbar\n  // stretch far beyond the content. For our use case, the content div actually can get its height from\n  // the elements inside it, so we don't need to specify a `height` property at all.\n  //\n  // height: '100%',\n  width: '100%',\n  overflow: 'visible'\n};\n\nclass VirtualList extends Component {\n  constructor(props) {\n    super(props); // The currently focused node, used to retain focus when the visible rows change.\n    // To avoid update loops, this should not cause state updates, so it's kept as a plain property.\n\n    this.handleScroll = () => {\n      this.setState({\n        offset: this.base.scrollTop\n      });\n    };\n\n    this.handleResize = () => {\n      this.resize();\n    };\n\n    this.focusElement = null;\n    this.state = {\n      offset: 0,\n      height: 0\n    };\n  }\n\n  componentDidMount() {\n    this.resize();\n    window.addEventListener('resize', this.handleResize);\n  } // TODO: refactor to stable lifecycle method\n  // eslint-disable-next-line\n\n\n  componentWillUpdate() {\n    if (this.base.contains(document.activeElement)) {\n      this.focusElement = document.activeElement;\n    }\n  }\n\n  componentDidUpdate() {\n    // Maintain focus when rows are added and removed.\n    if (this.focusElement && this.focusElement.parentNode && document.activeElement !== this.focusElement) {\n      this.focusElement.focus();\n    }\n\n    this.focusElement = null;\n    this.resize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  resize() {\n    const {\n      height\n    } = this.state;\n\n    if (height !== this.base.offsetHeight) {\n      this.setState({\n        height: this.base.offsetHeight\n      });\n    }\n  }\n\n  render({\n    data,\n    rowHeight,\n    renderRow,\n    overscanCount = 10,\n    ...props\n  }) {\n    const {\n      offset,\n      height\n    } = this.state; // first visible row index\n\n    let start = Math.floor(offset / rowHeight); // actual number of visible rows (without overscan)\n\n    let visibleRowCount = Math.floor(height / rowHeight); // Overscan: render blocks of rows modulo an overscan row count\n    // This dramatically reduces DOM writes during scrolling\n\n    if (overscanCount) {\n      start = Math.max(0, start - start % overscanCount);\n      visibleRowCount += overscanCount;\n    } // last visible + overscan row index + padding to allow keyboard focus to travel past the visible area\n\n\n    const end = start + visibleRowCount + 4; // data slice currently in viewport plus overscan items\n\n    const selection = data.slice(start, end);\n    const styleInner = { ...STYLE_INNER,\n      height: data.length * rowHeight\n    };\n    const styleContent = { ...STYLE_CONTENT,\n      top: start * rowHeight\n    }; // The `role=\"presentation\"` attributes ensure that these wrapper elements are not treated as list\n    // items by accessibility and outline tools.\n\n    return h(\"div\", _extends({\n      onScroll: this.handleScroll\n    }, props), h(\"div\", {\n      role: \"presentation\",\n      style: styleInner\n    }, h(\"div\", {\n      role: \"presentation\",\n      style: styleContent\n    }, selection.map(renderRow))));\n  }\n\n}\n\nmodule.exports = VirtualList;"]},"metadata":{},"sourceType":"script"}