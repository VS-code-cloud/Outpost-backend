{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _apply;\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n\n  return receiver;\n}\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\n\nvar has = require('./hasProperty');\n\nfunction insertReplacement(source, rx, replacement) {\n  var newParts = [];\n  source.forEach(function (chunk) {\n    // When the source contains multiple placeholders for interpolation,\n    // we should ignore chunks that are not strings, because those\n    // can be JSX objects and will be otherwise incorrectly turned into strings.\n    // Without this condition weâ€™d get this: [object Object] hello [object Object] my <button>\n    if (typeof chunk !== 'string') {\n      return newParts.push(chunk);\n    }\n\n    return rx[Symbol.split](chunk).forEach(function (raw, i, list) {\n      if (raw !== '') {\n        newParts.push(raw);\n      } // Interlace with the `replacement` value\n\n\n      if (i < list.length - 1) {\n        newParts.push(replacement);\n      }\n    });\n  });\n  return newParts;\n}\n/**\n * Takes a string with placeholder variables like `%{smart_count} file selected`\n * and replaces it with values from options `{smart_count: 5}`\n *\n * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n *\n * @param {string} phrase that needs interpolation, with placeholders\n * @param {object} options with values that will be used to replace placeholders\n * @returns {any[]} interpolated\n */\n\n\nfunction interpolate(phrase, options) {\n  var dollarRegex = /\\$/g;\n  var dollarBillsYall = '$$$$';\n  var interpolated = [phrase];\n  if (options == null) return interpolated;\n\n  for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n    var arg = _Object$keys[_i];\n\n    if (arg !== '_') {\n      // Ensure replacement value is escaped to prevent special $-prefixed\n      // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n      // be escaped with \"$\" itself, and we need two in the resulting output.\n      var replacement = options[arg];\n\n      if (typeof replacement === 'string') {\n        replacement = dollarRegex[Symbol.replace](replacement, dollarBillsYall);\n      } // We create a new `RegExp` each time instead of using a more-efficient\n      // string replace so that the same argument can be replaced multiple times\n      // in the same phrase.\n\n\n      interpolated = insertReplacement(interpolated, new RegExp(\"%\\\\{\".concat(arg, \"\\\\}\"), 'g'), replacement);\n    }\n  }\n\n  return interpolated;\n}\n/**\n * Translates strings with interpolation & pluralization support.\n * Extensible with custom dictionaries and pluralization functions.\n *\n * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n * and can be easily added among with dictionaries, nested objects are used for pluralization\n * as opposed to `||||` delimeter\n *\n * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n */\n\n\nmodule.exports = (_apply = /*#__PURE__*/_classPrivateFieldLooseKey(\"apply\"), /*#__PURE__*/function () {\n  /**\n   * @param {object|Array<object>} locales - locale or list of locales.\n   */\n  function Translator(locales) {\n    _classCallCheck(this, Translator);\n\n    Object.defineProperty(this, _apply, {\n      value: _apply2\n    });\n    this.locale = {\n      strings: {},\n      pluralize: function pluralize(n) {\n        if (n === 1) {\n          return 0;\n        }\n\n        return 1;\n      }\n    };\n\n    if (Array.isArray(locales)) {\n      locales.forEach(_classPrivateFieldLooseBase(this, _apply)[_apply], this);\n    } else {\n      _classPrivateFieldLooseBase(this, _apply)[_apply](locales);\n    }\n  }\n  /**\n   * Public translate method\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used later to replace placeholders in string\n   * @returns {string} translated (and interpolated)\n   */\n\n\n  _createClass(Translator, [{\n    key: \"translate\",\n    value: function translate(key, options) {\n      return this.translateArray(key, options).join('');\n    }\n    /**\n     * Get a translation and return the translated and interpolated parts as an array.\n     *\n     * @param {string} key\n     * @param {object} options with values that will be used to replace placeholders\n     * @returns {Array} The translated and interpolated parts, in order.\n     */\n\n  }, {\n    key: \"translateArray\",\n    value: function translateArray(key, options) {\n      if (!has(this.locale.strings, key)) {\n        throw new Error(\"missing string: \".concat(key));\n      }\n\n      var string = this.locale.strings[key];\n      var hasPluralForms = typeof string === 'object';\n\n      if (hasPluralForms) {\n        if (options && typeof options.smart_count !== 'undefined') {\n          var plural = this.locale.pluralize(options.smart_count);\n          return interpolate(string[plural], options);\n        }\n\n        throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}');\n      }\n\n      return interpolate(string, options);\n    }\n  }]);\n\n  return Translator;\n}());\n\nfunction _apply2(locale) {\n  if (!(locale != null && locale.strings)) {\n    return;\n  }\n\n  var prevLocale = this.locale;\n  this.locale = _objectSpread(_objectSpread({}, prevLocale), {}, {\n    strings: _objectSpread(_objectSpread({}, prevLocale.strings), locale.strings)\n  });\n  this.locale.pluralize = locale.pluralize || prevLocale.pluralize;\n}","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/utils/lib/Translator.js"],"names":["_apply","_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","has","require","insertReplacement","source","rx","replacement","newParts","forEach","chunk","push","Symbol","split","raw","i","list","length","interpolate","phrase","options","dollarRegex","dollarBillsYall","interpolated","keys","arg","replace","RegExp","module","exports","locales","defineProperty","value","_apply2","locale","strings","pluralize","n","Array","isArray","key","translateArray","join","Error","string","hasPluralForms","smart_count","plural","prevLocale"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _apply;\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\n\nconst has = require('./hasProperty');\n\nfunction insertReplacement(source, rx, replacement) {\n  const newParts = [];\n  source.forEach(chunk => {\n    // When the source contains multiple placeholders for interpolation,\n    // we should ignore chunks that are not strings, because those\n    // can be JSX objects and will be otherwise incorrectly turned into strings.\n    // Without this condition weâ€™d get this: [object Object] hello [object Object] my <button>\n    if (typeof chunk !== 'string') {\n      return newParts.push(chunk);\n    }\n\n    return rx[Symbol.split](chunk).forEach((raw, i, list) => {\n      if (raw !== '') {\n        newParts.push(raw);\n      } // Interlace with the `replacement` value\n\n\n      if (i < list.length - 1) {\n        newParts.push(replacement);\n      }\n    });\n  });\n  return newParts;\n}\n/**\n * Takes a string with placeholder variables like `%{smart_count} file selected`\n * and replaces it with values from options `{smart_count: 5}`\n *\n * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n *\n * @param {string} phrase that needs interpolation, with placeholders\n * @param {object} options with values that will be used to replace placeholders\n * @returns {any[]} interpolated\n */\n\n\nfunction interpolate(phrase, options) {\n  const dollarRegex = /\\$/g;\n  const dollarBillsYall = '$$$$';\n  let interpolated = [phrase];\n  if (options == null) return interpolated;\n\n  for (const arg of Object.keys(options)) {\n    if (arg !== '_') {\n      // Ensure replacement value is escaped to prevent special $-prefixed\n      // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n      // be escaped with \"$\" itself, and we need two in the resulting output.\n      let replacement = options[arg];\n\n      if (typeof replacement === 'string') {\n        replacement = dollarRegex[Symbol.replace](replacement, dollarBillsYall);\n      } // We create a new `RegExp` each time instead of using a more-efficient\n      // string replace so that the same argument can be replaced multiple times\n      // in the same phrase.\n\n\n      interpolated = insertReplacement(interpolated, new RegExp(`%\\\\{${arg}\\\\}`, 'g'), replacement);\n    }\n  }\n\n  return interpolated;\n}\n/**\n * Translates strings with interpolation & pluralization support.\n * Extensible with custom dictionaries and pluralization functions.\n *\n * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n * and can be easily added among with dictionaries, nested objects are used for pluralization\n * as opposed to `||||` delimeter\n *\n * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n */\n\n\nmodule.exports = (_apply = /*#__PURE__*/_classPrivateFieldLooseKey(\"apply\"), class Translator {\n  /**\n   * @param {object|Array<object>} locales - locale or list of locales.\n   */\n  constructor(locales) {\n    Object.defineProperty(this, _apply, {\n      value: _apply2\n    });\n    this.locale = {\n      strings: {},\n\n      pluralize(n) {\n        if (n === 1) {\n          return 0;\n        }\n\n        return 1;\n      }\n\n    };\n\n    if (Array.isArray(locales)) {\n      locales.forEach(_classPrivateFieldLooseBase(this, _apply)[_apply], this);\n    } else {\n      _classPrivateFieldLooseBase(this, _apply)[_apply](locales);\n    }\n  }\n\n  /**\n   * Public translate method\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used later to replace placeholders in string\n   * @returns {string} translated (and interpolated)\n   */\n  translate(key, options) {\n    return this.translateArray(key, options).join('');\n  }\n  /**\n   * Get a translation and return the translated and interpolated parts as an array.\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used to replace placeholders\n   * @returns {Array} The translated and interpolated parts, in order.\n   */\n\n\n  translateArray(key, options) {\n    if (!has(this.locale.strings, key)) {\n      throw new Error(`missing string: ${key}`);\n    }\n\n    const string = this.locale.strings[key];\n    const hasPluralForms = typeof string === 'object';\n\n    if (hasPluralForms) {\n      if (options && typeof options.smart_count !== 'undefined') {\n        const plural = this.locale.pluralize(options.smart_count);\n        return interpolate(string[plural], options);\n      }\n\n      throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}');\n    }\n\n    return interpolate(string, options);\n  }\n\n});\n\nfunction _apply2(locale) {\n  if (!(locale != null && locale.strings)) {\n    return;\n  }\n\n  const prevLocale = this.locale;\n  this.locale = { ...prevLocale,\n    strings: { ...prevLocale.strings,\n      ...locale.strings\n    }\n  };\n  this.locale.pluralize = locale.pluralize || prevLocale.pluralize;\n}"]},"metadata":{},"sourceType":"script"}