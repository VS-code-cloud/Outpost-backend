{"ast":null,"code":"var _jsxFileName = \"/Users/albertshay/Desktop/silkroad/client/src/components/PostDetails/PostDetails.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useEffect } from 'react';\n// import {\n//   Paper,\n//   Typography,\n//   CircularProgress,\n//   Divider,\n// } from '@material-ui/core/';\n// import { useDispatch, useSelector } from 'react-redux';\n// import moment from 'moment';\n// import { useParams, useHistory } from 'react-router-dom';\n// import CommentSection from './CommentSection';\n// import { getPost, getPostsBySearch } from '../../actions/posts';\n// import useStyles from './styles';\n// const Post = () => {\n//   const { post, posts, isLoading } = useSelector((state) => state.posts);\n//   const dispatch = useDispatch();\n//   const history = useHistory();\n//   const classes = useStyles();\n//   const { id } = useParams();\n//   // const recommendedPosts = posts.filter(({ _id }) => _id !== post._id);\n//   useEffect(() => {\n//     dispatch(getPost(id));\n//   }, [id]);\n//   useEffect(() => {\n//     if (post) {\n//       dispatch(\n//         getPostsBySearch({ search: 'none', tags: post?.tags.join(',') })\n//       );\n//     }\n//   }, [post]);\n//   if (!post) return null;\n//   const openPost = (_id) => history.push(`/posts/${_id}`);\n//   if (isLoading) {\n//     return (\n//       <Paper elevation={6} className={classes.loadingPaper}>\n//         <CircularProgress size='7em' />\n//       </Paper>\n//     );\n//   }\n//   const recommendedPosts = posts.filter(({ _id }) => _id !== post._id);\n//   return (\n//     <Paper style={{ padding: '20px', borderRadius: '15px' }} elevation={6}>\n//       <div className={classes.card}>\n//         <div className={classes.section}>\n//           <Typography variant='h3' component='h2'>\n//             {post.title}\n//           </Typography>\n//           <Typography\n//             gutterBottom\n//             variant='h6'\n//             color='textSecondary'\n//             component='h2'\n//           >\n//             {post.tags.map((tag) => `#${tag} `)}\n//           </Typography>\n//           <Typography gutterBottom variant='body1' component='p'>\n//             {post.message}\n//           </Typography>\n//           <Typography variant='h6'>Created by: {post.name}</Typography>\n//           <Typography variant='body1'>\n//             {moment(post.createdAt).fromNow()}\n//           </Typography>\n//           <Divider style={{ margin: '20px 0' }} />\n//           <CommentSection post={post} />\n//           <Divider style={{ margin: '20px 0' }} />\n//         </div>\n//         <div className={classes.imageSection}>\n//           <img\n//             className={classes.media}\n//             src={\n//               post.selectedFile ||\n//               'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png'\n//             }\n//             alt={post.title}\n//           />\n//         </div>\n//       </div>\n//       {!!recommendedPosts.length && (\n//         <div className={classes.section}>\n//           <Typography gutterBottom variant='h5'>\n//             You might also like:\n//           </Typography>\n//           <Divider />\n//           <div className={classes.recommendedPosts}>\n//             {recommendedPosts.map(\n//               ({ title, name, message, likes, selectedFile, _id }) => (\n//                 <div\n//                   style={{ margin: '20px', cursor: 'pointer' }}\n//                   onClick={() => openPost(_id)}\n//                   key={_id}\n//                 >\n//                   <Typography gutterBottom variant='h6'>\n//                     {title}\n//                   </Typography>\n//                   <Typography gutterBottom variant='subtitle2'>\n//                     {name}\n//                   </Typography>\n//                   <Typography gutterBottom variant='subtitle2'>\n//                     {message}\n//                   </Typography>\n//                   <Typography gutterBottom variant='subtitle1'>\n//                     Likes: {likes.length}\n//                   </Typography>\n//                   <img src={selectedFile} width='200px' alt='placeholder' />\n//                 </div>\n//               )\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </Paper>\n//   );\n// };\n// export default Post;\nimport React, { useEffect } from 'react';\nimport { Paper, Typography, CircularProgress, Divider, Button } from '@material-ui/core/';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { useParams, useHistory } from 'react-router-dom';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport { getPost, getPostsBySearch } from '../../actions/posts';\nimport CommentSection from './CommentSection';\nimport useStyles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Post = () => {\n  _s();\n\n  var _post$tags2;\n\n  const {\n    post,\n    posts,\n    isLoading\n  } = useSelector(state => state.posts);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const classes = useStyles();\n  const {\n    id\n  } = useParams();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  useEffect(() => {\n    dispatch(getPost(id));\n  }, [id]);\n  useEffect(() => {\n    if (post) {\n      var _post$tags;\n\n      dispatch(getPostsBySearch({\n        search: 'none',\n        tags: post === null || post === void 0 ? void 0 : (_post$tags = post.tags) === null || _post$tags === void 0 ? void 0 : _post$tags.join(',')\n      }));\n    }\n  }, [post]);\n  if (!post) return null;\n\n  const openPost = _id => history.push(`/posts/${_id}`);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 6,\n      className: classes.loadingPaper,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: \"7em\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this);\n  }\n\n  const recommendedPosts = posts.filter(({\n    _id\n  }) => _id !== post._id);\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    style: {\n      padding: '20px',\n      borderRadius: '15px'\n    },\n    elevation: 6,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.card,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.section,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"h5\",\n          className: classes.nameLabel,\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h7\",\n          className: classes.price // color='textSecondary'\n          ,\n          component: \"h3\",\n          fontFamily: \"Montserrat\",\n          children: post === null || post === void 0 ? void 0 : (_post$tags2 = post.tags) === null || _post$tags2 === void 0 ? void 0 : _post$tags2.map(tag => `$${tag} `)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          className: classes.timeCreated,\n          children: moment(post.createdAt).fromNow()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imageSection,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.media,\n            src: post.selectedFile || 'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png',\n            alt: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          style: {\n            margin: '10px 0'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"body1\",\n          component: \"p\",\n          className: classes.postDetails,\n          children: post.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"body1\",\n          component: \"p\",\n          className: classes.postDetails,\n          children: post.location\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.hostedBy,\n          children: [\"Hosted by: \", post.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          style: {\n            margin: '20px 0'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CommentSection, {\n          post: post,\n          className: classes.nameLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          style: {\n            margin: '20px 0'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), !!recommendedPosts.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.section,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.alsoLike,\n        gutterBottom: true,\n        variant: \"h5\",\n        className: classes.nameLabel,\n        children: \"You might also like:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.recommendedPosts,\n        children: recommendedPosts.map(({\n          title,\n          name,\n          message,\n          likes,\n          selectedFile,\n          _id\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: '20px',\n            cursor: 'pointer'\n          },\n          onClick: () => openPost(_id),\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            variant: \"h6\",\n            className: classes.alsoLike,\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            variant: \"subtitle2\",\n            className: classes.alsoLike,\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            variant: \"subtitle2\",\n            className: classes.alsoLike,\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.alsoLike,\n            gutterBottom: true,\n            variant: \"subtitle1\",\n            children: [/*#__PURE__*/_jsxDEV(FavoriteBorderIcon, {\n              className: classes.likeIcon,\n              alt: `: ${likes === null || likes === void 0 ? void 0 : likes.length}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 21\n            }, this), \"Likes: \", likes === null || likes === void 0 ? void 0 : likes.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedFile,\n            width: \"200px\",\n            alt: \"placeholder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 19\n          }, this)]\n        }, _id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Post, \"tI7gvGJS3PURxKF89lAkjzOuqto=\", false, function () {\n  return [useSelector, useDispatch, useHistory, useStyles, useParams];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/src/components/PostDetails/PostDetails.jsx"],"names":["React","useEffect","Paper","Typography","CircularProgress","Divider","Button","useDispatch","useSelector","moment","useParams","useHistory","FavoriteBorderIcon","getPost","getPostsBySearch","CommentSection","useStyles","Post","post","posts","isLoading","state","dispatch","history","classes","id","user","JSON","parse","localStorage","getItem","search","tags","join","openPost","_id","push","loadingPaper","recommendedPosts","filter","padding","borderRadius","card","section","nameLabel","title","price","map","tag","timeCreated","createdAt","fromNow","imageSection","media","selectedFile","margin","postDetails","message","location","hostedBy","name","length","alsoLike","likes","cursor","likeIcon"],"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","sourcesContent":["// import React, { useEffect } from 'react';\n// import {\n//   Paper,\n//   Typography,\n//   CircularProgress,\n//   Divider,\n// } from '@material-ui/core/';\n// import { useDispatch, useSelector } from 'react-redux';\n// import moment from 'moment';\n// import { useParams, useHistory } from 'react-router-dom';\n// import CommentSection from './CommentSection';\n// import { getPost, getPostsBySearch } from '../../actions/posts';\n// import useStyles from './styles';\n\n// const Post = () => {\n//   const { post, posts, isLoading } = useSelector((state) => state.posts);\n//   const dispatch = useDispatch();\n//   const history = useHistory();\n//   const classes = useStyles();\n//   const { id } = useParams();\n//   // const recommendedPosts = posts.filter(({ _id }) => _id !== post._id);\n//   useEffect(() => {\n//     dispatch(getPost(id));\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (post) {\n//       dispatch(\n//         getPostsBySearch({ search: 'none', tags: post?.tags.join(',') })\n//       );\n//     }\n//   }, [post]);\n\n//   if (!post) return null;\n\n//   const openPost = (_id) => history.push(`/posts/${_id}`);\n\n//   if (isLoading) {\n//     return (\n//       <Paper elevation={6} className={classes.loadingPaper}>\n//         <CircularProgress size='7em' />\n//       </Paper>\n//     );\n//   }\n//   const recommendedPosts = posts.filter(({ _id }) => _id !== post._id);\n//   return (\n//     <Paper style={{ padding: '20px', borderRadius: '15px' }} elevation={6}>\n//       <div className={classes.card}>\n//         <div className={classes.section}>\n//           <Typography variant='h3' component='h2'>\n//             {post.title}\n//           </Typography>\n//           <Typography\n//             gutterBottom\n//             variant='h6'\n//             color='textSecondary'\n//             component='h2'\n//           >\n//             {post.tags.map((tag) => `#${tag} `)}\n//           </Typography>\n//           <Typography gutterBottom variant='body1' component='p'>\n//             {post.message}\n//           </Typography>\n//           <Typography variant='h6'>Created by: {post.name}</Typography>\n//           <Typography variant='body1'>\n//             {moment(post.createdAt).fromNow()}\n//           </Typography>\n\n//           <Divider style={{ margin: '20px 0' }} />\n//           <CommentSection post={post} />\n//           <Divider style={{ margin: '20px 0' }} />\n//         </div>\n//         <div className={classes.imageSection}>\n//           <img\n//             className={classes.media}\n//             src={\n//               post.selectedFile ||\n//               'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png'\n//             }\n//             alt={post.title}\n//           />\n//         </div>\n//       </div>\n//       {!!recommendedPosts.length && (\n//         <div className={classes.section}>\n//           <Typography gutterBottom variant='h5'>\n//             You might also like:\n//           </Typography>\n//           <Divider />\n//           <div className={classes.recommendedPosts}>\n//             {recommendedPosts.map(\n//               ({ title, name, message, likes, selectedFile, _id }) => (\n//                 <div\n//                   style={{ margin: '20px', cursor: 'pointer' }}\n//                   onClick={() => openPost(_id)}\n//                   key={_id}\n//                 >\n//                   <Typography gutterBottom variant='h6'>\n//                     {title}\n//                   </Typography>\n//                   <Typography gutterBottom variant='subtitle2'>\n//                     {name}\n//                   </Typography>\n//                   <Typography gutterBottom variant='subtitle2'>\n//                     {message}\n//                   </Typography>\n//                   <Typography gutterBottom variant='subtitle1'>\n//                     Likes: {likes.length}\n//                   </Typography>\n//                   <img src={selectedFile} width='200px' alt='placeholder' />\n//                 </div>\n//               )\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </Paper>\n//   );\n// };\n\n// export default Post;\n\nimport React, { useEffect } from 'react';\nimport {\n  Paper,\n  Typography,\n  CircularProgress,\n  Divider,\n  Button,\n} from '@material-ui/core/';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { useParams, useHistory } from 'react-router-dom';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport { getPost, getPostsBySearch } from '../../actions/posts';\nimport CommentSection from './CommentSection';\nimport useStyles from './styles';\n\nconst Post = () => {\n  const { post, posts, isLoading } = useSelector((state) => state.posts);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const classes = useStyles();\n  const { id } = useParams();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  useEffect(() => {\n    dispatch(getPost(id));\n  }, [id]);\n\n  useEffect(() => {\n    if (post) {\n      dispatch(\n        getPostsBySearch({ search: 'none', tags: post?.tags?.join(',') })\n      );\n    }\n  }, [post]);\n\n  if (!post) return null;\n\n  const openPost = (_id) => history.push(`/posts/${_id}`);\n\n  if (isLoading) {\n    return (\n      <Paper elevation={6} className={classes.loadingPaper}>\n        <CircularProgress size='7em' />\n      </Paper>\n    );\n  }\n\n  const recommendedPosts = posts.filter(({ _id }) => _id !== post._id);\n\n  return (\n    <Paper style={{ padding: '20px', borderRadius: '15px' }} elevation={6}>\n      <div className={classes.card}>\n        <div className={classes.section}>\n          <Typography variant='h6' component='h5' className={classes.nameLabel}>\n            {post.title}\n          </Typography>\n          <Typography\n            gutterBottom\n            variant='h7'\n            className={classes.price}\n            // color='textSecondary'\n            component='h3'\n            fontFamily='Montserrat'\n          >\n            {post?.tags?.map((tag) => `$${tag} `)}\n          </Typography>\n\n          <Typography variant='body1' className={classes.timeCreated}>\n            {moment(post.createdAt).fromNow()}\n          </Typography>\n          <div className={classes.imageSection}>\n            <img\n              className={classes.media}\n              src={\n                post.selectedFile ||\n                'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png'\n              }\n              alt={post.title}\n            />\n          </div>\n          <Divider style={{ margin: '10px 0' }} />\n          <Typography\n            gutterBottom\n            variant='body1'\n            component='p'\n            className={classes.postDetails}\n          >\n            {post.message}\n          </Typography>\n          <Typography\n            gutterBottom\n            variant='body1'\n            component='p'\n            className={classes.postDetails}\n          >\n            {post.location}\n          </Typography>\n          <Typography className={classes.hostedBy}>\n            Hosted by: {post.name}\n          </Typography>\n          <Divider style={{ margin: '20px 0' }} />\n          {/* {(user?.result?.googleId === post?.creator ||\n            user?.result?._id === post?.creator) && (\n            <CommentSection post={post} className={classes.nameLabel} />\n            )}*/}\n          <CommentSection post={post} className={classes.nameLabel} />\n          <Divider style={{ margin: '20px 0' }} />\n        </div>\n      </div>\n      {!!recommendedPosts.length && (\n        <div className={classes.section}>\n          <Typography\n            className={classes.alsoLike}\n            gutterBottom\n            variant='h5'\n            className={classes.nameLabel}\n          >\n            You might also like:\n          </Typography>\n          <Divider />\n          <div className={classes.recommendedPosts}>\n            {recommendedPosts.map(\n              ({ title, name, message, likes, selectedFile, _id }) => (\n                <div\n                  style={{ margin: '20px', cursor: 'pointer' }}\n                  onClick={() => openPost(_id)}\n                  key={_id}\n                >\n                  <Typography\n                    gutterBottom\n                    variant='h6'\n                    className={classes.alsoLike}\n                  >\n                    {title}\n                  </Typography>\n                  <Typography\n                    gutterBottom\n                    variant='subtitle2'\n                    className={classes.alsoLike}\n                  >\n                    {name}\n                  </Typography>\n                  <Typography\n                    gutterBottom\n                    variant='subtitle2'\n                    className={classes.alsoLike}\n                  >\n                    {message}\n                  </Typography>\n                  <Typography\n                    className={classes.alsoLike}\n                    gutterBottom\n                    variant='subtitle1'\n                  >\n                    <FavoriteBorderIcon\n                      className={classes.likeIcon}\n                      alt={`: ${likes?.length}`}\n                    ></FavoriteBorderIcon>\n                    Likes: {likes?.length}\n                  </Typography>\n                  <img src={selectedFile} width='200px' alt='placeholder' />\n                </div>\n              )\n            )}\n          </div>\n        </div>\n      )}\n    </Paper>\n  );\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}