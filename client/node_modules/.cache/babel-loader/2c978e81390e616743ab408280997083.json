{"ast":null,"code":"var _jsxFileName = \"/Users/albertshay/Desktop/silkroad/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { Dashboard } from '@uppy/react';\nimport { TextField, Button, Typography, Paper, Grid, FormControl } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\nimport { useHistory, Link } from 'react-router-dom';\nimport ChipInput from 'material-ui-chip-input';\nimport AlgoliaPlaces from 'algolia-places-react';\nimport { createPost, updatePost } from '../../actions/posts';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Uploader from './Uploader';\nimport places from 'places.js';\nimport UploadIcon from './UploadIcon';\nimport useStyles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  addId: process.env.REACT_APP_ALOGLIA_APP_ID,\n  apiKey: process.env.REACT_APP_ALOGLIA_API_KEY,\n  language: 'en',\n  countries: ['us']\n};\n\nconst Form = ({\n  showModal,\n  currentId,\n  setCurrentId\n}) => {\n  _s();\n\n  var _user$result3;\n\n  const [postData, setPostData] = useState({\n    title: '',\n    message: '',\n    location: '',\n    tags: [],\n    selectedFile: ''\n  });\n  const [location, setLocation] = useState('');\n  const post = useSelector(state => currentId ? state.posts.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  const notify = () => toast('Please select image');\n\n  const history = useHistory();\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: '',\n      message: '',\n      location: '',\n      tags: [],\n      selectedFile: ''\n    });\n  };\n\n  useEffect(() => {\n    if (!(post === null || post === void 0 ? void 0 : post.title)) clear();\n    if (post) setPostData(post);\n  }, [post]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }, history));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n      showModal();\n    }\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paperSmall,\n      elevation: 0,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h7\",\n        align: \"center\",\n        component: Link,\n        to: \"/auth\",\n        children: \"Sign in to buy & sell products\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n  const handleAddChip = tag => {\n    setPostData({ ...postData,\n      tags: [...postData.tags, tag]\n    });\n  };\n\n  const handleDeleteChip = chipToDelete => {\n    setPostData({ ...postData,\n      tags: postData.tags.filter(tag => tag !== chipToDelete)\n    });\n  };\n\n  /*#__PURE__*/\n  _jsxDEV(Grid, {\n    item: true,\n    xs: 16,\n    sm: 9,\n    md: 12,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      currentId: currentId,\n      setCurrentId: setCurrentId,\n      showModal: showModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    md: 9,\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      elevation: 10,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        autoComplete: \"off\",\n        noValidate: true,\n        className: `${classes.root} ${classes.form}`,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h7\",\n          children: currentId ? `Editing product` : 'Add new product'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          name: \"title\",\n          className: classes.titleField,\n          variant: \"outlined\",\n          label: \"Title\",\n          fullWidth: true,\n          value: postData.title,\n          onChange: e => setPostData({ ...postData,\n            title: e.target.value\n          }),\n          InputProps: {\n            classes: {\n              root: classes.inputRoot\n            }\n          },\n          InputLabelProps: {\n            classes: {\n              root: classes.labelRoot,\n              focused: classes.labelFocused\n            }\n          },\n          margin: \"normal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          name: \"message\",\n          variant: \"outlined\",\n          label: \"Description\",\n          fullWidth: true,\n          multiline: true,\n          className: classes.textField,\n          rows: 10,\n          value: postData.message,\n          onChange: e => setPostData({ ...postData,\n            message: e.target.value\n          }),\n          InputProps: {\n            classes: {\n              root: classes.inputRoot\n            }\n          },\n          InputLabelProps: {\n            classes: {\n              root: classes.labelRoot,\n              focused: classes.labelFocused\n            }\n          },\n          margin: \"normal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          children: /*#__PURE__*/_jsxDEV(AlgoliaPlaces, {\n            placeholder: \"Type location here*\",\n            defaultValue: location,\n            options: config,\n            onChange: e => setLocation(e.suggestion.value),\n            className: classes.locationAlgolia\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          label: \"Location\",\n          name: \"location\",\n          className: classes.location,\n          style: {\n            fontFamily: 'Montserrat'\n          },\n          placeholder: \" Click to confirm location*\",\n          value: postData.location,\n          onClick: e => setPostData({ ...postData,\n            location: location\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          name: \"tags\",\n          variant: \"outlined\",\n          label: \"Price\",\n          className: classes.priceInput,\n          fullWidth: true,\n          value: postData.tags,\n          onChange: e => setPostData({ ...postData,\n            tags: e.target.value.split(',')\n          }),\n          InputProps: {\n            classes: {\n              root: classes.inputRoot\n            }\n          },\n          InputLabelProps: {\n            classes: {\n              root: classes.labelRoot,\n              focused: classes.labelFocused\n            }\n          },\n          margin: \"normal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Uploader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.fileInput,\n          children: /*#__PURE__*/_jsxDEV(FileBase, {\n            type: \"file\",\n            className: classes.fileInput,\n            multiple: false,\n            onDone: ({\n              base64\n            }) => setPostData({ ...postData,\n              selectedFile: base64\n            }),\n            label: UploadIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.buttonSubmit,\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"large\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"/icv+bVZSZFsBeJyDVH0QY6UPnQ=\", false, function () {\n  return [useSelector, useDispatch, useStyles, useHistory];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","useRef","useMemo","Dashboard","TextField","Button","Typography","Paper","Grid","FormControl","useDispatch","useSelector","FileBase","FileUploadIcon","useHistory","Link","ChipInput","AlgoliaPlaces","createPost","updatePost","ToastContainer","toast","Uploader","places","UploadIcon","useStyles","config","addId","process","env","REACT_APP_ALOGLIA_APP_ID","apiKey","REACT_APP_ALOGLIA_API_KEY","language","countries","Form","showModal","currentId","setCurrentId","postData","setPostData","title","message","location","tags","selectedFile","setLocation","post","state","posts","find","_id","dispatch","classes","user","JSON","parse","localStorage","getItem","notify","history","clear","handleSubmit","e","preventDefault","name","result","paperSmall","handleAddChip","tag","handleDeleteChip","chipToDelete","filter","paper","root","form","titleField","target","value","inputRoot","labelRoot","focused","labelFocused","textField","suggestion","locationAlgolia","fontFamily","priceInput","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { Dashboard } from '@uppy/react';\nimport {\n  TextField,\n  Button,\n  Typography,\n  Paper,\n  Grid,\n  FormControl,\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\nimport { useHistory, Link } from 'react-router-dom';\nimport ChipInput from 'material-ui-chip-input';\nimport AlgoliaPlaces from 'algolia-places-react';\nimport { createPost, updatePost } from '../../actions/posts';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Uploader from './Uploader';\nimport places from 'places.js';\nimport UploadIcon from './UploadIcon';\nimport useStyles from './styles';\n\nconst config = {\n  addId: process.env.REACT_APP_ALOGLIA_APP_ID,\n  apiKey: process.env.REACT_APP_ALOGLIA_API_KEY,\n  language: 'en',\n  countries: ['us'],\n};\nconst Form = ({ showModal, currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({\n    title: '',\n    message: '',\n    location: '',\n    tags: [],\n    selectedFile: '',\n  });\n  const [location, setLocation] = useState('');\n\n  const post = useSelector((state) =>\n    currentId\n      ? state.posts.posts.find((message) => message._id === currentId)\n      : null\n  );\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const notify = () => toast('Please select image');\n  const history = useHistory();\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: '',\n      message: '',\n      location: '',\n      tags: [],\n      selectedFile: '',\n    });\n  };\n\n  useEffect(() => {\n    if (!post?.title) clear();\n    if (post) setPostData(post);\n  }, [post]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      dispatch(\n        createPost(\n          {\n            ...postData,\n            name: user?.result?.name,\n          },\n          history\n        )\n      );\n      clear();\n    } else {\n      dispatch(\n        updatePost(currentId, {\n          ...postData,\n          name: user?.result?.name,\n        })\n      );\n      clear();\n      showModal();\n    }\n  };\n\n  if (!user?.result?.name) {\n    return (\n      <Paper className={classes.paperSmall} elevation={0}>\n        <Typography variant='h7' align='center' component={Link} to='/auth'>\n          Sign in to buy & sell products\n        </Typography>\n      </Paper>\n    );\n  }\n\n  const handleAddChip = (tag) => {\n    setPostData({ ...postData, tags: [...postData.tags, tag] });\n  };\n\n  const handleDeleteChip = (chipToDelete) => {\n    setPostData({\n      ...postData,\n      tags: postData.tags.filter((tag) => tag !== chipToDelete),\n    });\n  };\n\n  <Grid item xs={16} sm={9} md={12}>\n    <Form\n      currentId={currentId}\n      setCurrentId={setCurrentId}\n      showModal={showModal}\n    />\n  </Grid>;\n\n  return (\n    <Grid item xs={12} sm={6} md={9}>\n      <Paper className={classes.paper} elevation={10}>\n        <form\n          autoComplete='off'\n          noValidate\n          className={`${classes.root} ${classes.form}`}\n          onSubmit={handleSubmit}\n        >\n          <Typography variant='h7'>\n            {currentId ? `Editing product` : 'Add new product'}\n          </Typography>\n          <TextField\n            required={true}\n            name='title'\n            className={classes.titleField}\n            variant='outlined'\n            label='Title'\n            fullWidth\n            value={postData.title}\n            onChange={(e) =>\n              setPostData({ ...postData, title: e.target.value })\n            }\n            InputProps={{ classes: { root: classes.inputRoot } }}\n            InputLabelProps={{\n              classes: {\n                root: classes.labelRoot,\n                focused: classes.labelFocused,\n              },\n            }}\n            margin='normal'\n          />\n          <TextField\n            required={true}\n            name='message'\n            variant='outlined'\n            label='Description'\n            fullWidth\n            multiline\n            className={classes.textField}\n            rows={10}\n            value={postData.message}\n            onChange={(e) =>\n              setPostData({ ...postData, message: e.target.value })\n            }\n            InputProps={{ classes: { root: classes.inputRoot } }}\n            InputLabelProps={{\n              classes: {\n                root: classes.labelRoot,\n                focused: classes.labelFocused,\n              },\n            }}\n            margin='normal'\n          />\n\n          {/* <TextField\n            name='message'\n            variant='outlined'\n            label='location'\n            fullWidth\n            option={config}\n            rows={1}\n            value={postData.message}\n            onChange={(e) => {\n              if (e.target.value === '') {\n                navigator.geolocation.getCurrentPosition(function (position) {\n                  console.log('Latitude is :', position.coords.latitude);\n                  console.log('Longitude is :', position.coords.longitude);\n                  location = position;\n                });\n              }\n              setPostData({\n                ...postData,\n                location: location\n                  ? { ...postData, location: location }\n                  : { ...postData, location: e.target.value },\n              });\n            }}\n            InputProps={{ classes: { root: classes.inputRoot } }}\n            InputLabelProps={{\n              classes: {\n                root: classes.labelRoot,\n                focused: classes.labelFocused,\n              },\n            }}\n            margin='normal'\n          /> */}\n          {/*   <ChipInput\n            name='tags'\n            variant='outlined'\n            label='Price'\n            fullWidth\n            value={postData.tags}\n            onAdd={(chip) => handleAddChip(chip)}\n            onDelete={(chip) => handleDeleteChip(chip)}\n        />*/}\n          <FormControl>\n            <AlgoliaPlaces\n              placeholder='Type location here*'\n              defaultValue={location}\n              options={config}\n              onChange={(e) => setLocation(e.suggestion.value)}\n              className={classes.locationAlgolia}\n            />\n          </FormControl>\n          <input\n            label='Location'\n            name='location'\n            className={classes.location}\n            style={{ fontFamily: 'Montserrat' }}\n            placeholder=' Click to confirm location*'\n            value={postData.location}\n            onClick={(e) => setPostData({ ...postData, location: location })}\n          />\n\n          <TextField\n            required={true}\n            name='tags'\n            variant='outlined'\n            label='Price'\n            className={classes.priceInput}\n            fullWidth\n            value={postData.tags}\n            onChange={(e) =>\n              setPostData({ ...postData, tags: e.target.value.split(',') })\n            }\n            InputProps={{ classes: { root: classes.inputRoot } }}\n            InputLabelProps={{\n              classes: {\n                root: classes.labelRoot,\n                focused: classes.labelFocused,\n              },\n            }}\n            margin='normal'\n          />\n          <Uploader />\n          <br />\n          <div className={classes.fileInput}>\n            <FileBase\n              type='file'\n              className={classes.fileInput}\n              multiple={false}\n              onDone={({ base64 }) =>\n                setPostData({ ...postData, selectedFile: base64 })\n              }\n              label={UploadIcon}\n            />\n          </div>\n\n          <Button\n            className={classes.buttonSubmit}\n            variant='contained'\n            color='primary'\n            size='large'\n            type='submit'\n          >\n            Submit\n          </Button>\n          <ToastContainer />\n          {/*  <Button\n            variant='contained'\n            color='secondary'\n            size='small'\n            onClick={clear}\n            fullWidth\n          >\n            Clear\n        </Button>*/}\n        </form>\n      </Paper>\n      <br />\n    </Grid>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}