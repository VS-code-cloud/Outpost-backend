{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _class, _temp;\n\nvar _require = require('@uppy/core'),\n    UIPlugin = _require.UIPlugin;\n\nvar toArray = require('@uppy/utils/lib/toArray');\n\nvar _require2 = require('preact'),\n    h = _require2.h;\n\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin) {\n  _inherits(FileInput, _UIPlugin);\n\n  var _super = _createSuper(FileInput);\n\n  function FileInput(uppy, opts) {\n    var _this;\n\n    _classCallCheck(this, FileInput);\n\n    _this = _super.call(this, uppy, opts);\n    _this.id = _this.opts.id || 'FileInput';\n    _this.title = 'File Input';\n    _this.type = 'acquirer';\n    _this.defaultLocale = {\n      strings: {\n        // The same key is used for the same purpose by @uppy/robodog's `form()` API, but our\n        // locale pack scripts can't access it in Robodog. If it is updated here, it should\n        // also be updated there!\n        chooseFiles: 'Choose files'\n      }\n    }; // Default options\n\n    var defaultOptions = {\n      target: null,\n      pretty: true,\n      inputName: 'files[]'\n    }; // Merge default options with the ones set by user\n\n    _this.opts = _objectSpread(_objectSpread({}, defaultOptions), opts);\n\n    _this.i18nInit();\n\n    _this.render = _this.render.bind(_assertThisInitialized(_this));\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_this));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(FileInput, [{\n    key: \"addFiles\",\n    value: function addFiles(files) {\n      var _this2 = this;\n\n      var descriptors = files.map(function (file) {\n        return {\n          source: _this2.id,\n          name: file.name,\n          type: file.type,\n          data: file\n        };\n      });\n\n      try {\n        this.uppy.addFiles(descriptors);\n      } catch (err) {\n        this.uppy.log(err);\n      }\n    }\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(event) {\n      this.uppy.log('[FileInput] Something selected through input...');\n      var files = toArray(event.target.files);\n      this.addFiles(files); // We clear the input after a file is selected, because otherwise\n      // change event is not fired in Chrome and Safari when a file\n      // with the same name is selected.\n      // ___Why not use value=\"\" on <input/> instead?\n      //    Because if we use that method of clearing the input,\n      //    Chrome will not trigger change if we drop the same file twice (Issue #768).\n\n      event.target.value = null;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.input.click();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      /* http://tympanus.net/codrops/2015/09/15/styling-customizing-file-inputs-smart-way/ */\n      var hiddenInputStyle = {\n        width: '0.1px',\n        height: '0.1px',\n        opacity: 0,\n        overflow: 'hidden',\n        position: 'absolute',\n        zIndex: -1\n      };\n      var restrictions = this.uppy.opts.restrictions;\n      var accept = restrictions.allowedFileTypes ? restrictions.allowedFileTypes.join(',') : null;\n      return h(\"div\", {\n        className: \"uppy-Root uppy-FileInput-container\"\n      }, h(\"input\", {\n        className: \"uppy-FileInput-input\",\n        style: this.opts.pretty && hiddenInputStyle,\n        type: \"file\",\n        name: this.opts.inputName,\n        onChange: this.handleInputChange,\n        multiple: restrictions.maxNumberOfFiles !== 1,\n        accept: accept,\n        ref: function ref(input) {\n          _this3.input = input;\n        }\n      }), this.opts.pretty && h(\"button\", {\n        className: \"uppy-FileInput-btn\",\n        type: \"button\",\n        onClick: this.handleClick\n      }, this.i18n('chooseFiles')));\n    }\n  }, {\n    key: \"install\",\n    value: function install() {\n      var target = this.opts.target;\n\n      if (target) {\n        this.mount(target, this);\n      }\n    }\n  }, {\n    key: \"uninstall\",\n    value: function uninstall() {\n      this.unmount();\n    }\n  }]);\n\n  return FileInput;\n}(UIPlugin), _class.VERSION = \"2.0.4\", _temp);","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/file-input/lib/index.js"],"names":["_class","_temp","require","UIPlugin","toArray","h","module","exports","uppy","opts","id","title","type","defaultLocale","strings","chooseFiles","defaultOptions","target","pretty","inputName","i18nInit","render","bind","handleInputChange","handleClick","files","descriptors","map","file","source","name","data","addFiles","err","log","event","value","input","click","hiddenInputStyle","width","height","opacity","overflow","position","zIndex","restrictions","accept","allowedFileTypes","join","className","style","onChange","multiple","maxNumberOfFiles","ref","onClick","i18n","mount","unmount","VERSION"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAIA,MAAJ,EAAYC,KAAZ;;AAEA,eAEIC,OAAO,CAAC,YAAD,CAFX;AAAA,IACEC,QADF,YACEA,QADF;;AAIA,IAAMC,OAAO,GAAGF,OAAO,CAAC,yBAAD,CAAvB;;AAEA,gBAEIA,OAAO,CAAC,QAAD,CAFX;AAAA,IACEG,CADF,aACEA,CADF;;AAIAC,MAAM,CAACC,OAAP,IAAkBN,KAAK,GAAGD,MAAM;AAAA;;AAAA;;AAC9B,qBAAYQ,IAAZ,EAAkBC,IAAlB,EAAwB;AAAA;;AAAA;;AACtB,8BAAMD,IAAN,EAAYC,IAAZ;AACA,UAAKC,EAAL,GAAU,MAAKD,IAAL,CAAUC,EAAV,IAAgB,WAA1B;AACA,UAAKC,KAAL,GAAa,YAAb;AACA,UAAKC,IAAL,GAAY,UAAZ;AACA,UAAKC,aAAL,GAAqB;AACnBC,MAAAA,OAAO,EAAE;AACP;AACA;AACA;AACAC,QAAAA,WAAW,EAAE;AAJN;AADU,KAArB,CALsB,CAYnB;;AAEH,QAAMC,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,IADa;AAErBC,MAAAA,MAAM,EAAE,IAFa;AAGrBC,MAAAA,SAAS,EAAE;AAHU,KAAvB,CAdsB,CAkBnB;;AAEH,UAAKV,IAAL,mCAAiBO,cAAjB,GACKP,IADL;;AAGA,UAAKW,QAAL;;AACA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,+BAAd;AACA,UAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBD,IAAvB,+BAAzB;AACA,UAAKE,WAAL,GAAmB,MAAKA,WAAL,CAAiBF,IAAjB,+BAAnB;AA1BsB;AA2BvB;;AA5B6B;AAAA;AAAA,WA8B9B,kBAASG,KAAT,EAAgB;AAAA;;AACd,UAAMC,WAAW,GAAGD,KAAK,CAACE,GAAN,CAAU,UAAAC,IAAI;AAAA,eAAK;AACrCC,UAAAA,MAAM,EAAE,MAAI,CAACnB,EADwB;AAErCoB,UAAAA,IAAI,EAAEF,IAAI,CAACE,IAF0B;AAGrClB,UAAAA,IAAI,EAAEgB,IAAI,CAAChB,IAH0B;AAIrCmB,UAAAA,IAAI,EAAEH;AAJ+B,SAAL;AAAA,OAAd,CAApB;;AAOA,UAAI;AACF,aAAKpB,IAAL,CAAUwB,QAAV,CAAmBN,WAAnB;AACD,OAFD,CAEE,OAAOO,GAAP,EAAY;AACZ,aAAKzB,IAAL,CAAU0B,GAAV,CAAcD,GAAd;AACD;AACF;AA3C6B;AAAA;AAAA,WA6C9B,2BAAkBE,KAAlB,EAAyB;AACvB,WAAK3B,IAAL,CAAU0B,GAAV,CAAc,iDAAd;AACA,UAAMT,KAAK,GAAGrB,OAAO,CAAC+B,KAAK,CAAClB,MAAN,CAAaQ,KAAd,CAArB;AACA,WAAKO,QAAL,CAAcP,KAAd,EAHuB,CAGD;AACtB;AACA;AACA;AACA;AACA;;AAEAU,MAAAA,KAAK,CAAClB,MAAN,CAAamB,KAAb,GAAqB,IAArB;AACD;AAxD6B;AAAA;AAAA,WA0D9B,uBAAc;AACZ,WAAKC,KAAL,CAAWC,KAAX;AACD;AA5D6B;AAAA;AAAA,WA8D9B,kBAAS;AAAA;;AACP;AACA,UAAMC,gBAAgB,GAAG;AACvBC,QAAAA,KAAK,EAAE,OADgB;AAEvBC,QAAAA,MAAM,EAAE,OAFe;AAGvBC,QAAAA,OAAO,EAAE,CAHc;AAIvBC,QAAAA,QAAQ,EAAE,QAJa;AAKvBC,QAAAA,QAAQ,EAAE,UALa;AAMvBC,QAAAA,MAAM,EAAE,CAAC;AANc,OAAzB;AAQA,UACEC,YADF,GAEI,KAAKtC,IAAL,CAAUC,IAFd,CACEqC,YADF;AAGA,UAAMC,MAAM,GAAGD,YAAY,CAACE,gBAAb,GAAgCF,YAAY,CAACE,gBAAb,CAA8BC,IAA9B,CAAmC,GAAnC,CAAhC,GAA0E,IAAzF;AACA,aAAO5C,CAAC,CAAC,KAAD,EAAQ;AACd6C,QAAAA,SAAS,EAAE;AADG,OAAR,EAEL7C,CAAC,CAAC,OAAD,EAAU;AACZ6C,QAAAA,SAAS,EAAE,sBADC;AAEZC,QAAAA,KAAK,EAAE,KAAK1C,IAAL,CAAUS,MAAV,IAAoBqB,gBAFf;AAGZ3B,QAAAA,IAAI,EAAE,MAHM;AAIZkB,QAAAA,IAAI,EAAE,KAAKrB,IAAL,CAAUU,SAJJ;AAKZiC,QAAAA,QAAQ,EAAE,KAAK7B,iBALH;AAMZ8B,QAAAA,QAAQ,EAAEP,YAAY,CAACQ,gBAAb,KAAkC,CANhC;AAOZP,QAAAA,MAAM,EAAEA,MAPI;AAQZQ,QAAAA,GAAG,EAAE,aAAAlB,KAAK,EAAI;AACZ,UAAA,MAAI,CAACA,KAAL,GAAaA,KAAb;AACD;AAVW,OAAV,CAFI,EAaJ,KAAK5B,IAAL,CAAUS,MAAV,IAAoBb,CAAC,CAAC,QAAD,EAAW;AAClC6C,QAAAA,SAAS,EAAE,oBADuB;AAElCtC,QAAAA,IAAI,EAAE,QAF4B;AAGlC4C,QAAAA,OAAO,EAAE,KAAKhC;AAHoB,OAAX,EAItB,KAAKiC,IAAL,CAAU,aAAV,CAJsB,CAbjB,CAAR;AAkBD;AA9F6B;AAAA;AAAA,WAgG9B,mBAAU;AACR,UACExC,MADF,GAEI,KAAKR,IAFT,CACEQ,MADF;;AAIA,UAAIA,MAAJ,EAAY;AACV,aAAKyC,KAAL,CAAWzC,MAAX,EAAmB,IAAnB;AACD;AACF;AAxG6B;AAAA;AAAA,WA0G9B,qBAAY;AACV,WAAK0C,OAAL;AACD;AA5G6B;;AAAA;AAAA,EAA2BxD,QAA3B,CAAd,EA8GfH,MAAM,CAAC4D,OAAP,GAAiB,OA9GF,EA8GW3D,KA9G7B","sourcesContent":["\"use strict\";\n\nvar _class, _temp;\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst toArray = require('@uppy/utils/lib/toArray');\n\nconst {\n  h\n} = require('preact');\n\nmodule.exports = (_temp = _class = class FileInput extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    this.id = this.opts.id || 'FileInput';\n    this.title = 'File Input';\n    this.type = 'acquirer';\n    this.defaultLocale = {\n      strings: {\n        // The same key is used for the same purpose by @uppy/robodog's `form()` API, but our\n        // locale pack scripts can't access it in Robodog. If it is updated here, it should\n        // also be updated there!\n        chooseFiles: 'Choose files'\n      }\n    }; // Default options\n\n    const defaultOptions = {\n      target: null,\n      pretty: true,\n      inputName: 'files[]'\n    }; // Merge default options with the ones set by user\n\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  addFiles(files) {\n    const descriptors = files.map(file => ({\n      source: this.id,\n      name: file.name,\n      type: file.type,\n      data: file\n    }));\n\n    try {\n      this.uppy.addFiles(descriptors);\n    } catch (err) {\n      this.uppy.log(err);\n    }\n  }\n\n  handleInputChange(event) {\n    this.uppy.log('[FileInput] Something selected through input...');\n    const files = toArray(event.target.files);\n    this.addFiles(files); // We clear the input after a file is selected, because otherwise\n    // change event is not fired in Chrome and Safari when a file\n    // with the same name is selected.\n    // ___Why not use value=\"\" on <input/> instead?\n    //    Because if we use that method of clearing the input,\n    //    Chrome will not trigger change if we drop the same file twice (Issue #768).\n\n    event.target.value = null;\n  }\n\n  handleClick() {\n    this.input.click();\n  }\n\n  render() {\n    /* http://tympanus.net/codrops/2015/09/15/styling-customizing-file-inputs-smart-way/ */\n    const hiddenInputStyle = {\n      width: '0.1px',\n      height: '0.1px',\n      opacity: 0,\n      overflow: 'hidden',\n      position: 'absolute',\n      zIndex: -1\n    };\n    const {\n      restrictions\n    } = this.uppy.opts;\n    const accept = restrictions.allowedFileTypes ? restrictions.allowedFileTypes.join(',') : null;\n    return h(\"div\", {\n      className: \"uppy-Root uppy-FileInput-container\"\n    }, h(\"input\", {\n      className: \"uppy-FileInput-input\",\n      style: this.opts.pretty && hiddenInputStyle,\n      type: \"file\",\n      name: this.opts.inputName,\n      onChange: this.handleInputChange,\n      multiple: restrictions.maxNumberOfFiles !== 1,\n      accept: accept,\n      ref: input => {\n        this.input = input;\n      }\n    }), this.opts.pretty && h(\"button\", {\n      className: \"uppy-FileInput-btn\",\n      type: \"button\",\n      onClick: this.handleClick\n    }, this.i18n('chooseFiles')));\n  }\n\n  install() {\n    const {\n      target\n    } = this.opts;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n\n  uninstall() {\n    this.unmount();\n  }\n\n}, _class.VERSION = \"2.0.4\", _temp);"]},"metadata":{},"sourceType":"script"}