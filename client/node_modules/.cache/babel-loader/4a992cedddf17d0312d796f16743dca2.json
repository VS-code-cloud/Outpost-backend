{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-console */\n\nvar getTimeStamp = require('@uppy/utils/lib/getTimeStamp'); // Swallow all logs, except errors.\n// default if logger is not set or debug: false\n\n\nvar justErrorsLogger = {\n  debug: function debug() {},\n  warn: function warn() {},\n  error: function error() {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (_console = console).error.apply(_console, [\"[Uppy] [\".concat(getTimeStamp(), \"]\")].concat(args));\n  }\n}; // Print logs to console with namespace + timestamp,\n// set by logger: Uppy.debugLogger or debug: true\n\nvar debugLogger = {\n  debug: function debug() {\n    var _console2;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return (_console2 = console).debug.apply(_console2, [\"[Uppy] [\".concat(getTimeStamp(), \"]\")].concat(args));\n  },\n  warn: function warn() {\n    var _console3;\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return (_console3 = console).warn.apply(_console3, [\"[Uppy] [\".concat(getTimeStamp(), \"]\")].concat(args));\n  },\n  error: function error() {\n    var _console4;\n\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return (_console4 = console).error.apply(_console4, [\"[Uppy] [\".concat(getTimeStamp(), \"]\")].concat(args));\n  }\n};\nmodule.exports = {\n  justErrorsLogger: justErrorsLogger,\n  debugLogger: debugLogger\n};","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/core/lib/loggers.js"],"names":["getTimeStamp","require","justErrorsLogger","debug","warn","error","args","console","debugLogger","module","exports"],"mappings":"AAAA;AAEA;;AACA,IAAMA,YAAY,GAAGC,OAAO,CAAC,8BAAD,CAA5B,C,CAA8D;AAC9D;;;AAGA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,iBAAM,CAAE,CADQ;AAEvBC,EAAAA,IAAI,EAAE,gBAAM,CAAE,CAFS;AAGvBC,EAAAA,KAAK,EAAE;AAAA;;AAAA,sCAAIC,IAAJ;AAAIA,MAAAA,IAAJ;AAAA;;AAAA,WAAa,YAAAC,OAAO,EAACF,KAAR,oCAAyBL,YAAY,EAArC,eAA+CM,IAA/C,EAAb;AAAA;AAHgB,CAAzB,C,CAIG;AACH;;AAEA,IAAME,WAAW,GAAG;AAClBL,EAAAA,KAAK,EAAE;AAAA;;AAAA,uCAAIG,IAAJ;AAAIA,MAAAA,IAAJ;AAAA;;AAAA,WAAa,aAAAC,OAAO,EAACJ,KAAR,qCAAyBH,YAAY,EAArC,eAA+CM,IAA/C,EAAb;AAAA,GADW;AAElBF,EAAAA,IAAI,EAAE;AAAA;;AAAA,uCAAIE,IAAJ;AAAIA,MAAAA,IAAJ;AAAA;;AAAA,WAAa,aAAAC,OAAO,EAACH,IAAR,qCAAwBJ,YAAY,EAApC,eAA8CM,IAA9C,EAAb;AAAA,GAFY;AAGlBD,EAAAA,KAAK,EAAE;AAAA;;AAAA,uCAAIC,IAAJ;AAAIA,MAAAA,IAAJ;AAAA;;AAAA,WAAa,aAAAC,OAAO,EAACF,KAAR,qCAAyBL,YAAY,EAArC,eAA+CM,IAA/C,EAAb;AAAA;AAHW,CAApB;AAKAG,MAAM,CAACC,OAAP,GAAiB;AACfR,EAAAA,gBAAgB,EAAhBA,gBADe;AAEfM,EAAAA,WAAW,EAAXA;AAFe,CAAjB","sourcesContent":["\"use strict\";\n\n/* eslint-disable no-console */\nconst getTimeStamp = require('@uppy/utils/lib/getTimeStamp'); // Swallow all logs, except errors.\n// default if logger is not set or debug: false\n\n\nconst justErrorsLogger = {\n  debug: () => {},\n  warn: () => {},\n  error: (...args) => console.error(`[Uppy] [${getTimeStamp()}]`, ...args)\n}; // Print logs to console with namespace + timestamp,\n// set by logger: Uppy.debugLogger or debug: true\n\nconst debugLogger = {\n  debug: (...args) => console.debug(`[Uppy] [${getTimeStamp()}]`, ...args),\n  warn: (...args) => console.warn(`[Uppy] [${getTimeStamp()}]`, ...args),\n  error: (...args) => console.error(`[Uppy] [${getTimeStamp()}]`, ...args)\n};\nmodule.exports = {\n  justErrorsLogger,\n  debugLogger\n};"]},"metadata":{},"sourceType":"script"}