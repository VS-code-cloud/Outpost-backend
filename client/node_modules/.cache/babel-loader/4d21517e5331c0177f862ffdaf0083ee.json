{"ast":null,"code":"\"use strict\";\n/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n *\n * @param {FileSystemDirectoryReader} directoryReader\n * @param {Array} oldEntries\n * @param {Function} logDropError\n * @param {Function} callback - called with ([ all files and directories in that directoryReader ])\n */\n\nvar _toConsumableArray = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nmodule.exports = function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, _ref) {\n  var onSuccess = _ref.onSuccess;\n  directoryReader.readEntries(function (entries) {\n    var newEntries = [].concat(_toConsumableArray(oldEntries), _toConsumableArray(entries)); // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory()\n    // must be called until it calls the onSuccess with an empty array.\n\n    if (entries.length) {\n      setTimeout(function () {\n        getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {\n          onSuccess: onSuccess\n        });\n      }, 0); // Done iterating this particular directory\n    } else {\n      onSuccess(newEntries);\n    }\n  }, // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n  function (error) {\n    logDropError(error);\n    onSuccess(oldEntries);\n  });\n};","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/utils/lib/getDroppedFiles/utils/webkitGetAsEntryApi/getFilesAndDirectoriesFromDirectory.js"],"names":["module","exports","getFilesAndDirectoriesFromDirectory","directoryReader","oldEntries","logDropError","onSuccess","readEntries","entries","newEntries","length","setTimeout","error"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,mCAAT,CAA6CC,eAA7C,EAA8DC,UAA9D,EAA0EC,YAA1E,QAEd;AAAA,MADDC,SACC,QADDA,SACC;AACDH,EAAAA,eAAe,CAACI,WAAhB,CAA4B,UAAAC,OAAO,EAAI;AACrC,QAAMC,UAAU,gCAAOL,UAAP,sBAAsBI,OAAtB,EAAhB,CADqC,CACW;AAChD;;AAEA,QAAIA,OAAO,CAACE,MAAZ,EAAoB;AAClBC,MAAAA,UAAU,CAAC,YAAM;AACfT,QAAAA,mCAAmC,CAACC,eAAD,EAAkBM,UAAlB,EAA8BJ,YAA9B,EAA4C;AAC7EC,UAAAA,SAAS,EAATA;AAD6E,SAA5C,CAAnC;AAGD,OAJS,EAIP,CAJO,CAAV,CADkB,CAKX;AACR,KAND,MAMO;AACLA,MAAAA,SAAS,CAACG,UAAD,CAAT;AACD;AACF,GAbD,EAaG;AACH,YAAAG,KAAK,EAAI;AACPP,IAAAA,YAAY,CAACO,KAAD,CAAZ;AACAN,IAAAA,SAAS,CAACF,UAAD,CAAT;AACD,GAjBD;AAkBD,CArBD","sourcesContent":["\"use strict\";\n\n/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n *\n * @param {FileSystemDirectoryReader} directoryReader\n * @param {Array} oldEntries\n * @param {Function} logDropError\n * @param {Function} callback - called with ([ all files and directories in that directoryReader ])\n */\nmodule.exports = function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, {\n  onSuccess\n}) {\n  directoryReader.readEntries(entries => {\n    const newEntries = [...oldEntries, ...entries]; // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory()\n    // must be called until it calls the onSuccess with an empty array.\n\n    if (entries.length) {\n      setTimeout(() => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {\n          onSuccess\n        });\n      }, 0); // Done iterating this particular directory\n    } else {\n      onSuccess(newEntries);\n    }\n  }, // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n  error => {\n    logDropError(error);\n    onSuccess(oldEntries);\n  });\n};"]},"metadata":{},"sourceType":"script"}