{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function calculateProcessingProgress(files) {\n  var values = [];\n  var mode;\n  var message;\n\n  for (var _i = 0, _Object$values = Object.values(files); _i < _Object$values.length; _i++) {\n    var progress = _Object$values[_i].progress;\n    var preprocess = progress.preprocess,\n        postprocess = progress.postprocess; // In the future we should probably do this differently. For now we'll take the\n    // mode and message from the first file…\n\n    if (message == null && (preprocess || postprocess)) {\n      var _ref = preprocess || postprocess;\n\n      mode = _ref.mode;\n      message = _ref.message;\n    }\n\n    if ((preprocess == null ? void 0 : preprocess.mode) === 'determinate') values.push(preprocess.value);\n    if ((postprocess == null ? void 0 : postprocess.mode) === 'determinate') values.push(postprocess.value);\n  }\n\n  var value = values.reduce(function (total, progressValue) {\n    return total + progressValue / values.length;\n  }, 0);\n  return {\n    mode: mode,\n    message: message,\n    value: value\n  };\n};","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/status-bar/lib/calculateProcessingProgress.js"],"names":["module","exports","calculateProcessingProgress","files","values","mode","message","Object","progress","preprocess","postprocess","push","value","reduce","total","progressValue","length"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,2BAAT,CAAqCC,KAArC,EAA4C;AAC3D,MAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,IAAJ;AACA,MAAIC,OAAJ;;AAEA,oCAEKC,MAAM,CAACH,MAAP,CAAcD,KAAd,CAFL,oCAE2B;AAFtB,QACHK,QADG,sBACHA,QADG;AAGH,QACEC,UADF,GAGID,QAHJ,CACEC,UADF;AAAA,QAEEC,WAFF,GAGIF,QAHJ,CAEEE,WAFF,CADyB,CAIX;AACd;;AAEA,QAAIJ,OAAO,IAAI,IAAX,KAAoBG,UAAU,IAAIC,WAAlC,CAAJ,EAAoD;AAAA,iBAI9CD,UAAU,IAAIC,WAJgC;;AAEhDL,MAAAA,IAFgD,QAEhDA,IAFgD;AAGhDC,MAAAA,OAHgD,QAGhDA,OAHgD;AAKnD;;AAED,QAAI,CAACG,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACJ,IAA1C,MAAoD,aAAxD,EAAuED,MAAM,CAACO,IAAP,CAAYF,UAAU,CAACG,KAAvB;AACvE,QAAI,CAACF,WAAW,IAAI,IAAf,GAAsB,KAAK,CAA3B,GAA+BA,WAAW,CAACL,IAA5C,MAAsD,aAA1D,EAAyED,MAAM,CAACO,IAAP,CAAYD,WAAW,CAACE,KAAxB;AAC1E;;AAED,MAAMA,KAAK,GAAGR,MAAM,CAACS,MAAP,CAAc,UAACC,KAAD,EAAQC,aAAR,EAA0B;AACpD,WAAOD,KAAK,GAAGC,aAAa,GAAGX,MAAM,CAACY,MAAtC;AACD,GAFa,EAEX,CAFW,CAAd;AAGA,SAAO;AACLX,IAAAA,IAAI,EAAJA,IADK;AAELC,IAAAA,OAAO,EAAPA,OAFK;AAGLM,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD,CAjCD","sourcesContent":["\"use strict\";\n\nmodule.exports = function calculateProcessingProgress(files) {\n  const values = [];\n  let mode;\n  let message;\n\n  for (const {\n    progress\n  } of Object.values(files)) {\n    const {\n      preprocess,\n      postprocess\n    } = progress; // In the future we should probably do this differently. For now we'll take the\n    // mode and message from the first file…\n\n    if (message == null && (preprocess || postprocess)) {\n      ({\n        mode,\n        message\n      } = preprocess || postprocess);\n    }\n\n    if ((preprocess == null ? void 0 : preprocess.mode) === 'determinate') values.push(preprocess.value);\n    if ((postprocess == null ? void 0 : postprocess.mode) === 'determinate') values.push(postprocess.value);\n  }\n\n  const value = values.reduce((total, progressValue) => {\n    return total + progressValue / values.length;\n  }, 0);\n  return {\n    mode,\n    message,\n    value\n  };\n};"]},"metadata":{},"sourceType":"script"}