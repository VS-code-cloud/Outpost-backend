{"ast":null,"code":"\"use strict\";\n/**\n * Core plugin logic that all plugins share.\n *\n * BasePlugin does not contain DOM rendering so it can be used for plugins\n * without a user interface.\n *\n * See `Plugin` for the extended version with Preact rendering for interfaces.\n */\n\nconst Translator = require('@uppy/utils/lib/Translator');\n\nmodule.exports = class BasePlugin {\n  constructor(uppy, opts = {}) {\n    this.uppy = uppy;\n    this.opts = opts;\n  }\n\n  getPluginState() {\n    const {\n      plugins\n    } = this.uppy.getState();\n    return plugins[this.id] || {};\n  }\n\n  setPluginState(update) {\n    const {\n      plugins\n    } = this.uppy.getState();\n    this.uppy.setState({\n      plugins: { ...plugins,\n        [this.id]: { ...plugins[this.id],\n          ...update\n        }\n      }\n    });\n  }\n\n  setOptions(newOpts) {\n    this.opts = { ...this.opts,\n      ...newOpts\n    };\n    this.setPluginState(); // so that UI re-renders with new options\n\n    this.i18nInit();\n  }\n\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  }\n  /**\n   * Extendable methods\n   * ==================\n   * These methods are here to serve as an overview of the extendable methods as well as\n   * making them not conditional in use, such as `if (this.afterUpdate)`.\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  addTarget() {\n    throw new Error('Extend the addTarget method to add your plugin to another plugin\\'s target');\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  install() {} // eslint-disable-next-line class-methods-use-this\n\n\n  uninstall() {}\n  /**\n   * Called when plugin is mounted, whether in DOM or into another plugin.\n   * Needed because sometimes plugins are mounted separately/after `install`,\n   * so this.el and this.parent might not be available in `install`.\n   * This is the case with @uppy/react plugins, for example.\n   */\n\n\n  render() {\n    throw new Error('Extend the render method to add your plugin to a DOM element');\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  update() {} // Called after every state update, after everything's mounted. Debounced.\n  // eslint-disable-next-line class-methods-use-this\n\n\n  afterUpdate() {}\n\n};","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/core/lib/BasePlugin.js"],"names":["Translator","require","module","exports","BasePlugin","constructor","uppy","opts","getPluginState","plugins","getState","id","setPluginState","update","setState","setOptions","newOpts","i18nInit","translator","defaultLocale","locale","i18n","translate","bind","i18nArray","translateArray","addTarget","Error","install","uninstall","render","afterUpdate"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,UAAU,GAAGC,OAAO,CAAC,4BAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,UAAN,CAAiB;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAI,GAAG,EAAd,EAAkB;AAC3B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,UAAM;AACJC,MAAAA;AADI,QAEF,KAAKH,IAAL,CAAUI,QAAV,EAFJ;AAGA,WAAOD,OAAO,CAAC,KAAKE,EAAN,CAAP,IAAoB,EAA3B;AACD;;AAEDC,EAAAA,cAAc,CAACC,MAAD,EAAS;AACrB,UAAM;AACJJ,MAAAA;AADI,QAEF,KAAKH,IAAL,CAAUI,QAAV,EAFJ;AAGA,SAAKJ,IAAL,CAAUQ,QAAV,CAAmB;AACjBL,MAAAA,OAAO,EAAE,EAAE,GAAGA,OAAL;AACP,SAAC,KAAKE,EAAN,GAAW,EAAE,GAAGF,OAAO,CAAC,KAAKE,EAAN,CAAZ;AACT,aAAGE;AADM;AADJ;AADQ,KAAnB;AAOD;;AAEDE,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,SAAKT,IAAL,GAAY,EAAE,GAAG,KAAKA,IAAV;AACV,SAAGS;AADO,KAAZ;AAGA,SAAKJ,cAAL,GAJkB,CAIK;;AAEvB,SAAKK,QAAL;AACD;;AAEDA,EAAAA,QAAQ,GAAG;AACT,UAAMC,UAAU,GAAG,IAAIlB,UAAJ,CAAe,CAAC,KAAKmB,aAAN,EAAqB,KAAKb,IAAL,CAAUc,MAA/B,EAAuC,KAAKb,IAAL,CAAUa,MAAjD,CAAf,CAAnB;AACA,SAAKC,IAAL,GAAYH,UAAU,CAACI,SAAX,CAAqBC,IAArB,CAA0BL,UAA1B,CAAZ;AACA,SAAKM,SAAL,GAAiBN,UAAU,CAACO,cAAX,CAA0BF,IAA1B,CAA+BL,UAA/B,CAAjB;AACA,SAAKN,cAAL,GAJS,CAIc;AACxB;AACD;AACF;AACA;AACA;AACA;AACA;AACE;;;AAGAc,EAAAA,SAAS,GAAG;AACV,UAAM,IAAIC,KAAJ,CAAU,4EAAV,CAAN;AACD,GApD+B,CAoD9B;;;AAGFC,EAAAA,OAAO,GAAG,CAAE,CAvDoB,CAuDnB;;;AAGbC,EAAAA,SAAS,GAAG,CAAE;AACd;AACF;AACA;AACA;AACA;AACA;;;AAGEC,EAAAA,MAAM,GAAG;AACP,UAAM,IAAIH,KAAJ,CAAU,8DAAV,CAAN;AACD,GArE+B,CAqE9B;;;AAGFd,EAAAA,MAAM,GAAG,CAAE,CAxEqB,CAwEpB;AACZ;;;AAGAkB,EAAAA,WAAW,GAAG,CAAE;;AA5EgB,CAAlC","sourcesContent":["\"use strict\";\n\n/**\n * Core plugin logic that all plugins share.\n *\n * BasePlugin does not contain DOM rendering so it can be used for plugins\n * without a user interface.\n *\n * See `Plugin` for the extended version with Preact rendering for interfaces.\n */\nconst Translator = require('@uppy/utils/lib/Translator');\n\nmodule.exports = class BasePlugin {\n  constructor(uppy, opts = {}) {\n    this.uppy = uppy;\n    this.opts = opts;\n  }\n\n  getPluginState() {\n    const {\n      plugins\n    } = this.uppy.getState();\n    return plugins[this.id] || {};\n  }\n\n  setPluginState(update) {\n    const {\n      plugins\n    } = this.uppy.getState();\n    this.uppy.setState({\n      plugins: { ...plugins,\n        [this.id]: { ...plugins[this.id],\n          ...update\n        }\n      }\n    });\n  }\n\n  setOptions(newOpts) {\n    this.opts = { ...this.opts,\n      ...newOpts\n    };\n    this.setPluginState(); // so that UI re-renders with new options\n\n    this.i18nInit();\n  }\n\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  }\n  /**\n   * Extendable methods\n   * ==================\n   * These methods are here to serve as an overview of the extendable methods as well as\n   * making them not conditional in use, such as `if (this.afterUpdate)`.\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  addTarget() {\n    throw new Error('Extend the addTarget method to add your plugin to another plugin\\'s target');\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  install() {} // eslint-disable-next-line class-methods-use-this\n\n\n  uninstall() {}\n  /**\n   * Called when plugin is mounted, whether in DOM or into another plugin.\n   * Needed because sometimes plugins are mounted separately/after `install`,\n   * so this.el and this.parent might not be available in `install`.\n   * This is the case with @uppy/react plugins, for example.\n   */\n\n\n  render() {\n    throw new Error('Extend the render method to add your plugin to a DOM element');\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  update() {} // Called after every state update, after everything's mounted. Debounced.\n  // eslint-disable-next-line class-methods-use-this\n\n\n  afterUpdate() {}\n\n};"]},"metadata":{},"sourceType":"script"}