{"ast":null,"code":"var _jsxFileName = \"/Users/albertshay/Desktop/silkroad/client/src/components/Navbar/Navbar.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { AppBar, Typography, Toolbar, Avatar, Button, TextField, InputBase } from '@material-ui/core';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport decode from 'jwt-decode';\nimport ChipInput from 'material-ui-chip-input';\nimport Form from '../Form/Form';\nimport silkroadText from '../../images/silkroadLogo.png';\nimport silkroadLogo from '../../images/imgLogo.png'; // import { Autocomplete } from '@react-google-maps/api';\n\nimport { getPosts, getPostsBySearch, getPostsByUser } from '../../actions/posts'; // import SearchIcon from '@material-ui/icons/Search';\n\nimport * as actionType from '../../constants/actionTypes';\nimport useStyles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction useQuery() {\n  _s();\n\n  return new URLSearchParams(useLocation().search);\n}\n\n_s(useQuery, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n  return [useLocation];\n});\n\nconst Navbar = () => {\n  _s2();\n\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const history = useHistory();\n  const classes = useStyles();\n  const [currentId, setCurrentId] = useState(0);\n  const query = useQuery();\n  const page = query.get('page') || 1;\n  const searchQuery = query.get('searchQuery');\n  const [search, setSearch] = useState('');\n  const [tags, setTags] = useState([]);\n\n  const logout = () => {\n    dispatch({\n      type: actionType.LOGOUT\n    });\n    history.push('/auth');\n    setUser(null);\n  }; // const login = () => {\n  //   console.log('login');\n  //   dispatch({ type: actionType.LOGIN });\n  //   history.push('/auth');\n  //   setUser(null);\n  // };\n\n\n  useEffect(() => {\n    const token = user === null || user === void 0 ? void 0 : user.token;\n\n    if (token) {\n      const decodedToken = decode(token);\n      if (decodedToken.exp * 1000 < new Date().getTime()) logout();\n    }\n\n    setUser(JSON.parse(localStorage.getItem('profile')));\n  }, [location]);\n\n  const searchPost = () => {\n    if (search.trim()) {\n      //to have something to dispatch we need to create the action 'getPostsBySearch\n      //dispatch -> fetch search post\n      dispatch(getPostsBySearch({\n        search,\n        tags: tags.join(',')\n      })); // history.push(`/posts/search?searchQuery=${search || 'none'}`);\n\n      history.push(`/posts/search?searchQuery=${search || 'none'}&tags=${tags.join(',')}`);\n    } else {\n      history.push('/');\n    }\n  }; // const searchByUser = () => {\n  //   const user = JSON.parse(localStorage.getItem('profile'));\n  //   if (user) dispatch(getPostsByUser(user.result._id));\n  //   history.push(`/posts/user/`);\n  //   console.log(user);\n  // };\n\n\n  const handleKeyPress = e => {\n    console.log(e.key);\n\n    if (e.key === 'Enter') {\n      searchPost(); // search post\n    }\n  };\n\n  const handleAddChip = tag => setTags([...tags, tag]);\n\n  const handleDeleteChip = chipToDelete => setTags(tags.filter(tag => tag !== chipToDelete));\n\n  return /*#__PURE__*/_jsxDEV(AppBar, {\n    className: classes.appBar,\n    position: \"sticky\",\n    color: \"inherit\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: classes.brandContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: classes.text,\n        component: Link,\n        to: \"/\",\n        src: silkroadText,\n        alt: \"icon\",\n        height: \"40px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: classes.image,\n        component: Link,\n        to: \"/\",\n        src: silkroadLogo,\n        alt: \"icon\",\n        height: \"40px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      name: \"search\",\n      variant: \"outlined\",\n      className: classes.searchinput,\n      label: `Search products by name or...`,\n      onKeyPress: handleKeyPress,\n      size: `small`,\n      fontFamily: `Montserrat`,\n      value: search // fullWidth\n      ,\n      onChange: e => setSearch(e.target.value),\n      InputProps: {\n        style: {\n          fontSize: 12\n        },\n        classes: {\n          root: classes.inputRoot\n        }\n      },\n      InputLabelProps: {\n        style: {\n          fontSize: 12\n        },\n        classes: {\n          root: classes.labelRoot,\n          focused: classes.labelFocused\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChipInput, {\n      name: \"search\",\n      style: {\n        margin: '5px 5px 5px 5px'\n      },\n      value: tags,\n      onAdd: chip => handleAddChip(chip),\n      onDelete: chip => handleDeleteChip(chip),\n      size: `small`,\n      height: 'small',\n      variant: \"outlined\",\n      fullWidth: true,\n      disableUnderline: true // alignText='center'\n      ,\n      alignItem: \"center\",\n      fontFamily: `Montserrat`,\n      label: \"price\",\n      className: classes.pricesearchinput,\n      InputProps: {\n        style: {\n          fontSize: 11\n        },\n        classes: {\n          root: classes.inputRoot\n        }\n      },\n      InputLabelProps: {\n        style: {\n          fontSize: 11\n        },\n        classes: {\n          root: classes.labelRoot,\n          focused: classes.labelFocused\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: searchPost,\n      className: classes.searchButton // color='primary'\n      ,\n      variant: \"contained\",\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n      className: classes.toolbar,\n      children: (user === null || user === void 0 ? void 0 : user.result) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.profile,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.userName,\n            variant: \"h6\",\n            children: user === null || user === void 0 ? void 0 : user.result.name.slice(0, user === null || user === void 0 ? void 0 : user.result.name.indexOf(' '))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n            className: classes.avatar,\n            alt: user === null || user === void 0 ? void 0 : user.result.name,\n            src: user === null || user === void 0 ? void 0 : user.result.imageUrl,\n            onClick: logout,\n            children: user === null || user === void 0 ? void 0 : user.result.name.charAt(0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.logout,\n        component: Link,\n        to: \"/auth\" //   onClick={login}\n        ,\n        variant: \"contained\",\n        children: \"Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Navbar, \"BM+/b9WCYJa2Ot48JTKbFZPhkwU=\", false, function () {\n  return [useDispatch, useLocation, useHistory, useStyles, useQuery];\n});\n\n_c = Navbar;\nexport default Navbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/src/components/Navbar/Navbar.js"],"names":["React","useState","useEffect","AppBar","Typography","Toolbar","Avatar","Button","TextField","InputBase","Link","useHistory","useLocation","useDispatch","decode","ChipInput","Form","silkroadText","silkroadLogo","getPosts","getPostsBySearch","getPostsByUser","actionType","useStyles","useQuery","URLSearchParams","search","Navbar","user","setUser","JSON","parse","localStorage","getItem","dispatch","location","history","classes","currentId","setCurrentId","query","page","get","searchQuery","setSearch","tags","setTags","logout","type","LOGOUT","push","token","decodedToken","exp","Date","getTime","searchPost","trim","join","handleKeyPress","e","console","log","key","handleAddChip","tag","handleDeleteChip","chipToDelete","filter","appBar","brandContainer","text","image","searchinput","target","value","style","fontSize","root","inputRoot","labelRoot","focused","labelFocused","margin","chip","pricesearchinput","searchButton","toolbar","result","profile","userName","name","slice","indexOf","avatar","imageUrl","charAt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  AppBar,\n  Typography,\n  Toolbar,\n  Avatar,\n  Button,\n  TextField,\n  InputBase,\n} from '@material-ui/core';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport decode from 'jwt-decode';\nimport ChipInput from 'material-ui-chip-input';\nimport Form from '../Form/Form';\nimport silkroadText from '../../images/silkroadLogo.png';\nimport silkroadLogo from '../../images/imgLogo.png';\n// import { Autocomplete } from '@react-google-maps/api';\nimport {\n  getPosts,\n  getPostsBySearch,\n  getPostsByUser,\n} from '../../actions/posts';\n// import SearchIcon from '@material-ui/icons/Search';\nimport * as actionType from '../../constants/actionTypes';\nimport useStyles from './styles';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\nconst Navbar = () => {\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const history = useHistory();\n\n  const classes = useStyles();\n\n  const [currentId, setCurrentId] = useState(0);\n\n  const query = useQuery();\n\n  const page = query.get('page') || 1;\n  const searchQuery = query.get('searchQuery');\n\n  const [search, setSearch] = useState('');\n  const [tags, setTags] = useState([]);\n\n  const logout = () => {\n    dispatch({ type: actionType.LOGOUT });\n\n    history.push('/auth');\n\n    setUser(null);\n  };\n  // const login = () => {\n  //   console.log('login');\n  //   dispatch({ type: actionType.LOGIN });\n\n  //   history.push('/auth');\n\n  //   setUser(null);\n  // };\n\n  useEffect(() => {\n    const token = user?.token;\n\n    if (token) {\n      const decodedToken = decode(token);\n\n      if (decodedToken.exp * 1000 < new Date().getTime()) logout();\n    }\n\n    setUser(JSON.parse(localStorage.getItem('profile')));\n  }, [location]);\n\n  const searchPost = () => {\n    if (search.trim()) {\n      //to have something to dispatch we need to create the action 'getPostsBySearch\n      //dispatch -> fetch search post\n      dispatch(getPostsBySearch({ search, tags: tags.join(',') }));\n      // history.push(`/posts/search?searchQuery=${search || 'none'}`);\n      history.push(\n        `/posts/search?searchQuery=${search || 'none'}&tags=${tags.join(',')}`\n      );\n    } else {\n      history.push('/');\n    }\n  };\n  // const searchByUser = () => {\n  //   const user = JSON.parse(localStorage.getItem('profile'));\n  //   if (user) dispatch(getPostsByUser(user.result._id));\n  //   history.push(`/posts/user/`);\n  //   console.log(user);\n  // };\n\n  const handleKeyPress = (e) => {\n    console.log(e.key);\n    if (e.key === 'Enter') {\n      searchPost();\n      // search post\n    }\n  };\n  const handleAddChip = (tag) => setTags([...tags, tag]);\n\n  const handleDeleteChip = (chipToDelete) =>\n    setTags(tags.filter((tag) => tag !== chipToDelete));\n\n  return (\n    <AppBar className={classes.appBar} position='sticky' color='inherit'>\n      <Link to='/' className={classes.brandContainer}>\n        <img\n          className={classes.text}\n          component={Link}\n          to='/'\n          src={silkroadText}\n          alt='icon'\n          height='40px'\n        />\n        <img\n          className={classes.image}\n          component={Link}\n          to='/'\n          src={silkroadLogo}\n          alt='icon'\n          height='40px'\n        />\n      </Link>\n      <TextField\n        name='search'\n        variant='outlined'\n        className={classes.searchinput}\n        label={`Search products by name or...`}\n        onKeyPress={handleKeyPress}\n        size={`small`}\n        fontFamily={`Montserrat`}\n        value={search}\n        // fullWidth\n        onChange={(e) => setSearch(e.target.value)}\n        InputProps={{\n          style: { fontSize: 12 },\n          classes: { root: classes.inputRoot },\n        }}\n        InputLabelProps={{\n          style: { fontSize: 12 },\n          classes: {\n            root: classes.labelRoot,\n            focused: classes.labelFocused,\n          },\n        }}\n      />\n      <br />\n\n      <ChipInput\n        name='search'\n        style={{ margin: '5px 5px 5px 5px' }}\n        value={tags}\n        onAdd={(chip) => handleAddChip(chip)}\n        onDelete={(chip) => handleDeleteChip(chip)}\n        size={`small`}\n        height={'small'}\n        variant='outlined'\n        fullWidth\n        disableUnderline={true}\n        // alignText='center'\n        alignItem='center'\n        fontFamily={`Montserrat`}\n        label='price'\n        className={classes.pricesearchinput}\n        InputProps={{\n          style: { fontSize: 11 },\n          classes: { root: classes.inputRoot },\n        }}\n        InputLabelProps={{\n          style: { fontSize: 11 },\n          classes: {\n            root: classes.labelRoot,\n            focused: classes.labelFocused,\n          },\n        }}\n      />\n\n      <Button\n        onClick={searchPost}\n        className={classes.searchButton}\n        // color='primary'\n        variant='contained'\n      >\n        Search\n      </Button>\n\n      <Toolbar className={classes.toolbar}>\n        {user?.result ? (\n          <>\n            <div className={classes.profile}>\n              <Typography className={classes.userName} variant='h6'>\n                {user?.result.name.slice(0, user?.result.name.indexOf(' '))}\n                {/*   {user?.result.name}*/}\n              </Typography>\n\n              <Avatar\n                className={classes.avatar}\n                alt={user?.result.name}\n                src={user?.result.imageUrl}\n                onClick={logout}\n              >\n                {user?.result.name.charAt(0)}\n              </Avatar>\n            </div>\n          </>\n        ) : (\n          <Button\n            className={classes.logout}\n            component={Link}\n            to='/auth'\n            //   onClick={login}\n            variant='contained'\n          >\n            Sign In\n          </Button>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n"]},"metadata":{},"sourceType":"module"}