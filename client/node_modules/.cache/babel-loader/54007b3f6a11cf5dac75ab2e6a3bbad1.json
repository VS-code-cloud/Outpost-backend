{"ast":null,"code":"\"use strict\";\n/**\n * Core plugin logic that all plugins share.\n *\n * BasePlugin does not contain DOM rendering so it can be used for plugins\n * without a user interface.\n *\n * See `Plugin` for the extended version with Preact rendering for interfaces.\n */\n\nvar _defineProperty = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _objectSpread = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Translator = require('@uppy/utils/lib/Translator');\n\nmodule.exports = /*#__PURE__*/function () {\n  function BasePlugin(uppy) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, BasePlugin);\n\n    this.uppy = uppy;\n    this.opts = opts;\n  }\n\n  _createClass(BasePlugin, [{\n    key: \"getPluginState\",\n    value: function getPluginState() {\n      var _this$uppy$getState = this.uppy.getState(),\n          plugins = _this$uppy$getState.plugins;\n\n      return plugins[this.id] || {};\n    }\n  }, {\n    key: \"setPluginState\",\n    value: function setPluginState(update) {\n      var _this$uppy$getState2 = this.uppy.getState(),\n          plugins = _this$uppy$getState2.plugins;\n\n      this.uppy.setState({\n        plugins: _objectSpread(_objectSpread({}, plugins), {}, _defineProperty({}, this.id, _objectSpread(_objectSpread({}, plugins[this.id]), update)))\n      });\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(newOpts) {\n      this.opts = _objectSpread(_objectSpread({}, this.opts), newOpts);\n      this.setPluginState(); // so that UI re-renders with new options\n\n      this.i18nInit();\n    }\n  }, {\n    key: \"i18nInit\",\n    value: function i18nInit() {\n      var translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n      this.i18n = translator.translate.bind(translator);\n      this.i18nArray = translator.translateArray.bind(translator);\n      this.setPluginState(); // so that UI re-renders and we see the updated locale\n    }\n    /**\n     * Extendable methods\n     * ==================\n     * These methods are here to serve as an overview of the extendable methods as well as\n     * making them not conditional in use, such as `if (this.afterUpdate)`.\n     */\n    // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"addTarget\",\n    value: function addTarget() {\n      throw new Error('Extend the addTarget method to add your plugin to another plugin\\'s target');\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"install\",\n    value: function install() {} // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"uninstall\",\n    value: function uninstall() {}\n    /**\n     * Called when plugin is mounted, whether in DOM or into another plugin.\n     * Needed because sometimes plugins are mounted separately/after `install`,\n     * so this.el and this.parent might not be available in `install`.\n     * This is the case with @uppy/react plugins, for example.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      throw new Error('Extend the render method to add your plugin to a DOM element');\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"update\",\n    value: function update() {} // Called after every state update, after everything's mounted. Debounced.\n    // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"afterUpdate\",\n    value: function afterUpdate() {}\n  }]);\n\n  return BasePlugin;\n}();","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/core/lib/BasePlugin.js"],"names":["Translator","require","module","exports","uppy","opts","getState","plugins","id","update","setState","newOpts","setPluginState","i18nInit","translator","defaultLocale","locale","i18n","translate","bind","i18nArray","translateArray","Error"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AACA,IAAMA,UAAU,GAAGC,OAAO,CAAC,4BAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP;AACE,sBAAYC,IAAZ,EAA6B;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAC3B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAJH;AAAA;AAAA,WAME,0BAAiB;AACf,gCAEI,KAAKD,IAAL,CAAUE,QAAV,EAFJ;AAAA,UACEC,OADF,uBACEA,OADF;;AAGA,aAAOA,OAAO,CAAC,KAAKC,EAAN,CAAP,IAAoB,EAA3B;AACD;AAXH;AAAA;AAAA,WAaE,wBAAeC,MAAf,EAAuB;AACrB,iCAEI,KAAKL,IAAL,CAAUE,QAAV,EAFJ;AAAA,UACEC,OADF,wBACEA,OADF;;AAGA,WAAKH,IAAL,CAAUM,QAAV,CAAmB;AACjBH,QAAAA,OAAO,kCAAOA,OAAP,2BACJ,KAAKC,EADD,kCACWD,OAAO,CAAC,KAAKC,EAAN,CADlB,GAEAC,MAFA;AADU,OAAnB;AAOD;AAxBH;AAAA;AAAA,WA0BE,oBAAWE,OAAX,EAAoB;AAClB,WAAKN,IAAL,mCAAiB,KAAKA,IAAtB,GACKM,OADL;AAGA,WAAKC,cAAL,GAJkB,CAIK;;AAEvB,WAAKC,QAAL;AACD;AAjCH;AAAA;AAAA,WAmCE,oBAAW;AACT,UAAMC,UAAU,GAAG,IAAId,UAAJ,CAAe,CAAC,KAAKe,aAAN,EAAqB,KAAKX,IAAL,CAAUY,MAA/B,EAAuC,KAAKX,IAAL,CAAUW,MAAjD,CAAf,CAAnB;AACA,WAAKC,IAAL,GAAYH,UAAU,CAACI,SAAX,CAAqBC,IAArB,CAA0BL,UAA1B,CAAZ;AACA,WAAKM,SAAL,GAAiBN,UAAU,CAACO,cAAX,CAA0BF,IAA1B,CAA+BL,UAA/B,CAAjB;AACA,WAAKF,cAAL,GAJS,CAIc;AACxB;AACD;AACF;AACA;AACA;AACA;AACA;AACE;;AA/CF;AAAA;AAAA,WAkDE,qBAAY;AACV,YAAM,IAAIU,KAAJ,CAAU,4EAAV,CAAN;AACD,KApDH,CAoDI;;AApDJ;AAAA;AAAA,WAuDE,mBAAU,CAAE,CAvDd,CAuDe;;AAvDf;AAAA;AAAA,WA0DE,qBAAY,CAAE;AACd;AACF;AACA;AACA;AACA;AACA;;AAhEA;AAAA;AAAA,WAmEE,kBAAS;AACP,YAAM,IAAIA,KAAJ,CAAU,8DAAV,CAAN;AACD,KArEH,CAqEI;;AArEJ;AAAA;AAAA,WAwEE,kBAAS,CAAE,CAxEb,CAwEc;AACZ;;AAzEF;AAAA;AAAA,WA4EE,uBAAc,CAAE;AA5ElB;;AAAA;AAAA","sourcesContent":["\"use strict\";\n\n/**\n * Core plugin logic that all plugins share.\n *\n * BasePlugin does not contain DOM rendering so it can be used for plugins\n * without a user interface.\n *\n * See `Plugin` for the extended version with Preact rendering for interfaces.\n */\nconst Translator = require('@uppy/utils/lib/Translator');\n\nmodule.exports = class BasePlugin {\n  constructor(uppy, opts = {}) {\n    this.uppy = uppy;\n    this.opts = opts;\n  }\n\n  getPluginState() {\n    const {\n      plugins\n    } = this.uppy.getState();\n    return plugins[this.id] || {};\n  }\n\n  setPluginState(update) {\n    const {\n      plugins\n    } = this.uppy.getState();\n    this.uppy.setState({\n      plugins: { ...plugins,\n        [this.id]: { ...plugins[this.id],\n          ...update\n        }\n      }\n    });\n  }\n\n  setOptions(newOpts) {\n    this.opts = { ...this.opts,\n      ...newOpts\n    };\n    this.setPluginState(); // so that UI re-renders with new options\n\n    this.i18nInit();\n  }\n\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  }\n  /**\n   * Extendable methods\n   * ==================\n   * These methods are here to serve as an overview of the extendable methods as well as\n   * making them not conditional in use, such as `if (this.afterUpdate)`.\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  addTarget() {\n    throw new Error('Extend the addTarget method to add your plugin to another plugin\\'s target');\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  install() {} // eslint-disable-next-line class-methods-use-this\n\n\n  uninstall() {}\n  /**\n   * Called when plugin is mounted, whether in DOM or into another plugin.\n   * Needed because sometimes plugins are mounted separately/after `install`,\n   * so this.el and this.parent might not be available in `install`.\n   * This is the case with @uppy/react plugins, for example.\n   */\n\n\n  render() {\n    throw new Error('Extend the render method to add your plugin to a DOM element');\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  update() {} // Called after every state update, after everything's mounted. Debounced.\n  // eslint-disable-next-line class-methods-use-this\n\n\n  afterUpdate() {}\n\n};"]},"metadata":{},"sourceType":"script"}