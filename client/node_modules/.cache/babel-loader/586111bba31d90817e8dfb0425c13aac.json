{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar DashboardPlugin = require('@uppy/dashboard');\n\nvar basePropTypes = require('./propTypes').dashboard;\n\nvar getHTMLProps = require('./getHTMLProps');\n\nvar nonHtmlPropsHaveChanged = require('./nonHtmlPropsHaveChanged');\n\nvar h = React.createElement;\n/**\n * React Component that renders a Dashboard for an Uppy instance in a Modal\n * dialog. Visibility of the Modal is toggled using the `open` prop.\n */\n\nvar DashboardModal = /*#__PURE__*/function (_React$Component) {\n  _inherits(DashboardModal, _React$Component);\n\n  var _super = _createSuper(DashboardModal);\n\n  function DashboardModal() {\n    _classCallCheck(this, DashboardModal);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DashboardModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.installPlugin();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.uppy !== this.props.uppy) {\n        this.uninstallPlugin(prevProps);\n        this.installPlugin();\n      } else if (nonHtmlPropsHaveChanged(this, prevProps)) {\n        var options = _objectSpread(_objectSpread({}, this.props), {}, {\n          onRequestCloseModal: this.props.onRequestClose\n        });\n\n        delete options.uppy;\n        this.plugin.setOptions(options);\n      }\n\n      if (prevProps.open && !this.props.open) {\n        this.plugin.closeModal();\n      } else if (!prevProps.open && this.props.open) {\n        this.plugin.openModal();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.uninstallPlugin();\n    }\n  }, {\n    key: \"installPlugin\",\n    value: function installPlugin() {\n      var uppy = this.props.uppy;\n\n      var options = _objectSpread(_objectSpread({\n        id: 'react:DashboardModal'\n      }, this.props), {}, {\n        onRequestCloseModal: this.props.onRequestClose\n      });\n\n      if (!options.target) {\n        options.target = this.container;\n      }\n\n      delete options.uppy;\n      uppy.use(DashboardPlugin, options);\n      this.plugin = uppy.getPlugin(options.id);\n\n      if (this.props.open) {\n        this.plugin.openModal();\n      }\n    }\n  }, {\n    key: \"uninstallPlugin\",\n    value: function uninstallPlugin() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var uppy = props.uppy;\n      uppy.removePlugin(this.plugin);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      // TODO: stop exposing `validProps` as a public property and rename it to `htmlProps`\n      this.validProps = getHTMLProps(this.props);\n      return h('div', _objectSpread({\n        ref: function ref(container) {\n          _this.container = container;\n        }\n      }, this.validProps));\n    }\n  }]);\n\n  return DashboardModal;\n}(React.Component);\n\nDashboardModal.propTypes = _objectSpread({\n  target: typeof window !== 'undefined' ? PropTypes.instanceOf(window.HTMLElement) : PropTypes.any,\n  open: PropTypes.bool,\n  onRequestClose: PropTypes.func,\n  closeModalOnClickOutside: PropTypes.bool,\n  disablePageScrollWhenModalOpen: PropTypes.bool\n}, basePropTypes);\nmodule.exports = DashboardModal;","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/react/lib/DashboardModal.js"],"names":["React","require","PropTypes","DashboardPlugin","basePropTypes","dashboard","getHTMLProps","nonHtmlPropsHaveChanged","h","createElement","DashboardModal","installPlugin","prevProps","uppy","props","uninstallPlugin","options","onRequestCloseModal","onRequestClose","plugin","setOptions","open","closeModal","openModal","id","target","container","use","getPlugin","removePlugin","validProps","ref","Component","propTypes","window","instanceOf","HTMLElement","any","bool","func","closeModalOnClickOutside","disablePageScrollWhenModalOpen","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst React = require('react');\n\nconst PropTypes = require('prop-types');\n\nconst DashboardPlugin = require('@uppy/dashboard');\n\nconst basePropTypes = require('./propTypes').dashboard;\n\nconst getHTMLProps = require('./getHTMLProps');\n\nconst nonHtmlPropsHaveChanged = require('./nonHtmlPropsHaveChanged');\n\nconst h = React.createElement;\n/**\n * React Component that renders a Dashboard for an Uppy instance in a Modal\n * dialog. Visibility of the Modal is toggled using the `open` prop.\n */\n\nclass DashboardModal extends React.Component {\n  componentDidMount() {\n    this.installPlugin();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.uppy !== this.props.uppy) {\n      this.uninstallPlugin(prevProps);\n      this.installPlugin();\n    } else if (nonHtmlPropsHaveChanged(this, prevProps)) {\n      const options = { ...this.props,\n        onRequestCloseModal: this.props.onRequestClose\n      };\n      delete options.uppy;\n      this.plugin.setOptions(options);\n    }\n\n    if (prevProps.open && !this.props.open) {\n      this.plugin.closeModal();\n    } else if (!prevProps.open && this.props.open) {\n      this.plugin.openModal();\n    }\n  }\n\n  componentWillUnmount() {\n    this.uninstallPlugin();\n  }\n\n  installPlugin() {\n    const {\n      uppy\n    } = this.props;\n    const options = {\n      id: 'react:DashboardModal',\n      ...this.props,\n      onRequestCloseModal: this.props.onRequestClose\n    };\n\n    if (!options.target) {\n      options.target = this.container;\n    }\n\n    delete options.uppy;\n    uppy.use(DashboardPlugin, options);\n    this.plugin = uppy.getPlugin(options.id);\n\n    if (this.props.open) {\n      this.plugin.openModal();\n    }\n  }\n\n  uninstallPlugin(props = this.props) {\n    const {\n      uppy\n    } = props;\n    uppy.removePlugin(this.plugin);\n  }\n\n  render() {\n    // TODO: stop exposing `validProps` as a public property and rename it to `htmlProps`\n    this.validProps = getHTMLProps(this.props);\n    return h('div', {\n      ref: container => {\n        this.container = container;\n      },\n      ...this.validProps\n    });\n  }\n\n}\n\nDashboardModal.propTypes = {\n  target: typeof window !== 'undefined' ? PropTypes.instanceOf(window.HTMLElement) : PropTypes.any,\n  open: PropTypes.bool,\n  onRequestClose: PropTypes.func,\n  closeModalOnClickOutside: PropTypes.bool,\n  disablePageScrollWhenModalOpen: PropTypes.bool,\n  ...basePropTypes\n};\nmodule.exports = DashboardModal;"]},"metadata":{},"sourceType":"script"}