{"ast":null,"code":"/* global AggregateError */\n'use strict';\n\nlet _Symbol$for, _Symbol$for2;\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n\n  return receiver;\n}\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\n\nconst Translator = require('@uppy/utils/lib/Translator');\n\nconst ee = require('namespace-emitter');\n\nconst {\n  nanoid\n} = require('nanoid');\n\nconst throttle = require('lodash.throttle');\n\nconst prettierBytes = require('@transloadit/prettier-bytes');\n\nconst match = require('mime-match');\n\nconst DefaultStore = require('@uppy/store-default');\n\nconst getFileType = require('@uppy/utils/lib/getFileType');\n\nconst getFileNameAndExtension = require('@uppy/utils/lib/getFileNameAndExtension');\n\nconst generateFileID = require('@uppy/utils/lib/generateFileID');\n\nconst supportsUploadProgress = require('./supportsUploadProgress');\n\nconst getFileName = require('./getFileName');\n\nconst {\n  justErrorsLogger,\n  debugLogger\n} = require('./loggers'); // Exported from here.\n\n\nclass RestrictionError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.isRestriction = true;\n  }\n\n}\n\nif (typeof AggregateError === 'undefined') {\n  // eslint-disable-next-line no-global-assign\n  globalThis.AggregateError = class AggregateError extends Error {\n    constructor(message, errors) {\n      super(message);\n      this.errors = errors;\n    }\n\n  };\n}\n\nclass AggregateRestrictionError extends AggregateError {\n  constructor(...args) {\n    super(...args);\n    this.isRestriction = true;\n  }\n\n}\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\n\n\nvar _plugins = /*#__PURE__*/_classPrivateFieldLooseKey(\"plugins\");\n\nvar _storeUnsubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"storeUnsubscribe\");\n\nvar _emitter = /*#__PURE__*/_classPrivateFieldLooseKey(\"emitter\");\n\nvar _preProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"preProcessors\");\n\nvar _uploaders = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploaders\");\n\nvar _postProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"postProcessors\");\n\nvar _checkRestrictions = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRestrictions\");\n\nvar _checkMinNumberOfFiles = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkMinNumberOfFiles\");\n\nvar _checkRequiredMetaFields = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRequiredMetaFields\");\n\nvar _showOrLogErrorAndThrow = /*#__PURE__*/_classPrivateFieldLooseKey(\"showOrLogErrorAndThrow\");\n\nvar _assertNewUploadAllowed = /*#__PURE__*/_classPrivateFieldLooseKey(\"assertNewUploadAllowed\");\n\nvar _checkAndCreateFileStateObject = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkAndCreateFileStateObject\");\n\nvar _startIfAutoProceed = /*#__PURE__*/_classPrivateFieldLooseKey(\"startIfAutoProceed\");\n\nvar _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"addListeners\");\n\nvar _updateOnlineStatus = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateOnlineStatus\");\n\nvar _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"createUpload\");\n\nvar _getUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"getUpload\");\n\nvar _removeUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"removeUpload\");\n\nvar _runUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"runUpload\");\n\n_Symbol$for = Symbol.for('uppy test: getPlugins');\n_Symbol$for2 = Symbol.for('uppy test: createUpload');\n\nclass Uppy {\n  // eslint-disable-next-line global-require\n\n  /** @type {Record<string, BasePlugin[]>} */\n\n  /**\n   * Instantiate Uppy\n   *\n   * @param {object} opts — Uppy options\n   */\n  constructor(_opts) {\n    Object.defineProperty(this, _runUpload, {\n      value: _runUpload2\n    });\n    Object.defineProperty(this, _removeUpload, {\n      value: _removeUpload2\n    });\n    Object.defineProperty(this, _getUpload, {\n      value: _getUpload2\n    });\n    Object.defineProperty(this, _createUpload, {\n      value: _createUpload2\n    });\n    Object.defineProperty(this, _addListeners, {\n      value: _addListeners2\n    });\n    Object.defineProperty(this, _startIfAutoProceed, {\n      value: _startIfAutoProceed2\n    });\n    Object.defineProperty(this, _checkAndCreateFileStateObject, {\n      value: _checkAndCreateFileStateObject2\n    });\n    Object.defineProperty(this, _assertNewUploadAllowed, {\n      value: _assertNewUploadAllowed2\n    });\n    Object.defineProperty(this, _showOrLogErrorAndThrow, {\n      value: _showOrLogErrorAndThrow2\n    });\n    Object.defineProperty(this, _checkRequiredMetaFields, {\n      value: _checkRequiredMetaFields2\n    });\n    Object.defineProperty(this, _checkMinNumberOfFiles, {\n      value: _checkMinNumberOfFiles2\n    });\n    Object.defineProperty(this, _checkRestrictions, {\n      value: _checkRestrictions2\n    });\n    Object.defineProperty(this, _plugins, {\n      writable: true,\n      value: Object.create(null)\n    });\n    Object.defineProperty(this, _storeUnsubscribe, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _emitter, {\n      writable: true,\n      value: ee()\n    });\n    Object.defineProperty(this, _preProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _uploaders, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _postProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _updateOnlineStatus, {\n      writable: true,\n      value: this.updateOnlineStatus.bind(this)\n    });\n    this.defaultLocale = {\n      strings: {\n        addBulkFilesFailed: {\n          0: 'Failed to add %{smart_count} file due to an internal error',\n          1: 'Failed to add %{smart_count} files due to internal errors'\n        },\n        youCanOnlyUploadX: {\n          0: 'You can only upload %{smart_count} file',\n          1: 'You can only upload %{smart_count} files'\n        },\n        youHaveToAtLeastSelectX: {\n          0: 'You have to select at least %{smart_count} file',\n          1: 'You have to select at least %{smart_count} files'\n        },\n        exceedsSize: '%{file} exceeds maximum allowed size of %{size}',\n        missingRequiredMetaField: 'Missing required meta fields',\n        missingRequiredMetaFieldOnFile: 'Missing required meta fields in %{fileName}',\n        inferiorSize: 'This file is smaller than the allowed size of %{size}',\n        youCanOnlyUploadFileTypes: 'You can only upload: %{types}',\n        noMoreFilesAllowed: 'Cannot add more files',\n        noDuplicates: 'Cannot add the duplicate file \\'%{fileName}\\', it already exists',\n        companionError: 'Connection with Companion failed',\n        authAborted: 'Authentication aborted',\n        companionUnauthorizeHint: 'To unauthorize to your %{provider} account, please go to %{url}',\n        failedToUpload: 'Failed to upload %{file}',\n        noInternetConnection: 'No Internet connection',\n        connectedToInternet: 'Connected to the Internet',\n        // Strings for remote providers\n        noFilesFound: 'You have no files or folders here',\n        selectX: {\n          0: 'Select %{smart_count}',\n          1: 'Select %{smart_count}'\n        },\n        allFilesFromFolderNamed: 'All files from folder %{name}',\n        openFolderNamed: 'Open folder %{name}',\n        cancel: 'Cancel',\n        logOut: 'Log out',\n        filter: 'Filter',\n        resetFilter: 'Reset filter',\n        loading: 'Loading...',\n        authenticateWithTitle: 'Please authenticate with %{pluginName} to select files',\n        authenticateWith: 'Connect to %{pluginName}',\n        signInWithGoogle: 'Sign in with Google',\n        searchImages: 'Search for images',\n        enterTextToSearch: 'Enter text to search for images',\n        backToSearch: 'Back to Search',\n        emptyFolderAdded: 'No files were added from empty folder',\n        folderAlreadyAdded: 'The folder \"%{folder}\" was already added',\n        folderAdded: {\n          0: 'Added %{smart_count} file from %{folder}',\n          1: 'Added %{smart_count} files from %{folder}'\n        }\n      }\n    };\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: false,\n\n      /**\n       * @deprecated The method should not be used\n       */\n      allowMultipleUploads: true,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: {\n        maxFileSize: null,\n        minFileSize: null,\n        maxTotalFileSize: null,\n        maxNumberOfFiles: null,\n        minNumberOfFiles: null,\n        allowedFileTypes: null,\n        requiredMetaFields: []\n      },\n      meta: {},\n      onBeforeFileAdded: currentFile => currentFile,\n      onBeforeUpload: files => files,\n      store: DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000\n    }; // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n\n    this.opts = { ...defaultOptions,\n      ..._opts,\n      restrictions: { ...defaultOptions.restrictions,\n        ...(_opts && _opts.restrictions)\n      }\n    }; // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions\n\n    if (_opts && _opts.logger && _opts.debug) {\n      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');\n    } else if (_opts && _opts.debug) {\n      this.opts.logger = debugLogger;\n    }\n\n    this.log(`Using Core v${this.constructor.VERSION}`);\n\n    if (this.opts.restrictions.allowedFileTypes && this.opts.restrictions.allowedFileTypes !== null && !Array.isArray(this.opts.restrictions.allowedFileTypes)) {\n      throw new TypeError('`restrictions.allowedFileTypes` must be an array');\n    }\n\n    this.i18nInit(); // ___Why throttle at 500ms?\n    //    - We must throttle at >250ms for superfocus in Dashboard to work well\n    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n    //    - We must throttle at around >500ms to avoid performance lags.\n    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n\n    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, {\n      leading: true,\n      trailing: true\n    });\n    this.store = this.opts.store;\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      allowNewUpload: true,\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: { ...this.opts.meta\n      },\n      info: [],\n      recoveredState: null\n    });\n    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe] = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch);\n      this.updateAll(nextState);\n    }); // Exposing uppy object on window for debugging and testing\n\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window[this.opts.id] = this;\n    }\n\n    _classPrivateFieldLooseBase(this, _addListeners)[_addListeners]();\n  }\n\n  emit(event, ...args) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].emit(event, ...args);\n  }\n\n  on(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, callback);\n\n    return this;\n  }\n\n  once(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(event, callback);\n\n    return this;\n  }\n\n  off(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, callback);\n\n    return this;\n  }\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n\n\n  updateAll(state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state);\n    });\n  }\n  /**\n   * Updates state with a patch\n   *\n   * @param {object} patch {foo: 'bar'}\n   */\n\n\n  setState(patch) {\n    this.store.setState(patch);\n  }\n  /**\n   * Returns current state.\n   *\n   * @returns {object}\n   */\n\n\n  getState() {\n    return this.store.getState();\n  }\n  /**\n   * Back compat for when uppy.state is used instead of uppy.getState().\n   *\n   * @deprecated\n   */\n\n\n  get state() {\n    // Here, state is a non-enumerable property.\n    return this.getState();\n  }\n  /**\n   * Shorthand to set state for a specific file.\n   */\n\n\n  setFileState(fileID, state) {\n    if (!this.getState().files[fileID]) {\n      throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`);\n    }\n\n    this.setState({\n      files: { ...this.getState().files,\n        [fileID]: { ...this.getState().files[fileID],\n          ...state\n        }\n      }\n    });\n  }\n\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.locale = translator.locale;\n  }\n\n  setOptions(newOpts) {\n    this.opts = { ...this.opts,\n      ...newOpts,\n      restrictions: { ...this.opts.restrictions,\n        ...(newOpts && newOpts.restrictions)\n      }\n    };\n\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta);\n    }\n\n    this.i18nInit();\n\n    if (newOpts.locale) {\n      this.iteratePlugins(plugin => {\n        plugin.setOptions();\n      });\n    } // Note: this is not the preact `setState`, it's an internal function that has the same name.\n\n\n    this.setState(); // so that UI re-renders with new options\n  }\n\n  resetProgress() {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: null\n    };\n    const files = { ...this.getState().files\n    };\n    const updatedFiles = {};\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = { ...files[fileID]\n      };\n      updatedFile.progress = { ...updatedFile.progress,\n        ...defaultProgress\n      };\n      updatedFiles[fileID] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0\n    });\n    this.emit('reset-progress');\n  }\n\n  addPreProcessor(fn) {\n    _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].add(fn);\n  }\n\n  removePreProcessor(fn) {\n    return _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].delete(fn);\n  }\n\n  addPostProcessor(fn) {\n    _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].add(fn);\n  }\n\n  removePostProcessor(fn) {\n    return _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].delete(fn);\n  }\n\n  addUploader(fn) {\n    _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].add(fn);\n  }\n\n  removeUploader(fn) {\n    return _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].delete(fn);\n  }\n\n  setMeta(data) {\n    const updatedMeta = { ...this.getState().meta,\n      ...data\n    };\n    const updatedFiles = { ...this.getState().files\n    };\n    Object.keys(updatedFiles).forEach(fileID => {\n      updatedFiles[fileID] = { ...updatedFiles[fileID],\n        meta: { ...updatedFiles[fileID].meta,\n          ...data\n        }\n      };\n    });\n    this.log('Adding metadata:');\n    this.log(data);\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles\n    });\n  }\n\n  setFileMeta(fileID, data) {\n    const updatedFiles = { ...this.getState().files\n    };\n\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that has been removed: ', fileID);\n      return;\n    }\n\n    const newMeta = { ...updatedFiles[fileID].meta,\n      ...data\n    };\n    updatedFiles[fileID] = { ...updatedFiles[fileID],\n      meta: newMeta\n    };\n    this.setState({\n      files: updatedFiles\n    });\n  }\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n\n\n  getFile(fileID) {\n    return this.getState().files[fileID];\n  }\n  /**\n   * Get all files in an array.\n   */\n\n\n  getFiles() {\n    const {\n      files\n    } = this.getState();\n    return Object.values(files);\n  }\n\n  getObjectOfFilesPerState() {\n    const {\n      files: filesObject,\n      totalProgress,\n      error\n    } = this.getState();\n    const files = Object.values(filesObject);\n    const inProgressFiles = files.filter(({\n      progress\n    }) => !progress.uploadComplete && progress.uploadStarted);\n    const newFiles = files.filter(file => !file.progress.uploadStarted);\n    const startedFiles = files.filter(file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess);\n    const uploadStartedFiles = files.filter(file => file.progress.uploadStarted);\n    const pausedFiles = files.filter(file => file.isPaused);\n    const completeFiles = files.filter(file => file.progress.uploadComplete);\n    const erroredFiles = files.filter(file => file.error);\n    const inProgressNotPausedFiles = inProgressFiles.filter(file => !file.isPaused);\n    const processingFiles = files.filter(file => file.progress.preprocess || file.progress.postprocess);\n    return {\n      newFiles,\n      startedFiles,\n      uploadStartedFiles,\n      pausedFiles,\n      completeFiles,\n      erroredFiles,\n      inProgressFiles,\n      inProgressNotPausedFiles,\n      processingFiles,\n      isUploadStarted: uploadStartedFiles.length > 0,\n      isAllComplete: totalProgress === 100 && completeFiles.length === files.length && processingFiles.length === 0,\n      isAllErrored: !!error && erroredFiles.length === files.length,\n      isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,\n      isUploadInProgress: inProgressFiles.length > 0,\n      isSomeGhost: files.some(file => file.isGhost)\n    };\n  }\n  /**\n   * A public wrapper for _checkRestrictions — checks if a file passes a set of restrictions.\n   * For use in UI pluigins (like Providers), to disallow selecting files that won’t pass restrictions.\n   *\n   * @param {object} file object to check\n   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n   * @returns {object} { result: true/false, reason: why file didn’t pass restrictions }\n   */\n\n\n  validateRestrictions(file, files) {\n    try {\n      _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](file, files);\n\n      return {\n        result: true\n      };\n    } catch (err) {\n      return {\n        result: false,\n        reason: err.message\n      };\n    }\n  }\n  /**\n   * Check if file passes a set of restrictions set in options: maxFileSize, minFileSize,\n   * maxNumberOfFiles and allowedFileTypes.\n   *\n   * @param {object} file object to check\n   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n   * @private\n   */\n\n\n  checkIfFileAlreadyExists(fileID) {\n    const {\n      files\n    } = this.getState();\n\n    if (files[fileID] && !files[fileID].isGhost) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   *\n   * Note this is extremely side-effectful and should only be done when a file state object\n   * will be added to state immediately afterward!\n   *\n   * The `files` value is passed in because it may be updated by the caller without updating the store.\n   */\n\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   *\n   * @param {object} file object to add\n   * @returns {string} id for the added file\n   */\n\n\n  addFile(file) {\n    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](file);\n\n    const {\n      files\n    } = this.getState();\n\n    let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, file); // Users are asked to re-select recovered files without data,\n    // and to keep the progress, meta and everthing else, we only replace said data\n\n\n    if (files[newFile.id] && files[newFile.id].isGhost) {\n      newFile = { ...files[newFile.id],\n        data: file.data,\n        isGhost: false\n      };\n      this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`);\n    }\n\n    this.setState({\n      files: { ...files,\n        [newFile.id]: newFile\n      }\n    });\n    this.emit('file-added', newFile);\n    this.emit('files-added', [newFile]);\n    this.log(`Added file: ${newFile.name}, ${newFile.id}, mime type: ${newFile.type}`);\n\n    _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n\n    return newFile.id;\n  }\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */\n\n\n  addFiles(fileDescriptors) {\n    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](); // create a copy of the files object only once\n\n\n    const files = { ...this.getState().files\n    };\n    const newFiles = [];\n    const errors = [];\n\n    for (let i = 0; i < fileDescriptors.length; i++) {\n      try {\n        let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, fileDescriptors[i]); // Users are asked to re-select recovered files without data,\n        // and to keep the progress, meta and everthing else, we only replace said data\n\n\n        if (files[newFile.id] && files[newFile.id].isGhost) {\n          newFile = { ...files[newFile.id],\n            data: fileDescriptors[i].data,\n            isGhost: false\n          };\n          this.log(`Replaced blob in a ghost file: ${newFile.name}, ${newFile.id}`);\n        }\n\n        files[newFile.id] = newFile;\n        newFiles.push(newFile);\n      } catch (err) {\n        if (!err.isRestriction) {\n          errors.push(err);\n        }\n      }\n    }\n\n    this.setState({\n      files\n    });\n    newFiles.forEach(newFile => {\n      this.emit('file-added', newFile);\n    });\n    this.emit('files-added', newFiles);\n\n    if (newFiles.length > 5) {\n      this.log(`Added batch of ${newFiles.length} files`);\n    } else {\n      Object.keys(newFiles).forEach(fileID => {\n        this.log(`Added file: ${newFiles[fileID].name}\\n id: ${newFiles[fileID].id}\\n type: ${newFiles[fileID].type}`);\n      });\n    }\n\n    if (newFiles.length > 0) {\n      _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n    }\n\n    if (errors.length > 0) {\n      let message = 'Multiple errors occurred while adding files:\\n';\n      errors.forEach(subError => {\n        message += `\\n * ${subError.message}`;\n      });\n      this.info({\n        message: this.i18n('addBulkFilesFailed', {\n          smart_count: errors.length\n        }),\n        details: message\n      }, 'error', this.opts.infoTimeout);\n\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(errors, message);\n      } else {\n        const err = new Error(message);\n        err.errors = errors;\n        throw err;\n      }\n    }\n  }\n\n  removeFiles(fileIDs, reason) {\n    const {\n      files,\n      currentUploads\n    } = this.getState();\n    const updatedFiles = { ...files\n    };\n    const updatedUploads = { ...currentUploads\n    };\n    const removedFiles = Object.create(null);\n    fileIDs.forEach(fileID => {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID];\n        delete updatedFiles[fileID];\n      }\n    }); // Remove files from the `fileIDs` list in each upload.\n\n    function fileIsNotRemoved(uploadFileID) {\n      return removedFiles[uploadFileID] === undefined;\n    }\n\n    Object.keys(updatedUploads).forEach(uploadID => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved); // Remove the upload if no files are associated with it anymore.\n\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID];\n        return;\n      }\n\n      updatedUploads[uploadID] = { ...currentUploads[uploadID],\n        fileIDs: newFileIDs\n      };\n    });\n    const stateUpdate = {\n      currentUploads: updatedUploads,\n      files: updatedFiles\n    }; // If all files were removed - allow new uploads,\n    // and clear recoveredState\n\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true;\n      stateUpdate.error = null;\n      stateUpdate.recoveredState = null;\n    }\n\n    this.setState(stateUpdate);\n    this.calculateTotalProgress();\n    const removedFileIDs = Object.keys(removedFiles);\n    removedFileIDs.forEach(fileID => {\n      this.emit('file-removed', removedFiles[fileID], reason);\n    });\n\n    if (removedFileIDs.length > 5) {\n      this.log(`Removed ${removedFileIDs.length} files`);\n    } else {\n      this.log(`Removed files: ${removedFileIDs.join(', ')}`);\n    }\n  }\n\n  removeFile(fileID, reason = null) {\n    this.removeFiles([fileID], reason);\n  }\n\n  pauseResume(fileID) {\n    if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {\n      return undefined;\n    }\n\n    const wasPaused = this.getFile(fileID).isPaused || false;\n    const isPaused = !wasPaused;\n    this.setFileState(fileID, {\n      isPaused\n    });\n    this.emit('upload-pause', fileID, isPaused);\n    return isPaused;\n  }\n\n  pauseAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: true\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('pause-all');\n  }\n\n  resumeAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: false,\n        error: null\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('resume-all');\n  }\n\n  retryAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error;\n    });\n    filesToRetry.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: false,\n        error: null\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      error: null\n    });\n    this.emit('retry-all', filesToRetry);\n\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: []\n      });\n    }\n\n    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](filesToRetry, {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n    });\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n\n  cancelAll() {\n    this.emit('cancel-all');\n    const {\n      files\n    } = this.getState();\n    const fileIDs = Object.keys(files);\n\n    if (fileIDs.length) {\n      this.removeFiles(fileIDs, 'cancel-all');\n    }\n\n    this.setState({\n      totalProgress: 0,\n      error: null,\n      recoveredState: null\n    });\n  }\n\n  retryUpload(fileID) {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false\n    });\n    this.emit('upload-retry', fileID);\n\n    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]([fileID], {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n    });\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n\n  reset() {\n    this.cancelAll();\n  }\n\n  logout() {\n    this.iteratePlugins(plugin => {\n      if (plugin.provider && plugin.provider.logout) {\n        plugin.provider.logout();\n      }\n    });\n  }\n\n  calculateProgress(file, data) {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    } // bytesTotal may be null or zero; in that case we can't divide by it\n\n\n    const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0;\n    this.setFileState(file.id, {\n      progress: { ...this.getFile(file.id).progress,\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: canHavePercentage ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0\n      }\n    });\n    this.calculateTotalProgress();\n  }\n\n  calculateTotalProgress() {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = this.getFiles();\n    const inProgress = files.filter(file => {\n      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n    });\n\n    if (inProgress.length === 0) {\n      this.emit('progress', 0);\n      this.setState({\n        totalProgress: 0\n      });\n      return;\n    }\n\n    const sizedFiles = inProgress.filter(file => file.progress.bytesTotal != null);\n    const unsizedFiles = inProgress.filter(file => file.progress.bytesTotal == null);\n\n    if (sizedFiles.length === 0) {\n      const progressMax = inProgress.length * 100;\n      const currentProgress = unsizedFiles.reduce((acc, file) => {\n        return acc + file.progress.percentage;\n      }, 0);\n      const totalProgress = Math.round(currentProgress / progressMax * 100);\n      this.setState({\n        totalProgress\n      });\n      return;\n    }\n\n    let totalSize = sizedFiles.reduce((acc, file) => {\n      return acc + file.progress.bytesTotal;\n    }, 0);\n    const averageSize = totalSize / sizedFiles.length;\n    totalSize += averageSize * unsizedFiles.length;\n    let uploadedSize = 0;\n    sizedFiles.forEach(file => {\n      uploadedSize += file.progress.bytesUploaded;\n    });\n    unsizedFiles.forEach(file => {\n      uploadedSize += averageSize * (file.progress.percentage || 0) / 100;\n    });\n    let totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100); // hot fix, because:\n    // uploadedSize ended up larger than totalSize, resulting in 1325% total\n\n    if (totalProgress > 100) {\n      totalProgress = 100;\n    }\n\n    this.setState({\n      totalProgress\n    });\n    this.emit('progress', totalProgress);\n  }\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n\n\n  updateOnlineStatus() {\n    const online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;\n\n    if (!online) {\n      this.emit('is-offline');\n      this.info(this.i18n('noInternetConnection'), 'error', 0);\n      this.wasOffline = true;\n    } else {\n      this.emit('is-online');\n\n      if (this.wasOffline) {\n        this.emit('back-online');\n        this.info(this.i18n('connectedToInternet'), 'success', 3000);\n        this.wasOffline = false;\n      }\n    }\n  }\n\n  getID() {\n    return this.opts.id;\n  }\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {object} Plugin object\n   * @param {object} [opts] object with options to be passed to Plugin\n   * @returns {object} self for chaining\n   */\n  // eslint-disable-next-line no-shadow\n\n\n  use(Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` + ' Please verify that the plugin was imported and spelled correctly.';\n      throw new TypeError(msg);\n    } // Instantiate\n\n\n    const plugin = new Plugin(this, opts);\n    const pluginId = plugin.id;\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id');\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type');\n    }\n\n    const existsPluginAlready = this.getPlugin(pluginId);\n\n    if (existsPluginAlready) {\n      const msg = `Already found a plugin named '${existsPluginAlready.id}'. ` + `Tried to use: '${pluginId}'.\\n` + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';\n      throw new Error(msg);\n    }\n\n    if (Plugin.VERSION) {\n      this.log(`Using ${pluginId} v${Plugin.VERSION}`);\n    }\n\n    if (plugin.type in _classPrivateFieldLooseBase(this, _plugins)[_plugins]) {\n      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type].push(plugin);\n    } else {\n      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type] = [plugin];\n    }\n\n    plugin.install();\n    return this;\n  }\n  /**\n   * Find one Plugin by name.\n   *\n   * @param {string} id plugin id\n   * @returns {BasePlugin|undefined}\n   */\n\n\n  getPlugin(id) {\n    for (const plugins of Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins])) {\n      const foundPlugin = plugins.find(plugin => plugin.id === id);\n      if (foundPlugin != null) return foundPlugin;\n    }\n\n    return undefined;\n  }\n\n  [_Symbol$for](type) {\n    return _classPrivateFieldLooseBase(this, _plugins)[_plugins][type];\n  }\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param {Function} method that will be run on each plugin\n   */\n\n\n  iteratePlugins(method) {\n    Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins]).flat(1).forEach(method);\n  }\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n\n\n  removePlugin(instance) {\n    this.log(`Removing plugin ${instance.id}`);\n    this.emit('plugin-remove', instance);\n\n    if (instance.uninstall) {\n      instance.uninstall();\n    }\n\n    const list = _classPrivateFieldLooseBase(this, _plugins)[_plugins][instance.type]; // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n\n\n    const index = list.findIndex(item => item.id === instance.id);\n\n    if (index !== -1) {\n      list.splice(index, 1);\n    }\n\n    const state = this.getState();\n    const updatedState = {\n      plugins: { ...state.plugins,\n        [instance.id]: undefined\n      }\n    };\n    this.setState(updatedState);\n  }\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n\n\n  close() {\n    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`);\n    this.reset();\n\n    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe]();\n\n    this.iteratePlugins(plugin => {\n      this.removePlugin(plugin);\n    });\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n      window.removeEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    }\n  }\n\n  hideInfo() {\n    const {\n      info\n    } = this.getState();\n    this.setState({\n      info: info.slice(1)\n    });\n    this.emit('info-hidden');\n  }\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   *\n   * @param {string | object} message Message to be displayed by the informer\n   * @param {string} [type]\n   * @param {number} [duration]\n   */\n\n\n  info(message, type = 'info', duration = 3000) {\n    const isComplexMessage = typeof message === 'object';\n    this.setState({\n      info: [...this.getState().info, {\n        type,\n        message: isComplexMessage ? message.message : message,\n        details: isComplexMessage ? message.details : null\n      }]\n    });\n    setTimeout(() => this.hideInfo(), duration);\n    this.emit('info-visible');\n  }\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   *\n   * @param {string|object} message to log\n   * @param {string} [type] optional `error` or `warning`\n   */\n\n\n  log(message, type) {\n    const {\n      logger\n    } = this.opts;\n\n    switch (type) {\n      case 'error':\n        logger.error(message);\n        break;\n\n      case 'warning':\n        logger.warn(message);\n        break;\n\n      default:\n        logger.debug(message);\n        break;\n    }\n  }\n  /**\n   * Restore an upload by its ID.\n   */\n\n\n  restore(uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`);\n\n    if (!this.getState().currentUploads[uploadID]) {\n      _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n\n      return Promise.reject(new Error('Nonexistent upload'));\n    }\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @returns {string} ID of this upload.\n   */\n\n\n  [_Symbol$for2](...args) {\n    return _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](...args);\n  }\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */\n\n\n  addResultData(uploadID, data) {\n    if (!_classPrivateFieldLooseBase(this, _getUpload)[_getUpload](uploadID)) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n      return;\n    }\n\n    const {\n      currentUploads\n    } = this.getState();\n    const currentUpload = { ...currentUploads[uploadID],\n      result: { ...currentUploads[uploadID].result,\n        ...data\n      }\n    };\n    this.setState({\n      currentUploads: { ...currentUploads,\n        [uploadID]: currentUpload\n      }\n    });\n  }\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @returns {Promise}\n   */\n\n\n  upload() {\n    var _classPrivateFieldLoo;\n\n    if (!((_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _plugins)[_plugins].uploader) != null && _classPrivateFieldLoo.length)) {\n      this.log('No uploader type plugins are used', 'warning');\n    }\n\n    let {\n      files\n    } = this.getState();\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files);\n\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));\n    }\n\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult; // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n\n      this.setState({\n        files\n      });\n    }\n\n    return Promise.resolve().then(() => {\n      _classPrivateFieldLooseBase(this, _checkMinNumberOfFiles)[_checkMinNumberOfFiles](files);\n\n      _classPrivateFieldLooseBase(this, _checkRequiredMetaFields)[_checkRequiredMetaFields](files);\n    }).catch(err => {\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err);\n    }).then(() => {\n      const {\n        currentUploads\n      } = this.getState(); // get a list of files that are currently assigned to uploads\n\n      const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs);\n      const waitingFileIDs = [];\n      Object.keys(files).forEach(fileID => {\n        const file = this.getFile(fileID); // if the file hasn't started uploading and hasn't already been assigned to an upload..\n\n        if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {\n          waitingFileIDs.push(file.id);\n        }\n      });\n\n      const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](waitingFileIDs);\n\n      return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n    }).catch(err => {\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n        showInformer: false\n      });\n    });\n  }\n\n}\n\nfunction _checkRestrictions2(file, files = this.getFiles()) {\n  const {\n    maxFileSize,\n    minFileSize,\n    maxTotalFileSize,\n    maxNumberOfFiles,\n    allowedFileTypes\n  } = this.opts.restrictions;\n\n  if (maxNumberOfFiles) {\n    if (files.length + 1 > maxNumberOfFiles) {\n      throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', {\n        smart_count: maxNumberOfFiles\n      })}`);\n    }\n  }\n\n  if (allowedFileTypes) {\n    const isCorrectFileType = allowedFileTypes.some(type => {\n      // check if this is a mime-type\n      if (type.indexOf('/') > -1) {\n        if (!file.type) return false;\n        return match(file.type.replace(/;.*?$/, ''), type);\n      } // otherwise this is likely an extension\n\n\n      if (type[0] === '.' && file.extension) {\n        return file.extension.toLowerCase() === type.substr(1).toLowerCase();\n      }\n\n      return false;\n    });\n\n    if (!isCorrectFileType) {\n      const allowedFileTypesString = allowedFileTypes.join(', ');\n      throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {\n        types: allowedFileTypesString\n      }));\n    }\n  } // We can't check maxTotalFileSize if the size is unknown.\n\n\n  if (maxTotalFileSize && file.size != null) {\n    let totalFilesSize = 0;\n    totalFilesSize += file.size;\n    files.forEach(f => {\n      totalFilesSize += f.size;\n    });\n\n    if (totalFilesSize > maxTotalFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxTotalFileSize),\n        file: file.name\n      }));\n    }\n  } // We can't check maxFileSize if the size is unknown.\n\n\n  if (maxFileSize && file.size != null) {\n    if (file.size > maxFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxFileSize),\n        file: file.name\n      }));\n    }\n  } // We can't check minFileSize if the size is unknown.\n\n\n  if (minFileSize && file.size != null) {\n    if (file.size < minFileSize) {\n      throw new RestrictionError(this.i18n('inferiorSize', {\n        size: prettierBytes(minFileSize)\n      }));\n    }\n  }\n}\n\nfunction _checkMinNumberOfFiles2(files) {\n  const {\n    minNumberOfFiles\n  } = this.opts.restrictions;\n\n  if (Object.keys(files).length < minNumberOfFiles) {\n    throw new RestrictionError(`${this.i18n('youHaveToAtLeastSelectX', {\n      smart_count: minNumberOfFiles\n    })}`);\n  }\n}\n\nfunction _checkRequiredMetaFields2(files) {\n  const {\n    requiredMetaFields\n  } = this.opts.restrictions;\n  const {\n    hasOwnProperty\n  } = Object.prototype;\n  const errors = [];\n\n  for (const fileID of Object.keys(files)) {\n    const file = this.getFile(fileID);\n\n    for (let i = 0; i < requiredMetaFields.length; i++) {\n      if (!hasOwnProperty.call(file.meta, requiredMetaFields[i]) || file.meta[requiredMetaFields[i]] === '') {\n        const err = new RestrictionError(`${this.i18n('missingRequiredMetaFieldOnFile', {\n          fileName: file.name\n        })}`);\n        errors.push(err);\n\n        _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n          file,\n          showInformer: false,\n          throwErr: false\n        });\n      }\n    }\n  }\n\n  if (errors.length) {\n    throw new AggregateRestrictionError(`${this.i18n('missingRequiredMetaField')}`, errors);\n  }\n}\n\nfunction _showOrLogErrorAndThrow2(err, {\n  showInformer = true,\n  file = null,\n  throwErr = true\n} = {}) {\n  const message = typeof err === 'object' ? err.message : err;\n  const details = typeof err === 'object' && err.details ? err.details : ''; // Restriction errors should be logged, but not as errors,\n  // as they are expected and shown in the UI.\n\n  let logMessageWithDetails = message;\n\n  if (details) {\n    logMessageWithDetails += ` ${details}`;\n  }\n\n  if (err.isRestriction) {\n    this.log(logMessageWithDetails);\n    this.emit('restriction-failed', file, err);\n  } else {\n    this.log(logMessageWithDetails, 'error');\n  } // Sometimes informer has to be shown manually by the developer,\n  // for example, in `onBeforeFileAdded`.\n\n\n  if (showInformer) {\n    this.info({\n      message,\n      details\n    }, 'error', this.opts.infoTimeout);\n  }\n\n  if (throwErr) {\n    throw typeof err === 'object' ? err : new Error(err);\n  }\n}\n\nfunction _assertNewUploadAllowed2(file) {\n  const {\n    allowNewUpload\n  } = this.getState();\n\n  if (allowNewUpload === false) {\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError(this.i18n('noMoreFilesAllowed')), {\n      file\n    });\n  }\n}\n\nfunction _checkAndCreateFileStateObject2(files, fileDescriptor) {\n  const fileType = getFileType(fileDescriptor);\n  const fileName = getFileName(fileType, fileDescriptor);\n  const fileExtension = getFileNameAndExtension(fileName).extension;\n  const isRemote = Boolean(fileDescriptor.isRemote);\n  const fileID = generateFileID({ ...fileDescriptor,\n    type: fileType\n  });\n\n  if (this.checkIfFileAlreadyExists(fileID)) {\n    const error = new RestrictionError(this.i18n('noDuplicates', {\n      fileName\n    }));\n\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {\n      file: fileDescriptor\n    });\n  }\n\n  const meta = fileDescriptor.meta || {};\n  meta.name = fileName;\n  meta.type = fileType; // `null` means the size is unknown.\n\n  const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null;\n  let newFile = {\n    source: fileDescriptor.source || '',\n    id: fileID,\n    name: fileName,\n    extension: fileExtension || '',\n    meta: { ...this.getState().meta,\n      ...meta\n    },\n    type: fileType,\n    data: fileDescriptor.data,\n    progress: {\n      percentage: 0,\n      bytesUploaded: 0,\n      bytesTotal: size,\n      uploadComplete: false,\n      uploadStarted: null\n    },\n    size,\n    isRemote,\n    remote: fileDescriptor.remote || '',\n    preview: fileDescriptor.preview\n  };\n  const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files);\n\n  if (onBeforeFileAddedResult === false) {\n    // Don’t show UI info for this error, as it should be done by the developer\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.'), {\n      showInformer: false,\n      fileDescriptor\n    });\n  } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {\n    newFile = onBeforeFileAddedResult;\n  }\n\n  try {\n    const filesArray = Object.keys(files).map(i => files[i]);\n\n    _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](newFile, filesArray);\n  } catch (err) {\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n      file: newFile\n    });\n  }\n\n  return newFile;\n}\n\nfunction _startIfAutoProceed2() {\n  if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n    this.scheduledAutoProceed = setTimeout(() => {\n      this.scheduledAutoProceed = null;\n      this.upload().catch(err => {\n        if (!err.isRestriction) {\n          this.log(err.stack || err.message || err);\n        }\n      });\n    }, 4);\n  }\n}\n\nfunction _addListeners2() {\n  /**\n   * @param {Error} error\n   * @param {object} [file]\n   * @param {object} [response]\n   */\n  const errorHandler = (error, file, response) => {\n    let errorMsg = error.message || 'Unknown error';\n\n    if (error.details) {\n      errorMsg += ` ${error.details}`;\n    }\n\n    this.setState({\n      error: errorMsg\n    });\n\n    if (file != null && file.id in this.getState().files) {\n      this.setFileState(file.id, {\n        error: errorMsg,\n        response\n      });\n    }\n  };\n\n  this.on('error', errorHandler);\n  this.on('upload-error', (file, error, response) => {\n    errorHandler(error, file, response);\n\n    if (typeof error === 'object' && error.message) {\n      const newError = new Error(error.message);\n      newError.details = error.message;\n\n      if (error.details) {\n        newError.details += ` ${error.details}`;\n      }\n\n      newError.message = this.i18n('failedToUpload', {\n        file: file.name\n      });\n\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](newError, {\n        throwErr: false\n      });\n    } else {\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {\n        throwErr: false\n      });\n    }\n  });\n  this.on('upload', () => {\n    this.setState({\n      error: null\n    });\n  });\n  this.on('upload-started', file => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: {\n        uploadStarted: Date.now(),\n        uploadComplete: false,\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: file.size\n      }\n    });\n  });\n  this.on('upload-progress', this.calculateProgress);\n  this.on('upload-success', (file, uploadResp) => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    const currentProgress = this.getFile(file.id).progress;\n    this.setFileState(file.id, {\n      progress: { ...currentProgress,\n        postprocess: _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].size > 0 ? {\n          mode: 'indeterminate'\n        } : null,\n        uploadComplete: true,\n        percentage: 100,\n        bytesUploaded: currentProgress.bytesTotal\n      },\n      response: uploadResp,\n      uploadURL: uploadResp.uploadURL,\n      isPaused: false\n    }); // Remote providers sometimes don't tell us the file size,\n    // but we can know how many bytes we uploaded once the upload is complete.\n\n    if (file.size == null) {\n      this.setFileState(file.id, {\n        size: uploadResp.bytesUploaded || currentProgress.bytesTotal\n      });\n    }\n\n    this.calculateTotalProgress();\n  });\n  this.on('preprocess-progress', (file, progress) => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: { ...this.getFile(file.id).progress,\n        preprocess: progress\n      }\n    });\n  });\n  this.on('preprocess-complete', file => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    const files = { ...this.getState().files\n    };\n    files[file.id] = { ...files[file.id],\n      progress: { ...files[file.id].progress\n      }\n    };\n    delete files[file.id].progress.preprocess;\n    this.setState({\n      files\n    });\n  });\n  this.on('postprocess-progress', (file, progress) => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: { ...this.getState().files[file.id].progress,\n        postprocess: progress\n      }\n    });\n  });\n  this.on('postprocess-complete', file => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    const files = { ...this.getState().files\n    };\n    files[file.id] = { ...files[file.id],\n      progress: { ...files[file.id].progress\n      }\n    };\n    delete files[file.id].progress.postprocess;\n    this.setState({\n      files\n    });\n  });\n  this.on('restored', () => {\n    // Files may have changed--ensure progress is still accurate.\n    this.calculateTotalProgress();\n  }); // show informer if offline\n\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    window.addEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    setTimeout(_classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus], 3000);\n  }\n}\n\nfunction _createUpload2(fileIDs, opts = {}) {\n  // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`\n  const {\n    forceAllowNewUpload = false\n  } = opts;\n  const {\n    allowNewUpload,\n    currentUploads\n  } = this.getState();\n\n  if (!allowNewUpload && !forceAllowNewUpload) {\n    throw new Error('Cannot create a new upload: already uploading.');\n  }\n\n  const uploadID = nanoid();\n  this.emit('upload', {\n    id: uploadID,\n    fileIDs\n  });\n  this.setState({\n    allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,\n    currentUploads: { ...currentUploads,\n      [uploadID]: {\n        fileIDs,\n        step: 0,\n        result: {}\n      }\n    }\n  });\n  return uploadID;\n}\n\nfunction _getUpload2(uploadID) {\n  const {\n    currentUploads\n  } = this.getState();\n  return currentUploads[uploadID];\n}\n\nfunction _removeUpload2(uploadID) {\n  const currentUploads = { ...this.getState().currentUploads\n  };\n  delete currentUploads[uploadID];\n  this.setState({\n    currentUploads\n  });\n}\n\nasync function _runUpload2(uploadID) {\n  let {\n    currentUploads\n  } = this.getState();\n  let currentUpload = currentUploads[uploadID];\n  const restoreStep = currentUpload.step || 0;\n  const steps = [..._classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors], ..._classPrivateFieldLooseBase(this, _uploaders)[_uploaders], ..._classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors]];\n\n  try {\n    for (let step = restoreStep; step < steps.length; step++) {\n      if (!currentUpload) {\n        break;\n      }\n\n      const fn = steps[step];\n      const updatedUpload = { ...currentUpload,\n        step\n      };\n      this.setState({\n        currentUploads: { ...currentUploads,\n          [uploadID]: updatedUpload\n        }\n      }); // TODO give this the `updatedUpload` object as its only parameter maybe?\n      // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n\n      await fn(updatedUpload.fileIDs, uploadID); // Update currentUpload value in case it was modified asynchronously.\n\n      currentUploads = this.getState().currentUploads;\n      currentUpload = currentUploads[uploadID];\n    }\n  } catch (err) {\n    this.emit('error', err);\n\n    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n\n    throw err;\n  } // Set result data.\n\n\n  if (currentUpload) {\n    // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n    // stuck in the postprocessing UI while the upload is fully complete.\n    // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n    // all, and never mark the postprocessing as complete. This is fine on its own but we\n    // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n    // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n    // before the postprocessing plugins can emit events.\n    //\n    // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n    // postprocessing completion, we do it instead.\n    currentUpload.fileIDs.forEach(fileID => {\n      const file = this.getFile(fileID);\n\n      if (file && file.progress.postprocess) {\n        this.emit('postprocess-complete', file);\n      }\n    });\n    const files = currentUpload.fileIDs.map(fileID => this.getFile(fileID));\n    const successful = files.filter(file => !file.error);\n    const failed = files.filter(file => file.error);\n    await this.addResultData(uploadID, {\n      successful,\n      failed,\n      uploadID\n    }); // Update currentUpload value in case it was modified asynchronously.\n\n    currentUploads = this.getState().currentUploads;\n    currentUpload = currentUploads[uploadID];\n  } // Emit completion events.\n  // This is in a separate function so that the `currentUploads` variable\n  // always refers to the latest state. In the handler right above it refers\n  // to an outdated object without the `.result` property.\n\n\n  let result;\n\n  if (currentUpload) {\n    result = currentUpload.result;\n    this.emit('complete', result);\n\n    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n  }\n\n  if (result == null) {\n    this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n  }\n\n  return result;\n}\n\nUppy.VERSION = \"2.1.1\";\nmodule.exports = Uppy;","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/core/lib/Uppy.js"],"names":["_Symbol$for","_Symbol$for2","_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","Translator","require","ee","nanoid","throttle","prettierBytes","match","DefaultStore","getFileType","getFileNameAndExtension","generateFileID","supportsUploadProgress","getFileName","justErrorsLogger","debugLogger","RestrictionError","Error","constructor","args","isRestriction","AggregateError","globalThis","message","errors","AggregateRestrictionError","_plugins","_storeUnsubscribe","_emitter","_preProcessors","_uploaders","_postProcessors","_checkRestrictions","_checkMinNumberOfFiles","_checkRequiredMetaFields","_showOrLogErrorAndThrow","_assertNewUploadAllowed","_checkAndCreateFileStateObject","_startIfAutoProceed","_addListeners","_updateOnlineStatus","_createUpload","_getUpload","_removeUpload","_runUpload","Symbol","for","Uppy","_opts","defineProperty","value","_runUpload2","_removeUpload2","_getUpload2","_createUpload2","_addListeners2","_startIfAutoProceed2","_checkAndCreateFileStateObject2","_assertNewUploadAllowed2","_showOrLogErrorAndThrow2","_checkRequiredMetaFields2","_checkMinNumberOfFiles2","_checkRestrictions2","writable","create","Set","updateOnlineStatus","bind","defaultLocale","strings","addBulkFilesFailed","youCanOnlyUploadX","youHaveToAtLeastSelectX","exceedsSize","missingRequiredMetaField","missingRequiredMetaFieldOnFile","inferiorSize","youCanOnlyUploadFileTypes","noMoreFilesAllowed","noDuplicates","companionError","authAborted","companionUnauthorizeHint","failedToUpload","noInternetConnection","connectedToInternet","noFilesFound","selectX","allFilesFromFolderNamed","openFolderNamed","cancel","logOut","filter","resetFilter","loading","authenticateWithTitle","authenticateWith","signInWithGoogle","searchImages","enterTextToSearch","backToSearch","emptyFolderAdded","folderAlreadyAdded","folderAdded","defaultOptions","autoProceed","allowMultipleUploads","allowMultipleUploadBatches","debug","restrictions","maxFileSize","minFileSize","maxTotalFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","requiredMetaFields","meta","onBeforeFileAdded","currentFile","onBeforeUpload","files","store","logger","infoTimeout","opts","log","VERSION","Array","isArray","i18nInit","calculateProgress","leading","trailing","setState","plugins","currentUploads","allowNewUpload","capabilities","uploadProgress","individualCancellation","resumableUploads","totalProgress","info","recoveredState","subscribe","prevState","nextState","patch","emit","updateAll","window","event","on","callback","once","off","state","iteratePlugins","plugin","update","getState","setFileState","fileID","translator","locale","i18n","translate","i18nArray","translateArray","setOptions","newOpts","setMeta","resetProgress","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","keys","forEach","updatedFile","progress","addPreProcessor","fn","add","removePreProcessor","delete","addPostProcessor","removePostProcessor","addUploader","removeUploader","data","updatedMeta","setFileMeta","newMeta","getFile","getFiles","values","getObjectOfFilesPerState","filesObject","error","inProgressFiles","newFiles","file","startedFiles","preprocess","postprocess","uploadStartedFiles","pausedFiles","isPaused","completeFiles","erroredFiles","inProgressNotPausedFiles","processingFiles","isUploadStarted","length","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","some","isGhost","validateRestrictions","result","err","reason","checkIfFileAlreadyExists","addFile","newFile","type","addFiles","fileDescriptors","i","push","subError","smart_count","details","removeFiles","fileIDs","updatedUploads","removedFiles","fileIsNotRemoved","uploadFileID","undefined","uploadID","newFileIDs","stateUpdate","calculateTotalProgress","removedFileIDs","join","removeFile","pauseResume","wasPaused","pauseAll","inProgressUpdatedFiles","resumeAll","retryAll","filesToRetry","Promise","resolve","successful","failed","forceAllowNewUpload","cancelAll","retryUpload","reset","logout","provider","canHavePercentage","Number","isFinite","bytesTotal","Math","round","inProgress","sizedFiles","unsizedFiles","progressMax","currentProgress","reduce","acc","totalSize","averageSize","uploadedSize","online","navigator","onLine","wasOffline","getID","use","Plugin","msg","pluginId","existsPluginAlready","getPlugin","install","foundPlugin","find","method","flat","removePlugin","instance","uninstall","list","index","findIndex","item","splice","updatedState","close","removeEventListener","hideInfo","slice","duration","isComplexMessage","setTimeout","warn","restore","reject","addResultData","currentUpload","upload","_classPrivateFieldLoo","uploader","onBeforeUploadResult","then","catch","currentlyUploadingFiles","flatMap","curr","waitingFileIDs","indexOf","showInformer","isCorrectFileType","replace","extension","toLowerCase","substr","allowedFileTypesString","types","size","totalFilesSize","f","fileName","throwErr","logMessageWithDetails","fileDescriptor","fileType","fileExtension","isRemote","Boolean","source","remote","preview","onBeforeFileAddedResult","filesArray","map","scheduledAutoProceed","stack","errorHandler","response","errorMsg","newError","Date","now","uploadResp","mode","uploadURL","addEventListener","step","restoreStep","steps","updatedUpload","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,WAAJ,EAAiBC,YAAjB;;AAEA,SAASC,2BAAT,CAAqCC,QAArC,EAA+CC,UAA/C,EAA2D;AAAE,MAAI,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,QAArC,EAA+CC,UAA/C,CAAL,EAAiE;AAAE,UAAM,IAAIK,SAAJ,CAAc,gDAAd,CAAN;AAAwE;;AAAC,SAAON,QAAP;AAAkB;;AAE3N,IAAIO,EAAE,GAAG,CAAT;;AAEA,SAASC,0BAAT,CAAoCC,IAApC,EAA0C;AAAE,SAAO,eAAeF,EAAE,EAAjB,GAAsB,GAAtB,GAA4BE,IAAnC;AAA0C;;AAEtF,MAAMC,UAAU,GAAGC,OAAO,CAAC,4BAAD,CAA1B;;AAEA,MAAMC,EAAE,GAAGD,OAAO,CAAC,mBAAD,CAAlB;;AAEA,MAAM;AACJE,EAAAA;AADI,IAEFF,OAAO,CAAC,QAAD,CAFX;;AAIA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,iBAAD,CAAxB;;AAEA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,6BAAD,CAA7B;;AAEA,MAAMK,KAAK,GAAGL,OAAO,CAAC,YAAD,CAArB;;AAEA,MAAMM,YAAY,GAAGN,OAAO,CAAC,qBAAD,CAA5B;;AAEA,MAAMO,WAAW,GAAGP,OAAO,CAAC,6BAAD,CAA3B;;AAEA,MAAMQ,uBAAuB,GAAGR,OAAO,CAAC,yCAAD,CAAvC;;AAEA,MAAMS,cAAc,GAAGT,OAAO,CAAC,gCAAD,CAA9B;;AAEA,MAAMU,sBAAsB,GAAGV,OAAO,CAAC,0BAAD,CAAtC;;AAEA,MAAMW,WAAW,GAAGX,OAAO,CAAC,eAAD,CAA3B;;AAEA,MAAM;AACJY,EAAAA,gBADI;AAEJC,EAAAA;AAFI,IAGFb,OAAO,CAAC,WAAD,CAHX,C,CAG0B;;;AAG1B,MAAMc,gBAAN,SAA+BC,KAA/B,CAAqC;AACnCC,EAAAA,WAAW,CAAC,GAAGC,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;AACA,SAAKC,aAAL,GAAqB,IAArB;AACD;;AAJkC;;AAQrC,IAAI,OAAOC,cAAP,KAA0B,WAA9B,EAA2C;AACzC;AACAC,EAAAA,UAAU,CAACD,cAAX,GAA4B,MAAMA,cAAN,SAA6BJ,KAA7B,CAAmC;AAC7DC,IAAAA,WAAW,CAACK,OAAD,EAAUC,MAAV,EAAkB;AAC3B,YAAMD,OAAN;AACA,WAAKC,MAAL,GAAcA,MAAd;AACD;;AAJ4D,GAA/D;AAOD;;AAED,MAAMC,yBAAN,SAAwCJ,cAAxC,CAAuD;AACrDH,EAAAA,WAAW,CAAC,GAAGC,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;AACA,SAAKC,aAAL,GAAqB,IAArB;AACD;;AAJoD;AAOvD;AACA;AACA;AACA;AACA;;;AAGA,IAAIM,QAAQ,GAAG,aAAa3B,0BAA0B,CAAC,SAAD,CAAtD;;AAEA,IAAI4B,iBAAiB,GAAG,aAAa5B,0BAA0B,CAAC,kBAAD,CAA/D;;AAEA,IAAI6B,QAAQ,GAAG,aAAa7B,0BAA0B,CAAC,SAAD,CAAtD;;AAEA,IAAI8B,cAAc,GAAG,aAAa9B,0BAA0B,CAAC,eAAD,CAA5D;;AAEA,IAAI+B,UAAU,GAAG,aAAa/B,0BAA0B,CAAC,WAAD,CAAxD;;AAEA,IAAIgC,eAAe,GAAG,aAAahC,0BAA0B,CAAC,gBAAD,CAA7D;;AAEA,IAAIiC,kBAAkB,GAAG,aAAajC,0BAA0B,CAAC,mBAAD,CAAhE;;AAEA,IAAIkC,sBAAsB,GAAG,aAAalC,0BAA0B,CAAC,uBAAD,CAApE;;AAEA,IAAImC,wBAAwB,GAAG,aAAanC,0BAA0B,CAAC,yBAAD,CAAtE;;AAEA,IAAIoC,uBAAuB,GAAG,aAAapC,0BAA0B,CAAC,wBAAD,CAArE;;AAEA,IAAIqC,uBAAuB,GAAG,aAAarC,0BAA0B,CAAC,wBAAD,CAArE;;AAEA,IAAIsC,8BAA8B,GAAG,aAAatC,0BAA0B,CAAC,+BAAD,CAA5E;;AAEA,IAAIuC,mBAAmB,GAAG,aAAavC,0BAA0B,CAAC,oBAAD,CAAjE;;AAEA,IAAIwC,aAAa,GAAG,aAAaxC,0BAA0B,CAAC,cAAD,CAA3D;;AAEA,IAAIyC,mBAAmB,GAAG,aAAazC,0BAA0B,CAAC,oBAAD,CAAjE;;AAEA,IAAI0C,aAAa,GAAG,aAAa1C,0BAA0B,CAAC,cAAD,CAA3D;;AAEA,IAAI2C,UAAU,GAAG,aAAa3C,0BAA0B,CAAC,WAAD,CAAxD;;AAEA,IAAI4C,aAAa,GAAG,aAAa5C,0BAA0B,CAAC,cAAD,CAA3D;;AAEA,IAAI6C,UAAU,GAAG,aAAa7C,0BAA0B,CAAC,WAAD,CAAxD;;AAEAX,WAAW,GAAGyD,MAAM,CAACC,GAAP,CAAW,uBAAX,CAAd;AACAzD,YAAY,GAAGwD,MAAM,CAACC,GAAP,CAAW,yBAAX,CAAf;;AAEA,MAAMC,IAAN,CAAW;AACT;;AAEA;;AAEA;AACF;AACA;AACA;AACA;AACE7B,EAAAA,WAAW,CAAC8B,KAAD,EAAQ;AACjBvD,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BL,UAA5B,EAAwC;AACtCM,MAAAA,KAAK,EAAEC;AAD+B,KAAxC;AAGA1D,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BN,aAA5B,EAA2C;AACzCO,MAAAA,KAAK,EAAEE;AADkC,KAA3C;AAGA3D,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BP,UAA5B,EAAwC;AACtCQ,MAAAA,KAAK,EAAEG;AAD+B,KAAxC;AAGA5D,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BR,aAA5B,EAA2C;AACzCS,MAAAA,KAAK,EAAEI;AADkC,KAA3C;AAGA7D,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BV,aAA5B,EAA2C;AACzCW,MAAAA,KAAK,EAAEK;AADkC,KAA3C;AAGA9D,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BX,mBAA5B,EAAiD;AAC/CY,MAAAA,KAAK,EAAEM;AADwC,KAAjD;AAGA/D,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BZ,8BAA5B,EAA4D;AAC1Da,MAAAA,KAAK,EAAEO;AADmD,KAA5D;AAGAhE,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4Bb,uBAA5B,EAAqD;AACnDc,MAAAA,KAAK,EAAEQ;AAD4C,KAArD;AAGAjE,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4Bd,uBAA5B,EAAqD;AACnDe,MAAAA,KAAK,EAAES;AAD4C,KAArD;AAGAlE,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4Bf,wBAA5B,EAAsD;AACpDgB,MAAAA,KAAK,EAAEU;AAD6C,KAAtD;AAGAnE,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BhB,sBAA5B,EAAoD;AAClDiB,MAAAA,KAAK,EAAEW;AAD2C,KAApD;AAGApE,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BjB,kBAA5B,EAAgD;AAC9CkB,MAAAA,KAAK,EAAEY;AADuC,KAAhD;AAGArE,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BvB,QAA5B,EAAsC;AACpCqC,MAAAA,QAAQ,EAAE,IAD0B;AAEpCb,MAAAA,KAAK,EAAEzD,MAAM,CAACuE,MAAP,CAAc,IAAd;AAF6B,KAAtC;AAIAvE,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BtB,iBAA5B,EAA+C;AAC7CoC,MAAAA,QAAQ,EAAE,IADmC;AAE7Cb,MAAAA,KAAK,EAAE,KAAK;AAFiC,KAA/C;AAIAzD,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BrB,QAA5B,EAAsC;AACpCmC,MAAAA,QAAQ,EAAE,IAD0B;AAEpCb,MAAAA,KAAK,EAAE/C,EAAE;AAF2B,KAAtC;AAIAV,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BpB,cAA5B,EAA4C;AAC1CkC,MAAAA,QAAQ,EAAE,IADgC;AAE1Cb,MAAAA,KAAK,EAAE,IAAIe,GAAJ;AAFmC,KAA5C;AAIAxE,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BnB,UAA5B,EAAwC;AACtCiC,MAAAA,QAAQ,EAAE,IAD4B;AAEtCb,MAAAA,KAAK,EAAE,IAAIe,GAAJ;AAF+B,KAAxC;AAIAxE,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BlB,eAA5B,EAA6C;AAC3CgC,MAAAA,QAAQ,EAAE,IADiC;AAE3Cb,MAAAA,KAAK,EAAE,IAAIe,GAAJ;AAFoC,KAA7C;AAIAxE,IAAAA,MAAM,CAACwD,cAAP,CAAsB,IAAtB,EAA4BT,mBAA5B,EAAiD;AAC/CuB,MAAAA,QAAQ,EAAE,IADqC;AAE/Cb,MAAAA,KAAK,EAAE,KAAKgB,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B;AAFwC,KAAjD;AAIA,SAAKC,aAAL,GAAqB;AACnBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,kBAAkB,EAAE;AAClB,aAAG,4DADe;AAElB,aAAG;AAFe,SADb;AAKPC,QAAAA,iBAAiB,EAAE;AACjB,aAAG,yCADc;AAEjB,aAAG;AAFc,SALZ;AASPC,QAAAA,uBAAuB,EAAE;AACvB,aAAG,iDADoB;AAEvB,aAAG;AAFoB,SATlB;AAaPC,QAAAA,WAAW,EAAE,iDAbN;AAcPC,QAAAA,wBAAwB,EAAE,8BAdnB;AAePC,QAAAA,8BAA8B,EAAE,6CAfzB;AAgBPC,QAAAA,YAAY,EAAE,uDAhBP;AAiBPC,QAAAA,yBAAyB,EAAE,+BAjBpB;AAkBPC,QAAAA,kBAAkB,EAAE,uBAlBb;AAmBPC,QAAAA,YAAY,EAAE,kEAnBP;AAoBPC,QAAAA,cAAc,EAAE,kCApBT;AAqBPC,QAAAA,WAAW,EAAE,wBArBN;AAsBPC,QAAAA,wBAAwB,EAAE,iEAtBnB;AAuBPC,QAAAA,cAAc,EAAE,0BAvBT;AAwBPC,QAAAA,oBAAoB,EAAE,wBAxBf;AAyBPC,QAAAA,mBAAmB,EAAE,2BAzBd;AA0BP;AACAC,QAAAA,YAAY,EAAE,mCA3BP;AA4BPC,QAAAA,OAAO,EAAE;AACP,aAAG,uBADI;AAEP,aAAG;AAFI,SA5BF;AAgCPC,QAAAA,uBAAuB,EAAE,+BAhClB;AAiCPC,QAAAA,eAAe,EAAE,qBAjCV;AAkCPC,QAAAA,MAAM,EAAE,QAlCD;AAmCPC,QAAAA,MAAM,EAAE,SAnCD;AAoCPC,QAAAA,MAAM,EAAE,QApCD;AAqCPC,QAAAA,WAAW,EAAE,cArCN;AAsCPC,QAAAA,OAAO,EAAE,YAtCF;AAuCPC,QAAAA,qBAAqB,EAAE,wDAvChB;AAwCPC,QAAAA,gBAAgB,EAAE,0BAxCX;AAyCPC,QAAAA,gBAAgB,EAAE,qBAzCX;AA0CPC,QAAAA,YAAY,EAAE,mBA1CP;AA2CPC,QAAAA,iBAAiB,EAAE,iCA3CZ;AA4CPC,QAAAA,YAAY,EAAE,gBA5CP;AA6CPC,QAAAA,gBAAgB,EAAE,uCA7CX;AA8CPC,QAAAA,kBAAkB,EAAE,0CA9Cb;AA+CPC,QAAAA,WAAW,EAAE;AACX,aAAG,0CADQ;AAEX,aAAG;AAFQ;AA/CN;AADU,KAArB;AAsDA,UAAMC,cAAc,GAAG;AACrB1G,MAAAA,EAAE,EAAE,MADiB;AAErB2G,MAAAA,WAAW,EAAE,KAFQ;;AAIrB;AACN;AACA;AACMC,MAAAA,oBAAoB,EAAE,IAPD;AAQrBC,MAAAA,0BAA0B,EAAE,IARP;AASrBC,MAAAA,KAAK,EAAE,KATc;AAUrBC,MAAAA,YAAY,EAAE;AACZC,QAAAA,WAAW,EAAE,IADD;AAEZC,QAAAA,WAAW,EAAE,IAFD;AAGZC,QAAAA,gBAAgB,EAAE,IAHN;AAIZC,QAAAA,gBAAgB,EAAE,IAJN;AAKZC,QAAAA,gBAAgB,EAAE,IALN;AAMZC,QAAAA,gBAAgB,EAAE,IANN;AAOZC,QAAAA,kBAAkB,EAAE;AAPR,OAVO;AAmBrBC,MAAAA,IAAI,EAAE,EAnBe;AAoBrBC,MAAAA,iBAAiB,EAAEC,WAAW,IAAIA,WApBb;AAqBrBC,MAAAA,cAAc,EAAEC,KAAK,IAAIA,KArBJ;AAsBrBC,MAAAA,KAAK,EAAElH,YAAY,EAtBE;AAuBrBmH,MAAAA,MAAM,EAAE7G,gBAvBa;AAwBrB8G,MAAAA,WAAW,EAAE;AAxBQ,KAAvB,CAvHiB,CAgJd;AACH;;AAEA,SAAKC,IAAL,GAAY,EAAE,GAAGrB,cAAL;AACV,SAAGxD,KADO;AAEV6D,MAAAA,YAAY,EAAE,EAAE,GAAGL,cAAc,CAACK,YAApB;AACZ,YAAI7D,KAAK,IAAIA,KAAK,CAAC6D,YAAnB;AADY;AAFJ,KAAZ,CAnJiB,CAwJd;AACH;;AAEA,QAAI7D,KAAK,IAAIA,KAAK,CAAC2E,MAAf,IAAyB3E,KAAK,CAAC4D,KAAnC,EAA0C;AACxC,WAAKkB,GAAL,CAAS,2KAAT,EAAsL,SAAtL;AACD,KAFD,MAEO,IAAI9E,KAAK,IAAIA,KAAK,CAAC4D,KAAnB,EAA0B;AAC/B,WAAKiB,IAAL,CAAUF,MAAV,GAAmB5G,WAAnB;AACD;;AAED,SAAK+G,GAAL,CAAU,eAAc,KAAK5G,WAAL,CAAiB6G,OAAQ,EAAjD;;AAEA,QAAI,KAAKF,IAAL,CAAUhB,YAAV,CAAuBM,gBAAvB,IAA2C,KAAKU,IAAL,CAAUhB,YAAV,CAAuBM,gBAAvB,KAA4C,IAAvF,IAA+F,CAACa,KAAK,CAACC,OAAN,CAAc,KAAKJ,IAAL,CAAUhB,YAAV,CAAuBM,gBAArC,CAApG,EAA4J;AAC1J,YAAM,IAAItH,SAAJ,CAAc,kDAAd,CAAN;AACD;;AAED,SAAKqI,QAAL,GAvKiB,CAuKA;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAKC,iBAAL,GAAyB9H,QAAQ,CAAC,KAAK8H,iBAAL,CAAuBhE,IAAvB,CAA4B,IAA5B,CAAD,EAAoC,GAApC,EAAyC;AACxEiE,MAAAA,OAAO,EAAE,IAD+D;AAExEC,MAAAA,QAAQ,EAAE;AAF8D,KAAzC,CAAjC;AAIA,SAAKX,KAAL,GAAa,KAAKG,IAAL,CAAUH,KAAvB;AACA,SAAKY,QAAL,CAAc;AACZC,MAAAA,OAAO,EAAE,EADG;AAEZd,MAAAA,KAAK,EAAE,EAFK;AAGZe,MAAAA,cAAc,EAAE,EAHJ;AAIZC,MAAAA,cAAc,EAAE,IAJJ;AAKZC,MAAAA,YAAY,EAAE;AACZC,QAAAA,cAAc,EAAE/H,sBAAsB,EAD1B;AAEZgI,QAAAA,sBAAsB,EAAE,IAFZ;AAGZC,QAAAA,gBAAgB,EAAE;AAHN,OALF;AAUZC,MAAAA,aAAa,EAAE,CAVH;AAWZzB,MAAAA,IAAI,EAAE,EAAE,GAAG,KAAKQ,IAAL,CAAUR;AAAf,OAXM;AAaZ0B,MAAAA,IAAI,EAAE,EAbM;AAcZC,MAAAA,cAAc,EAAE;AAdJ,KAAd;AAgBA1J,IAAAA,2BAA2B,CAAC,IAAD,EAAOqC,iBAAP,CAA3B,CAAqDA,iBAArD,IAA0E,KAAK+F,KAAL,CAAWuB,SAAX,CAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,KAAvB,KAAiC;AAC9H,WAAKC,IAAL,CAAU,cAAV,EAA0BH,SAA1B,EAAqCC,SAArC,EAAgDC,KAAhD;AACA,WAAKE,SAAL,CAAeH,SAAf;AACD,KAHyE,CAA1E,CApMiB,CAuMb;;AAEJ,QAAI,KAAKtB,IAAL,CAAUjB,KAAV,IAAmB,OAAO2C,MAAP,KAAkB,WAAzC,EAAsD;AACpDA,MAAAA,MAAM,CAAC,KAAK1B,IAAL,CAAU/H,EAAX,CAAN,GAAuB,IAAvB;AACD;;AAEDR,IAAAA,2BAA2B,CAAC,IAAD,EAAOiD,aAAP,CAA3B,CAAiDA,aAAjD;AACD;;AAED8G,EAAAA,IAAI,CAACG,KAAD,EAAQ,GAAGrI,IAAX,EAAiB;AACnB7B,IAAAA,2BAA2B,CAAC,IAAD,EAAOsC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDyH,IAAtD,CAA2DG,KAA3D,EAAkE,GAAGrI,IAArE;AACD;;AAEDsI,EAAAA,EAAE,CAACD,KAAD,EAAQE,QAAR,EAAkB;AAClBpK,IAAAA,2BAA2B,CAAC,IAAD,EAAOsC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsD6H,EAAtD,CAAyDD,KAAzD,EAAgEE,QAAhE;;AAEA,WAAO,IAAP;AACD;;AAEDC,EAAAA,IAAI,CAACH,KAAD,EAAQE,QAAR,EAAkB;AACpBpK,IAAAA,2BAA2B,CAAC,IAAD,EAAOsC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsD+H,IAAtD,CAA2DH,KAA3D,EAAkEE,QAAlE;;AAEA,WAAO,IAAP;AACD;;AAEDE,EAAAA,GAAG,CAACJ,KAAD,EAAQE,QAAR,EAAkB;AACnBpK,IAAAA,2BAA2B,CAAC,IAAD,EAAOsC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDgI,GAAtD,CAA0DJ,KAA1D,EAAiEE,QAAjE;;AAEA,WAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEJ,EAAAA,SAAS,CAACO,KAAD,EAAQ;AACf,SAAKC,cAAL,CAAoBC,MAAM,IAAI;AAC5BA,MAAAA,MAAM,CAACC,MAAP,CAAcH,KAAd;AACD,KAFD;AAGD;AACD;AACF;AACA;AACA;AACA;;;AAGEvB,EAAAA,QAAQ,CAACc,KAAD,EAAQ;AACd,SAAK1B,KAAL,CAAWY,QAAX,CAAoBc,KAApB;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEa,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKvC,KAAL,CAAWuC,QAAX,EAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGW,MAALJ,KAAK,GAAG;AACV;AACA,WAAO,KAAKI,QAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,YAAY,CAACC,MAAD,EAASN,KAAT,EAAgB;AAC1B,QAAI,CAAC,KAAKI,QAAL,GAAgBxC,KAAhB,CAAsB0C,MAAtB,CAAL,EAAoC;AAClC,YAAM,IAAIlJ,KAAJ,CAAW,uBAAsBkJ,MAAO,qCAAxC,CAAN;AACD;;AAED,SAAK7B,QAAL,CAAc;AACZb,MAAAA,KAAK,EAAE,EAAE,GAAG,KAAKwC,QAAL,GAAgBxC,KAArB;AACL,SAAC0C,MAAD,GAAU,EAAE,GAAG,KAAKF,QAAL,GAAgBxC,KAAhB,CAAsB0C,MAAtB,CAAL;AACR,aAAGN;AADK;AADL;AADK,KAAd;AAOD;;AAED3B,EAAAA,QAAQ,GAAG;AACT,UAAMkC,UAAU,GAAG,IAAInK,UAAJ,CAAe,CAAC,KAAKmE,aAAN,EAAqB,KAAKyD,IAAL,CAAUwC,MAA/B,CAAf,CAAnB;AACA,SAAKC,IAAL,GAAYF,UAAU,CAACG,SAAX,CAAqBpG,IAArB,CAA0BiG,UAA1B,CAAZ;AACA,SAAKI,SAAL,GAAiBJ,UAAU,CAACK,cAAX,CAA0BtG,IAA1B,CAA+BiG,UAA/B,CAAjB;AACA,SAAKC,MAAL,GAAcD,UAAU,CAACC,MAAzB;AACD;;AAEDK,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,SAAK9C,IAAL,GAAY,EAAE,GAAG,KAAKA,IAAV;AACV,SAAG8C,OADO;AAEV9D,MAAAA,YAAY,EAAE,EAAE,GAAG,KAAKgB,IAAL,CAAUhB,YAAf;AACZ,YAAI8D,OAAO,IAAIA,OAAO,CAAC9D,YAAvB;AADY;AAFJ,KAAZ;;AAOA,QAAI8D,OAAO,CAACtD,IAAZ,EAAkB;AAChB,WAAKuD,OAAL,CAAaD,OAAO,CAACtD,IAArB;AACD;;AAED,SAAKa,QAAL;;AAEA,QAAIyC,OAAO,CAACN,MAAZ,EAAoB;AAClB,WAAKP,cAAL,CAAoBC,MAAM,IAAI;AAC5BA,QAAAA,MAAM,CAACW,UAAP;AACD,OAFD;AAGD,KAlBiB,CAkBhB;;;AAGF,SAAKpC,QAAL,GArBkB,CAqBD;AAClB;;AAEDuC,EAAAA,aAAa,GAAG;AACd,UAAMC,eAAe,GAAG;AACtBC,MAAAA,UAAU,EAAE,CADU;AAEtBC,MAAAA,aAAa,EAAE,CAFO;AAGtBC,MAAAA,cAAc,EAAE,KAHM;AAItBC,MAAAA,aAAa,EAAE;AAJO,KAAxB;AAMA,UAAMzD,KAAK,GAAG,EAAE,GAAG,KAAKwC,QAAL,GAAgBxC;AAArB,KAAd;AAEA,UAAM0D,YAAY,GAAG,EAArB;AACA1L,IAAAA,MAAM,CAAC2L,IAAP,CAAY3D,KAAZ,EAAmB4D,OAAnB,CAA2BlB,MAAM,IAAI;AACnC,YAAMmB,WAAW,GAAG,EAAE,GAAG7D,KAAK,CAAC0C,MAAD;AAAV,OAApB;AAEAmB,MAAAA,WAAW,CAACC,QAAZ,GAAuB,EAAE,GAAGD,WAAW,CAACC,QAAjB;AACrB,WAAGT;AADkB,OAAvB;AAGAK,MAAAA,YAAY,CAAChB,MAAD,CAAZ,GAAuBmB,WAAvB;AACD,KAPD;AAQA,SAAKhD,QAAL,CAAc;AACZb,MAAAA,KAAK,EAAE0D,YADK;AAEZrC,MAAAA,aAAa,EAAE;AAFH,KAAd;AAIA,SAAKO,IAAL,CAAU,gBAAV;AACD;;AAEDmC,EAAAA,eAAe,CAACC,EAAD,EAAK;AAClBnM,IAAAA,2BAA2B,CAAC,IAAD,EAAOuC,cAAP,CAA3B,CAAkDA,cAAlD,EAAkE6J,GAAlE,CAAsED,EAAtE;AACD;;AAEDE,EAAAA,kBAAkB,CAACF,EAAD,EAAK;AACrB,WAAOnM,2BAA2B,CAAC,IAAD,EAAOuC,cAAP,CAA3B,CAAkDA,cAAlD,EAAkE+J,MAAlE,CAAyEH,EAAzE,CAAP;AACD;;AAEDI,EAAAA,gBAAgB,CAACJ,EAAD,EAAK;AACnBnM,IAAAA,2BAA2B,CAAC,IAAD,EAAOyC,eAAP,CAA3B,CAAmDA,eAAnD,EAAoE2J,GAApE,CAAwED,EAAxE;AACD;;AAEDK,EAAAA,mBAAmB,CAACL,EAAD,EAAK;AACtB,WAAOnM,2BAA2B,CAAC,IAAD,EAAOyC,eAAP,CAA3B,CAAmDA,eAAnD,EAAoE6J,MAApE,CAA2EH,EAA3E,CAAP;AACD;;AAEDM,EAAAA,WAAW,CAACN,EAAD,EAAK;AACdnM,IAAAA,2BAA2B,CAAC,IAAD,EAAOwC,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D4J,GAA1D,CAA8DD,EAA9D;AACD;;AAEDO,EAAAA,cAAc,CAACP,EAAD,EAAK;AACjB,WAAOnM,2BAA2B,CAAC,IAAD,EAAOwC,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D8J,MAA1D,CAAiEH,EAAjE,CAAP;AACD;;AAEDb,EAAAA,OAAO,CAACqB,IAAD,EAAO;AACZ,UAAMC,WAAW,GAAG,EAAE,GAAG,KAAKjC,QAAL,GAAgB5C,IAArB;AAClB,SAAG4E;AADe,KAApB;AAGA,UAAMd,YAAY,GAAG,EAAE,GAAG,KAAKlB,QAAL,GAAgBxC;AAArB,KAArB;AAEAhI,IAAAA,MAAM,CAAC2L,IAAP,CAAYD,YAAZ,EAA0BE,OAA1B,CAAkClB,MAAM,IAAI;AAC1CgB,MAAAA,YAAY,CAAChB,MAAD,CAAZ,GAAuB,EAAE,GAAGgB,YAAY,CAAChB,MAAD,CAAjB;AACrB9C,QAAAA,IAAI,EAAE,EAAE,GAAG8D,YAAY,CAAChB,MAAD,CAAZ,CAAqB9C,IAA1B;AACJ,aAAG4E;AADC;AADe,OAAvB;AAKD,KAND;AAOA,SAAKnE,GAAL,CAAS,kBAAT;AACA,SAAKA,GAAL,CAASmE,IAAT;AACA,SAAK3D,QAAL,CAAc;AACZjB,MAAAA,IAAI,EAAE6E,WADM;AAEZzE,MAAAA,KAAK,EAAE0D;AAFK,KAAd;AAID;;AAEDgB,EAAAA,WAAW,CAAChC,MAAD,EAAS8B,IAAT,EAAe;AACxB,UAAMd,YAAY,GAAG,EAAE,GAAG,KAAKlB,QAAL,GAAgBxC;AAArB,KAArB;;AAGA,QAAI,CAAC0D,YAAY,CAAChB,MAAD,CAAjB,EAA2B;AACzB,WAAKrC,GAAL,CAAS,+DAAT,EAA0EqC,MAA1E;AACA;AACD;;AAED,UAAMiC,OAAO,GAAG,EAAE,GAAGjB,YAAY,CAAChB,MAAD,CAAZ,CAAqB9C,IAA1B;AACd,SAAG4E;AADW,KAAhB;AAGAd,IAAAA,YAAY,CAAChB,MAAD,CAAZ,GAAuB,EAAE,GAAGgB,YAAY,CAAChB,MAAD,CAAjB;AACrB9C,MAAAA,IAAI,EAAE+E;AADe,KAAvB;AAGA,SAAK9D,QAAL,CAAc;AACZb,MAAAA,KAAK,EAAE0D;AADK,KAAd;AAGD;AACD;AACF;AACA;AACA;AACA;;;AAGEkB,EAAAA,OAAO,CAAClC,MAAD,EAAS;AACd,WAAO,KAAKF,QAAL,GAAgBxC,KAAhB,CAAsB0C,MAAtB,CAAP;AACD;AACD;AACF;AACA;;;AAGEmC,EAAAA,QAAQ,GAAG;AACT,UAAM;AACJ7E,MAAAA;AADI,QAEF,KAAKwC,QAAL,EAFJ;AAGA,WAAOxK,MAAM,CAAC8M,MAAP,CAAc9E,KAAd,CAAP;AACD;;AAED+E,EAAAA,wBAAwB,GAAG;AACzB,UAAM;AACJ/E,MAAAA,KAAK,EAAEgF,WADH;AAEJ3D,MAAAA,aAFI;AAGJ4D,MAAAA;AAHI,QAIF,KAAKzC,QAAL,EAJJ;AAKA,UAAMxC,KAAK,GAAGhI,MAAM,CAAC8M,MAAP,CAAcE,WAAd,CAAd;AACA,UAAME,eAAe,GAAGlF,KAAK,CAAC7B,MAAN,CAAa,CAAC;AACpC2F,MAAAA;AADoC,KAAD,KAE/B,CAACA,QAAQ,CAACN,cAAV,IAA4BM,QAAQ,CAACL,aAFnB,CAAxB;AAGA,UAAM0B,QAAQ,GAAGnF,KAAK,CAAC7B,MAAN,CAAaiH,IAAI,IAAI,CAACA,IAAI,CAACtB,QAAL,CAAcL,aAApC,CAAjB;AACA,UAAM4B,YAAY,GAAGrF,KAAK,CAAC7B,MAAN,CAAaiH,IAAI,IAAIA,IAAI,CAACtB,QAAL,CAAcL,aAAd,IAA+B2B,IAAI,CAACtB,QAAL,CAAcwB,UAA7C,IAA2DF,IAAI,CAACtB,QAAL,CAAcyB,WAA9F,CAArB;AACA,UAAMC,kBAAkB,GAAGxF,KAAK,CAAC7B,MAAN,CAAaiH,IAAI,IAAIA,IAAI,CAACtB,QAAL,CAAcL,aAAnC,CAA3B;AACA,UAAMgC,WAAW,GAAGzF,KAAK,CAAC7B,MAAN,CAAaiH,IAAI,IAAIA,IAAI,CAACM,QAA1B,CAApB;AACA,UAAMC,aAAa,GAAG3F,KAAK,CAAC7B,MAAN,CAAaiH,IAAI,IAAIA,IAAI,CAACtB,QAAL,CAAcN,cAAnC,CAAtB;AACA,UAAMoC,YAAY,GAAG5F,KAAK,CAAC7B,MAAN,CAAaiH,IAAI,IAAIA,IAAI,CAACH,KAA1B,CAArB;AACA,UAAMY,wBAAwB,GAAGX,eAAe,CAAC/G,MAAhB,CAAuBiH,IAAI,IAAI,CAACA,IAAI,CAACM,QAArC,CAAjC;AACA,UAAMI,eAAe,GAAG9F,KAAK,CAAC7B,MAAN,CAAaiH,IAAI,IAAIA,IAAI,CAACtB,QAAL,CAAcwB,UAAd,IAA4BF,IAAI,CAACtB,QAAL,CAAcyB,WAA/D,CAAxB;AACA,WAAO;AACLJ,MAAAA,QADK;AAELE,MAAAA,YAFK;AAGLG,MAAAA,kBAHK;AAILC,MAAAA,WAJK;AAKLE,MAAAA,aALK;AAMLC,MAAAA,YANK;AAOLV,MAAAA,eAPK;AAQLW,MAAAA,wBARK;AASLC,MAAAA,eATK;AAULC,MAAAA,eAAe,EAAEP,kBAAkB,CAACQ,MAAnB,GAA4B,CAVxC;AAWLC,MAAAA,aAAa,EAAE5E,aAAa,KAAK,GAAlB,IAAyBsE,aAAa,CAACK,MAAd,KAAyBhG,KAAK,CAACgG,MAAxD,IAAkEF,eAAe,CAACE,MAAhB,KAA2B,CAXvG;AAYLE,MAAAA,YAAY,EAAE,CAAC,CAACjB,KAAF,IAAWW,YAAY,CAACI,MAAb,KAAwBhG,KAAK,CAACgG,MAZlD;AAaLG,MAAAA,WAAW,EAAEjB,eAAe,CAACc,MAAhB,KAA2B,CAA3B,IAAgCP,WAAW,CAACO,MAAZ,KAAuBd,eAAe,CAACc,MAb/E;AAcLI,MAAAA,kBAAkB,EAAElB,eAAe,CAACc,MAAhB,GAAyB,CAdxC;AAeLK,MAAAA,WAAW,EAAErG,KAAK,CAACsG,IAAN,CAAWlB,IAAI,IAAIA,IAAI,CAACmB,OAAxB;AAfR,KAAP;AAiBD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEC,EAAAA,oBAAoB,CAACpB,IAAD,EAAOpF,KAAP,EAAc;AAChC,QAAI;AACFnI,MAAAA,2BAA2B,CAAC,IAAD,EAAO0C,kBAAP,CAA3B,CAAsDA,kBAAtD,EAA0E6K,IAA1E,EAAgFpF,KAAhF;;AAEA,aAAO;AACLyG,QAAAA,MAAM,EAAE;AADH,OAAP;AAGD,KAND,CAME,OAAOC,GAAP,EAAY;AACZ,aAAO;AACLD,QAAAA,MAAM,EAAE,KADH;AAELE,QAAAA,MAAM,EAAED,GAAG,CAAC5M;AAFP,OAAP;AAID;AACF;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE8M,EAAAA,wBAAwB,CAAClE,MAAD,EAAS;AAC/B,UAAM;AACJ1C,MAAAA;AADI,QAEF,KAAKwC,QAAL,EAFJ;;AAIA,QAAIxC,KAAK,CAAC0C,MAAD,CAAL,IAAiB,CAAC1C,KAAK,CAAC0C,MAAD,CAAL,CAAc6D,OAApC,EAA6C;AAC3C,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,OAAO,CAACzB,IAAD,EAAO;AACZvN,IAAAA,2BAA2B,CAAC,IAAD,EAAO8C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFyK,IAApF;;AAEA,UAAM;AACJpF,MAAAA;AADI,QAEF,KAAKwC,QAAL,EAFJ;;AAIA,QAAIsE,OAAO,GAAGjP,2BAA2B,CAAC,IAAD,EAAO+C,8BAAP,CAA3B,CAAkEA,8BAAlE,EAAkGoF,KAAlG,EAAyGoF,IAAzG,CAAd,CAPY,CAOkH;AAC9H;;;AAGA,QAAIpF,KAAK,CAAC8G,OAAO,CAACzO,EAAT,CAAL,IAAqB2H,KAAK,CAAC8G,OAAO,CAACzO,EAAT,CAAL,CAAkBkO,OAA3C,EAAoD;AAClDO,MAAAA,OAAO,GAAG,EAAE,GAAG9G,KAAK,CAAC8G,OAAO,CAACzO,EAAT,CAAV;AACRmM,QAAAA,IAAI,EAAEY,IAAI,CAACZ,IADH;AAER+B,QAAAA,OAAO,EAAE;AAFD,OAAV;AAIA,WAAKlG,GAAL,CAAU,iDAAgDyG,OAAO,CAACvO,IAAK,KAAIuO,OAAO,CAACzO,EAAG,EAAtF;AACD;;AAED,SAAKwI,QAAL,CAAc;AACZb,MAAAA,KAAK,EAAE,EAAE,GAAGA,KAAL;AACL,SAAC8G,OAAO,CAACzO,EAAT,GAAcyO;AADT;AADK,KAAd;AAKA,SAAKlF,IAAL,CAAU,YAAV,EAAwBkF,OAAxB;AACA,SAAKlF,IAAL,CAAU,aAAV,EAAyB,CAACkF,OAAD,CAAzB;AACA,SAAKzG,GAAL,CAAU,eAAcyG,OAAO,CAACvO,IAAK,KAAIuO,OAAO,CAACzO,EAAG,gBAAeyO,OAAO,CAACC,IAAK,EAAhF;;AAEAlP,IAAAA,2BAA2B,CAAC,IAAD,EAAOgD,mBAAP,CAA3B,CAAuDA,mBAAvD;;AAEA,WAAOiM,OAAO,CAACzO,EAAf;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGE2O,EAAAA,QAAQ,CAACC,eAAD,EAAkB;AACxBpP,IAAAA,2BAA2B,CAAC,IAAD,EAAO8C,uBAAP,CAA3B,CAA2DA,uBAA3D,IADwB,CAC+D;;;AAGvF,UAAMqF,KAAK,GAAG,EAAE,GAAG,KAAKwC,QAAL,GAAgBxC;AAArB,KAAd;AAEA,UAAMmF,QAAQ,GAAG,EAAjB;AACA,UAAMpL,MAAM,GAAG,EAAf;;AAEA,SAAK,IAAImN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,eAAe,CAACjB,MAApC,EAA4CkB,CAAC,EAA7C,EAAiD;AAC/C,UAAI;AACF,YAAIJ,OAAO,GAAGjP,2BAA2B,CAAC,IAAD,EAAO+C,8BAAP,CAA3B,CAAkEA,8BAAlE,EAAkGoF,KAAlG,EAAyGiH,eAAe,CAACC,CAAD,CAAxH,CAAd,CADE,CAC0I;AAC5I;;;AAGA,YAAIlH,KAAK,CAAC8G,OAAO,CAACzO,EAAT,CAAL,IAAqB2H,KAAK,CAAC8G,OAAO,CAACzO,EAAT,CAAL,CAAkBkO,OAA3C,EAAoD;AAClDO,UAAAA,OAAO,GAAG,EAAE,GAAG9G,KAAK,CAAC8G,OAAO,CAACzO,EAAT,CAAV;AACRmM,YAAAA,IAAI,EAAEyC,eAAe,CAACC,CAAD,CAAf,CAAmB1C,IADjB;AAER+B,YAAAA,OAAO,EAAE;AAFD,WAAV;AAIA,eAAKlG,GAAL,CAAU,kCAAiCyG,OAAO,CAACvO,IAAK,KAAIuO,OAAO,CAACzO,EAAG,EAAvE;AACD;;AAED2H,QAAAA,KAAK,CAAC8G,OAAO,CAACzO,EAAT,CAAL,GAAoByO,OAApB;AACA3B,QAAAA,QAAQ,CAACgC,IAAT,CAAcL,OAAd;AACD,OAfD,CAeE,OAAOJ,GAAP,EAAY;AACZ,YAAI,CAACA,GAAG,CAAC/M,aAAT,EAAwB;AACtBI,UAAAA,MAAM,CAACoN,IAAP,CAAYT,GAAZ;AACD;AACF;AACF;;AAED,SAAK7F,QAAL,CAAc;AACZb,MAAAA;AADY,KAAd;AAGAmF,IAAAA,QAAQ,CAACvB,OAAT,CAAiBkD,OAAO,IAAI;AAC1B,WAAKlF,IAAL,CAAU,YAAV,EAAwBkF,OAAxB;AACD,KAFD;AAGA,SAAKlF,IAAL,CAAU,aAAV,EAAyBuD,QAAzB;;AAEA,QAAIA,QAAQ,CAACa,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAK3F,GAAL,CAAU,kBAAiB8E,QAAQ,CAACa,MAAO,QAA3C;AACD,KAFD,MAEO;AACLhO,MAAAA,MAAM,CAAC2L,IAAP,CAAYwB,QAAZ,EAAsBvB,OAAtB,CAA8BlB,MAAM,IAAI;AACtC,aAAKrC,GAAL,CAAU,eAAc8E,QAAQ,CAACzC,MAAD,CAAR,CAAiBnK,IAAK,UAAS4M,QAAQ,CAACzC,MAAD,CAAR,CAAiBrK,EAAG,YAAW8M,QAAQ,CAACzC,MAAD,CAAR,CAAiBqE,IAAK,EAA5G;AACD,OAFD;AAGD;;AAED,QAAI5B,QAAQ,CAACa,MAAT,GAAkB,CAAtB,EAAyB;AACvBnO,MAAAA,2BAA2B,CAAC,IAAD,EAAOgD,mBAAP,CAA3B,CAAuDA,mBAAvD;AACD;;AAED,QAAId,MAAM,CAACiM,MAAP,GAAgB,CAApB,EAAuB;AACrB,UAAIlM,OAAO,GAAG,gDAAd;AACAC,MAAAA,MAAM,CAAC6J,OAAP,CAAewD,QAAQ,IAAI;AACzBtN,QAAAA,OAAO,IAAK,QAAOsN,QAAQ,CAACtN,OAAQ,EAApC;AACD,OAFD;AAGA,WAAKwH,IAAL,CAAU;AACRxH,QAAAA,OAAO,EAAE,KAAK+I,IAAL,CAAU,oBAAV,EAAgC;AACvCwE,UAAAA,WAAW,EAAEtN,MAAM,CAACiM;AADmB,SAAhC,CADD;AAIRsB,QAAAA,OAAO,EAAExN;AAJD,OAAV,EAKG,OALH,EAKY,KAAKsG,IAAL,CAAUD,WALtB;;AAOA,UAAI,OAAOvG,cAAP,KAA0B,UAA9B,EAA0C;AACxC,cAAM,IAAIA,cAAJ,CAAmBG,MAAnB,EAA2BD,OAA3B,CAAN;AACD,OAFD,MAEO;AACL,cAAM4M,GAAG,GAAG,IAAIlN,KAAJ,CAAUM,OAAV,CAAZ;AACA4M,QAAAA,GAAG,CAAC3M,MAAJ,GAAaA,MAAb;AACA,cAAM2M,GAAN;AACD;AACF;AACF;;AAEDa,EAAAA,WAAW,CAACC,OAAD,EAAUb,MAAV,EAAkB;AAC3B,UAAM;AACJ3G,MAAAA,KADI;AAEJe,MAAAA;AAFI,QAGF,KAAKyB,QAAL,EAHJ;AAIA,UAAMkB,YAAY,GAAG,EAAE,GAAG1D;AAAL,KAArB;AAEA,UAAMyH,cAAc,GAAG,EAAE,GAAG1G;AAAL,KAAvB;AAEA,UAAM2G,YAAY,GAAG1P,MAAM,CAACuE,MAAP,CAAc,IAAd,CAArB;AACAiL,IAAAA,OAAO,CAAC5D,OAAR,CAAgBlB,MAAM,IAAI;AACxB,UAAI1C,KAAK,CAAC0C,MAAD,CAAT,EAAmB;AACjBgF,QAAAA,YAAY,CAAChF,MAAD,CAAZ,GAAuB1C,KAAK,CAAC0C,MAAD,CAA5B;AACA,eAAOgB,YAAY,CAAChB,MAAD,CAAnB;AACD;AACF,KALD,EAV2B,CAevB;;AAEJ,aAASiF,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC,aAAOF,YAAY,CAACE,YAAD,CAAZ,KAA+BC,SAAtC;AACD;;AAED7P,IAAAA,MAAM,CAAC2L,IAAP,CAAY8D,cAAZ,EAA4B7D,OAA5B,CAAoCkE,QAAQ,IAAI;AAC9C,YAAMC,UAAU,GAAGhH,cAAc,CAAC+G,QAAD,CAAd,CAAyBN,OAAzB,CAAiCrJ,MAAjC,CAAwCwJ,gBAAxC,CAAnB,CAD8C,CACgC;;AAE9E,UAAII,UAAU,CAAC/B,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,eAAOyB,cAAc,CAACK,QAAD,CAArB;AACA;AACD;;AAEDL,MAAAA,cAAc,CAACK,QAAD,CAAd,GAA2B,EAAE,GAAG/G,cAAc,CAAC+G,QAAD,CAAnB;AACzBN,QAAAA,OAAO,EAAEO;AADgB,OAA3B;AAGD,KAXD;AAYA,UAAMC,WAAW,GAAG;AAClBjH,MAAAA,cAAc,EAAE0G,cADE;AAElBzH,MAAAA,KAAK,EAAE0D;AAFW,KAApB,CAjC2B,CAoCxB;AACH;;AAEA,QAAI1L,MAAM,CAAC2L,IAAP,CAAYD,YAAZ,EAA0BsC,MAA1B,KAAqC,CAAzC,EAA4C;AAC1CgC,MAAAA,WAAW,CAAChH,cAAZ,GAA6B,IAA7B;AACAgH,MAAAA,WAAW,CAAC/C,KAAZ,GAAoB,IAApB;AACA+C,MAAAA,WAAW,CAACzG,cAAZ,GAA6B,IAA7B;AACD;;AAED,SAAKV,QAAL,CAAcmH,WAAd;AACA,SAAKC,sBAAL;AACA,UAAMC,cAAc,GAAGlQ,MAAM,CAAC2L,IAAP,CAAY+D,YAAZ,CAAvB;AACAQ,IAAAA,cAAc,CAACtE,OAAf,CAAuBlB,MAAM,IAAI;AAC/B,WAAKd,IAAL,CAAU,cAAV,EAA0B8F,YAAY,CAAChF,MAAD,CAAtC,EAAgDiE,MAAhD;AACD,KAFD;;AAIA,QAAIuB,cAAc,CAAClC,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,WAAK3F,GAAL,CAAU,WAAU6H,cAAc,CAAClC,MAAO,QAA1C;AACD,KAFD,MAEO;AACL,WAAK3F,GAAL,CAAU,kBAAiB6H,cAAc,CAACC,IAAf,CAAoB,IAApB,CAA0B,EAArD;AACD;AACF;;AAEDC,EAAAA,UAAU,CAAC1F,MAAD,EAASiE,MAAM,GAAG,IAAlB,EAAwB;AAChC,SAAKY,WAAL,CAAiB,CAAC7E,MAAD,CAAjB,EAA2BiE,MAA3B;AACD;;AAED0B,EAAAA,WAAW,CAAC3F,MAAD,EAAS;AAClB,QAAI,CAAC,KAAKF,QAAL,GAAgBvB,YAAhB,CAA6BG,gBAA9B,IAAkD,KAAKwD,OAAL,CAAalC,MAAb,EAAqBc,cAA3E,EAA2F;AACzF,aAAOqE,SAAP;AACD;;AAED,UAAMS,SAAS,GAAG,KAAK1D,OAAL,CAAalC,MAAb,EAAqBgD,QAArB,IAAiC,KAAnD;AACA,UAAMA,QAAQ,GAAG,CAAC4C,SAAlB;AACA,SAAK7F,YAAL,CAAkBC,MAAlB,EAA0B;AACxBgD,MAAAA;AADwB,KAA1B;AAGA,SAAK9D,IAAL,CAAU,cAAV,EAA0Bc,MAA1B,EAAkCgD,QAAlC;AACA,WAAOA,QAAP;AACD;;AAED6C,EAAAA,QAAQ,GAAG;AACT,UAAM7E,YAAY,GAAG,EAAE,GAAG,KAAKlB,QAAL,GAAgBxC;AAArB,KAArB;AAEA,UAAMwI,sBAAsB,GAAGxQ,MAAM,CAAC2L,IAAP,CAAYD,YAAZ,EAA0BvF,MAA1B,CAAiCiH,IAAI,IAAI;AACtE,aAAO,CAAC1B,YAAY,CAAC0B,IAAD,CAAZ,CAAmBtB,QAAnB,CAA4BN,cAA7B,IAA+CE,YAAY,CAAC0B,IAAD,CAAZ,CAAmBtB,QAAnB,CAA4BL,aAAlF;AACD,KAF8B,CAA/B;AAGA+E,IAAAA,sBAAsB,CAAC5E,OAAvB,CAA+BwB,IAAI,IAAI;AACrC,YAAMvB,WAAW,GAAG,EAAE,GAAGH,YAAY,CAAC0B,IAAD,CAAjB;AAClBM,QAAAA,QAAQ,EAAE;AADQ,OAApB;AAGAhC,MAAAA,YAAY,CAAC0B,IAAD,CAAZ,GAAqBvB,WAArB;AACD,KALD;AAMA,SAAKhD,QAAL,CAAc;AACZb,MAAAA,KAAK,EAAE0D;AADK,KAAd;AAGA,SAAK9B,IAAL,CAAU,WAAV;AACD;;AAED6G,EAAAA,SAAS,GAAG;AACV,UAAM/E,YAAY,GAAG,EAAE,GAAG,KAAKlB,QAAL,GAAgBxC;AAArB,KAArB;AAEA,UAAMwI,sBAAsB,GAAGxQ,MAAM,CAAC2L,IAAP,CAAYD,YAAZ,EAA0BvF,MAA1B,CAAiCiH,IAAI,IAAI;AACtE,aAAO,CAAC1B,YAAY,CAAC0B,IAAD,CAAZ,CAAmBtB,QAAnB,CAA4BN,cAA7B,IAA+CE,YAAY,CAAC0B,IAAD,CAAZ,CAAmBtB,QAAnB,CAA4BL,aAAlF;AACD,KAF8B,CAA/B;AAGA+E,IAAAA,sBAAsB,CAAC5E,OAAvB,CAA+BwB,IAAI,IAAI;AACrC,YAAMvB,WAAW,GAAG,EAAE,GAAGH,YAAY,CAAC0B,IAAD,CAAjB;AAClBM,QAAAA,QAAQ,EAAE,KADQ;AAElBT,QAAAA,KAAK,EAAE;AAFW,OAApB;AAIAvB,MAAAA,YAAY,CAAC0B,IAAD,CAAZ,GAAqBvB,WAArB;AACD,KAND;AAOA,SAAKhD,QAAL,CAAc;AACZb,MAAAA,KAAK,EAAE0D;AADK,KAAd;AAGA,SAAK9B,IAAL,CAAU,YAAV;AACD;;AAED8G,EAAAA,QAAQ,GAAG;AACT,UAAMhF,YAAY,GAAG,EAAE,GAAG,KAAKlB,QAAL,GAAgBxC;AAArB,KAArB;AAEA,UAAM2I,YAAY,GAAG3Q,MAAM,CAAC2L,IAAP,CAAYD,YAAZ,EAA0BvF,MAA1B,CAAiCiH,IAAI,IAAI;AAC5D,aAAO1B,YAAY,CAAC0B,IAAD,CAAZ,CAAmBH,KAA1B;AACD,KAFoB,CAArB;AAGA0D,IAAAA,YAAY,CAAC/E,OAAb,CAAqBwB,IAAI,IAAI;AAC3B,YAAMvB,WAAW,GAAG,EAAE,GAAGH,YAAY,CAAC0B,IAAD,CAAjB;AAClBM,QAAAA,QAAQ,EAAE,KADQ;AAElBT,QAAAA,KAAK,EAAE;AAFW,OAApB;AAIAvB,MAAAA,YAAY,CAAC0B,IAAD,CAAZ,GAAqBvB,WAArB;AACD,KAND;AAOA,SAAKhD,QAAL,CAAc;AACZb,MAAAA,KAAK,EAAE0D,YADK;AAEZuB,MAAAA,KAAK,EAAE;AAFK,KAAd;AAIA,SAAKrD,IAAL,CAAU,WAAV,EAAuB+G,YAAvB;;AAEA,QAAIA,YAAY,CAAC3C,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,aAAO4C,OAAO,CAACC,OAAR,CAAgB;AACrBC,QAAAA,UAAU,EAAE,EADS;AAErBC,QAAAA,MAAM,EAAE;AAFa,OAAhB,CAAP;AAID;;AAED,UAAMjB,QAAQ,GAAGjQ,2BAA2B,CAAC,IAAD,EAAOmD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgE2N,YAAhE,EAA8E;AAC7FK,MAAAA,mBAAmB,EAAE,IADwE,CACnE;;AADmE,KAA9E,CAAjB;;AAKA,WAAOnR,2BAA2B,CAAC,IAAD,EAAOsD,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D2M,QAA1D,CAAP;AACD;;AAEDmB,EAAAA,SAAS,GAAG;AACV,SAAKrH,IAAL,CAAU,YAAV;AACA,UAAM;AACJ5B,MAAAA;AADI,QAEF,KAAKwC,QAAL,EAFJ;AAGA,UAAMgF,OAAO,GAAGxP,MAAM,CAAC2L,IAAP,CAAY3D,KAAZ,CAAhB;;AAEA,QAAIwH,OAAO,CAACxB,MAAZ,EAAoB;AAClB,WAAKuB,WAAL,CAAiBC,OAAjB,EAA0B,YAA1B;AACD;;AAED,SAAK3G,QAAL,CAAc;AACZQ,MAAAA,aAAa,EAAE,CADH;AAEZ4D,MAAAA,KAAK,EAAE,IAFK;AAGZ1D,MAAAA,cAAc,EAAE;AAHJ,KAAd;AAKD;;AAED2H,EAAAA,WAAW,CAACxG,MAAD,EAAS;AAClB,SAAKD,YAAL,CAAkBC,MAAlB,EAA0B;AACxBuC,MAAAA,KAAK,EAAE,IADiB;AAExBS,MAAAA,QAAQ,EAAE;AAFc,KAA1B;AAIA,SAAK9D,IAAL,CAAU,cAAV,EAA0Bc,MAA1B;;AAEA,UAAMoF,QAAQ,GAAGjQ,2BAA2B,CAAC,IAAD,EAAOmD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgE,CAAC0H,MAAD,CAAhE,EAA0E;AACzFsG,MAAAA,mBAAmB,EAAE,IADoE,CAC/D;;AAD+D,KAA1E,CAAjB;;AAKA,WAAOnR,2BAA2B,CAAC,IAAD,EAAOsD,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D2M,QAA1D,CAAP;AACD;;AAEDqB,EAAAA,KAAK,GAAG;AACN,SAAKF,SAAL;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,SAAK/G,cAAL,CAAoBC,MAAM,IAAI;AAC5B,UAAIA,MAAM,CAAC+G,QAAP,IAAmB/G,MAAM,CAAC+G,QAAP,CAAgBD,MAAvC,EAA+C;AAC7C9G,QAAAA,MAAM,CAAC+G,QAAP,CAAgBD,MAAhB;AACD;AACF,KAJD;AAKD;;AAED1I,EAAAA,iBAAiB,CAAC0E,IAAD,EAAOZ,IAAP,EAAa;AAC5B,QAAI,CAAC,KAAKI,OAAL,CAAaQ,IAAI,CAAC/M,EAAlB,CAAL,EAA4B;AAC1B,WAAKgI,GAAL,CAAU,0DAAyD+E,IAAI,CAAC/M,EAAG,EAA3E;AACA;AACD,KAJ2B,CAI1B;;;AAGF,UAAMiR,iBAAiB,GAAGC,MAAM,CAACC,QAAP,CAAgBhF,IAAI,CAACiF,UAArB,KAAoCjF,IAAI,CAACiF,UAAL,GAAkB,CAAhF;AACA,SAAKhH,YAAL,CAAkB2C,IAAI,CAAC/M,EAAvB,EAA2B;AACzByL,MAAAA,QAAQ,EAAE,EAAE,GAAG,KAAKc,OAAL,CAAaQ,IAAI,CAAC/M,EAAlB,EAAsByL,QAA3B;AACRP,QAAAA,aAAa,EAAEiB,IAAI,CAACjB,aADZ;AAERkG,QAAAA,UAAU,EAAEjF,IAAI,CAACiF,UAFT;AAGRnG,QAAAA,UAAU,EAAEgG,iBAAiB,GAAGI,IAAI,CAACC,KAAL,CAAWnF,IAAI,CAACjB,aAAL,GAAqBiB,IAAI,CAACiF,UAA1B,GAAuC,GAAlD,CAAH,GAA4D;AAHjF;AADe,KAA3B;AAOA,SAAKxB,sBAAL;AACD;;AAEDA,EAAAA,sBAAsB,GAAG;AACvB;AACA;AACA,UAAMjI,KAAK,GAAG,KAAK6E,QAAL,EAAd;AACA,UAAM+E,UAAU,GAAG5J,KAAK,CAAC7B,MAAN,CAAaiH,IAAI,IAAI;AACtC,aAAOA,IAAI,CAACtB,QAAL,CAAcL,aAAd,IAA+B2B,IAAI,CAACtB,QAAL,CAAcwB,UAA7C,IAA2DF,IAAI,CAACtB,QAAL,CAAcyB,WAAhF;AACD,KAFkB,CAAnB;;AAIA,QAAIqE,UAAU,CAAC5D,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,WAAKpE,IAAL,CAAU,UAAV,EAAsB,CAAtB;AACA,WAAKf,QAAL,CAAc;AACZQ,QAAAA,aAAa,EAAE;AADH,OAAd;AAGA;AACD;;AAED,UAAMwI,UAAU,GAAGD,UAAU,CAACzL,MAAX,CAAkBiH,IAAI,IAAIA,IAAI,CAACtB,QAAL,CAAc2F,UAAd,IAA4B,IAAtD,CAAnB;AACA,UAAMK,YAAY,GAAGF,UAAU,CAACzL,MAAX,CAAkBiH,IAAI,IAAIA,IAAI,CAACtB,QAAL,CAAc2F,UAAd,IAA4B,IAAtD,CAArB;;AAEA,QAAII,UAAU,CAAC7D,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,YAAM+D,WAAW,GAAGH,UAAU,CAAC5D,MAAX,GAAoB,GAAxC;AACA,YAAMgE,eAAe,GAAGF,YAAY,CAACG,MAAb,CAAoB,CAACC,GAAD,EAAM9E,IAAN,KAAe;AACzD,eAAO8E,GAAG,GAAG9E,IAAI,CAACtB,QAAL,CAAcR,UAA3B;AACD,OAFuB,EAErB,CAFqB,CAAxB;AAGA,YAAMjC,aAAa,GAAGqI,IAAI,CAACC,KAAL,CAAWK,eAAe,GAAGD,WAAlB,GAAgC,GAA3C,CAAtB;AACA,WAAKlJ,QAAL,CAAc;AACZQ,QAAAA;AADY,OAAd;AAGA;AACD;;AAED,QAAI8I,SAAS,GAAGN,UAAU,CAACI,MAAX,CAAkB,CAACC,GAAD,EAAM9E,IAAN,KAAe;AAC/C,aAAO8E,GAAG,GAAG9E,IAAI,CAACtB,QAAL,CAAc2F,UAA3B;AACD,KAFe,EAEb,CAFa,CAAhB;AAGA,UAAMW,WAAW,GAAGD,SAAS,GAAGN,UAAU,CAAC7D,MAA3C;AACAmE,IAAAA,SAAS,IAAIC,WAAW,GAAGN,YAAY,CAAC9D,MAAxC;AACA,QAAIqE,YAAY,GAAG,CAAnB;AACAR,IAAAA,UAAU,CAACjG,OAAX,CAAmBwB,IAAI,IAAI;AACzBiF,MAAAA,YAAY,IAAIjF,IAAI,CAACtB,QAAL,CAAcP,aAA9B;AACD,KAFD;AAGAuG,IAAAA,YAAY,CAAClG,OAAb,CAAqBwB,IAAI,IAAI;AAC3BiF,MAAAA,YAAY,IAAID,WAAW,IAAIhF,IAAI,CAACtB,QAAL,CAAcR,UAAd,IAA4B,CAAhC,CAAX,GAAgD,GAAhE;AACD,KAFD;AAGA,QAAIjC,aAAa,GAAG8I,SAAS,KAAK,CAAd,GAAkB,CAAlB,GAAsBT,IAAI,CAACC,KAAL,CAAWU,YAAY,GAAGF,SAAf,GAA2B,GAAtC,CAA1C,CA3CuB,CA2C+D;AACtF;;AAEA,QAAI9I,aAAa,GAAG,GAApB,EAAyB;AACvBA,MAAAA,aAAa,GAAG,GAAhB;AACD;;AAED,SAAKR,QAAL,CAAc;AACZQ,MAAAA;AADY,KAAd;AAGA,SAAKO,IAAL,CAAU,UAAV,EAAsBP,aAAtB;AACD;AACD;AACF;AACA;AACA;;;AAGE5E,EAAAA,kBAAkB,GAAG;AACnB,UAAM6N,MAAM,GAAG,OAAOxI,MAAM,CAACyI,SAAP,CAAiBC,MAAxB,KAAmC,WAAnC,GAAiD1I,MAAM,CAACyI,SAAP,CAAiBC,MAAlE,GAA2E,IAA1F;;AAEA,QAAI,CAACF,MAAL,EAAa;AACX,WAAK1I,IAAL,CAAU,YAAV;AACA,WAAKN,IAAL,CAAU,KAAKuB,IAAL,CAAU,sBAAV,CAAV,EAA6C,OAA7C,EAAsD,CAAtD;AACA,WAAK4H,UAAL,GAAkB,IAAlB;AACD,KAJD,MAIO;AACL,WAAK7I,IAAL,CAAU,WAAV;;AAEA,UAAI,KAAK6I,UAAT,EAAqB;AACnB,aAAK7I,IAAL,CAAU,aAAV;AACA,aAAKN,IAAL,CAAU,KAAKuB,IAAL,CAAU,qBAAV,CAAV,EAA4C,SAA5C,EAAuD,IAAvD;AACA,aAAK4H,UAAL,GAAkB,KAAlB;AACD;AACF;AACF;;AAEDC,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKtK,IAAL,CAAU/H,EAAjB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACE;;;AAGAsS,EAAAA,GAAG,CAACC,MAAD,EAASxK,IAAT,EAAe;AAChB,QAAI,OAAOwK,MAAP,KAAkB,UAAtB,EAAkC;AAChC,YAAMC,GAAG,GAAI,oCAAmCD,MAAM,KAAK,IAAX,GAAkB,MAAlB,GAA2B,OAAOA,MAAO,GAA7E,GAAkF,oEAA9F;AACA,YAAM,IAAIxS,SAAJ,CAAcyS,GAAd,CAAN;AACD,KAJe,CAId;;;AAGF,UAAMvI,MAAM,GAAG,IAAIsI,MAAJ,CAAW,IAAX,EAAiBxK,IAAjB,CAAf;AACA,UAAM0K,QAAQ,GAAGxI,MAAM,CAACjK,EAAxB;;AAEA,QAAI,CAACyS,QAAL,EAAe;AACb,YAAM,IAAItR,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,QAAI,CAAC8I,MAAM,CAACyE,IAAZ,EAAkB;AAChB,YAAM,IAAIvN,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,UAAMuR,mBAAmB,GAAG,KAAKC,SAAL,CAAeF,QAAf,CAA5B;;AAEA,QAAIC,mBAAJ,EAAyB;AACvB,YAAMF,GAAG,GAAI,iCAAgCE,mBAAmB,CAAC1S,EAAG,KAAxD,GAAgE,kBAAiByS,QAAS,MAA1F,GAAkG,mFAA9G;AACA,YAAM,IAAItR,KAAJ,CAAUqR,GAAV,CAAN;AACD;;AAED,QAAID,MAAM,CAACtK,OAAX,EAAoB;AAClB,WAAKD,GAAL,CAAU,SAAQyK,QAAS,KAAIF,MAAM,CAACtK,OAAQ,EAA9C;AACD;;AAED,QAAIgC,MAAM,CAACyE,IAAP,IAAelP,2BAA2B,CAAC,IAAD,EAAOoC,QAAP,CAA3B,CAA4CA,QAA5C,CAAnB,EAA0E;AACxEpC,MAAAA,2BAA2B,CAAC,IAAD,EAAOoC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDqI,MAAM,CAACyE,IAA7D,EAAmEI,IAAnE,CAAwE7E,MAAxE;AACD,KAFD,MAEO;AACLzK,MAAAA,2BAA2B,CAAC,IAAD,EAAOoC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDqI,MAAM,CAACyE,IAA7D,IAAqE,CAACzE,MAAD,CAArE;AACD;;AAEDA,IAAAA,MAAM,CAAC2I,OAAP;AACA,WAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGED,EAAAA,SAAS,CAAC3S,EAAD,EAAK;AACZ,SAAK,MAAMyI,OAAX,IAAsB9I,MAAM,CAAC8M,MAAP,CAAcjN,2BAA2B,CAAC,IAAD,EAAOoC,QAAP,CAA3B,CAA4CA,QAA5C,CAAd,CAAtB,EAA4F;AAC1F,YAAMiR,WAAW,GAAGpK,OAAO,CAACqK,IAAR,CAAa7I,MAAM,IAAIA,MAAM,CAACjK,EAAP,KAAcA,EAArC,CAApB;AACA,UAAI6S,WAAW,IAAI,IAAnB,EAAyB,OAAOA,WAAP;AAC1B;;AAED,WAAOrD,SAAP;AACD;;AAEW,GAAXlQ,WAAW,EAAEoP,IAAF,EAAQ;AAClB,WAAOlP,2BAA2B,CAAC,IAAD,EAAOoC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsD8M,IAAtD,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGE1E,EAAAA,cAAc,CAAC+I,MAAD,EAAS;AACrBpT,IAAAA,MAAM,CAAC8M,MAAP,CAAcjN,2BAA2B,CAAC,IAAD,EAAOoC,QAAP,CAA3B,CAA4CA,QAA5C,CAAd,EAAqEoR,IAArE,CAA0E,CAA1E,EAA6EzH,OAA7E,CAAqFwH,MAArF;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEE,EAAAA,YAAY,CAACC,QAAD,EAAW;AACrB,SAAKlL,GAAL,CAAU,mBAAkBkL,QAAQ,CAAClT,EAAG,EAAxC;AACA,SAAKuJ,IAAL,CAAU,eAAV,EAA2B2J,QAA3B;;AAEA,QAAIA,QAAQ,CAACC,SAAb,EAAwB;AACtBD,MAAAA,QAAQ,CAACC,SAAT;AACD;;AAED,UAAMC,IAAI,GAAG5T,2BAA2B,CAAC,IAAD,EAAOoC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDsR,QAAQ,CAACxE,IAA/D,CAAb,CARqB,CAQ8D;AACnF;AACA;;;AAGA,UAAM2E,KAAK,GAAGD,IAAI,CAACE,SAAL,CAAeC,IAAI,IAAIA,IAAI,CAACvT,EAAL,KAAYkT,QAAQ,CAAClT,EAA5C,CAAd;;AAEA,QAAIqT,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBD,MAAAA,IAAI,CAACI,MAAL,CAAYH,KAAZ,EAAmB,CAAnB;AACD;;AAED,UAAMtJ,KAAK,GAAG,KAAKI,QAAL,EAAd;AACA,UAAMsJ,YAAY,GAAG;AACnBhL,MAAAA,OAAO,EAAE,EAAE,GAAGsB,KAAK,CAACtB,OAAX;AACP,SAACyK,QAAQ,CAAClT,EAAV,GAAewP;AADR;AADU,KAArB;AAKA,SAAKhH,QAAL,CAAciL,YAAd;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,KAAK,GAAG;AACN,SAAK1L,GAAL,CAAU,yBAAwB,KAAKD,IAAL,CAAU/H,EAAG,+CAA/C;AACA,SAAK8Q,KAAL;;AAEAtR,IAAAA,2BAA2B,CAAC,IAAD,EAAOqC,iBAAP,CAA3B,CAAqDA,iBAArD;;AAEA,SAAKmI,cAAL,CAAoBC,MAAM,IAAI;AAC5B,WAAKgJ,YAAL,CAAkBhJ,MAAlB;AACD,KAFD;;AAIA,QAAI,OAAOR,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACkK,mBAA5C,EAAiE;AAC/DlK,MAAAA,MAAM,CAACkK,mBAAP,CAA2B,QAA3B,EAAqCnU,2BAA2B,CAAC,IAAD,EAAOkD,mBAAP,CAA3B,CAAuDA,mBAAvD,CAArC;AACA+G,MAAAA,MAAM,CAACkK,mBAAP,CAA2B,SAA3B,EAAsCnU,2BAA2B,CAAC,IAAD,EAAOkD,mBAAP,CAA3B,CAAuDA,mBAAvD,CAAtC;AACD;AACF;;AAEDkR,EAAAA,QAAQ,GAAG;AACT,UAAM;AACJ3K,MAAAA;AADI,QAEF,KAAKkB,QAAL,EAFJ;AAGA,SAAK3B,QAAL,CAAc;AACZS,MAAAA,IAAI,EAAEA,IAAI,CAAC4K,KAAL,CAAW,CAAX;AADM,KAAd;AAGA,SAAKtK,IAAL,CAAU,aAAV;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEN,EAAAA,IAAI,CAACxH,OAAD,EAAUiN,IAAI,GAAG,MAAjB,EAAyBoF,QAAQ,GAAG,IAApC,EAA0C;AAC5C,UAAMC,gBAAgB,GAAG,OAAOtS,OAAP,KAAmB,QAA5C;AACA,SAAK+G,QAAL,CAAc;AACZS,MAAAA,IAAI,EAAE,CAAC,GAAG,KAAKkB,QAAL,GAAgBlB,IAApB,EAA0B;AAC9ByF,QAAAA,IAD8B;AAE9BjN,QAAAA,OAAO,EAAEsS,gBAAgB,GAAGtS,OAAO,CAACA,OAAX,GAAqBA,OAFhB;AAG9BwN,QAAAA,OAAO,EAAE8E,gBAAgB,GAAGtS,OAAO,CAACwN,OAAX,GAAqB;AAHhB,OAA1B;AADM,KAAd;AAOA+E,IAAAA,UAAU,CAAC,MAAM,KAAKJ,QAAL,EAAP,EAAwBE,QAAxB,CAAV;AACA,SAAKvK,IAAL,CAAU,cAAV;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGEvB,EAAAA,GAAG,CAACvG,OAAD,EAAUiN,IAAV,EAAgB;AACjB,UAAM;AACJ7G,MAAAA;AADI,QAEF,KAAKE,IAFT;;AAIA,YAAQ2G,IAAR;AACE,WAAK,OAAL;AACE7G,QAAAA,MAAM,CAAC+E,KAAP,CAAanL,OAAb;AACA;;AAEF,WAAK,SAAL;AACEoG,QAAAA,MAAM,CAACoM,IAAP,CAAYxS,OAAZ;AACA;;AAEF;AACEoG,QAAAA,MAAM,CAACf,KAAP,CAAarF,OAAb;AACA;AAXJ;AAaD;AACD;AACF;AACA;;;AAGEyS,EAAAA,OAAO,CAACzE,QAAD,EAAW;AAChB,SAAKzH,GAAL,CAAU,uCAAsCyH,QAAS,GAAzD;;AAEA,QAAI,CAAC,KAAKtF,QAAL,GAAgBzB,cAAhB,CAA+B+G,QAA/B,CAAL,EAA+C;AAC7CjQ,MAAAA,2BAA2B,CAAC,IAAD,EAAOqD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgE4M,QAAhE;;AAEA,aAAOc,OAAO,CAAC4D,MAAR,CAAe,IAAIhT,KAAJ,CAAU,oBAAV,CAAf,CAAP;AACD;;AAED,WAAO3B,2BAA2B,CAAC,IAAD,EAAOsD,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D2M,QAA1D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGe,GAAZlQ,YAAY,EAAE,GAAG8B,IAAL,EAAW;AACtB,WAAO7B,2BAA2B,CAAC,IAAD,EAAOmD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgE,GAAGtB,IAAnE,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE+S,EAAAA,aAAa,CAAC3E,QAAD,EAAWtD,IAAX,EAAiB;AAC5B,QAAI,CAAC3M,2BAA2B,CAAC,IAAD,EAAOoD,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D6M,QAA1D,CAAL,EAA0E;AACxE,WAAKzH,GAAL,CAAU,2DAA0DyH,QAAS,EAA7E;AACA;AACD;;AAED,UAAM;AACJ/G,MAAAA;AADI,QAEF,KAAKyB,QAAL,EAFJ;AAGA,UAAMkK,aAAa,GAAG,EAAE,GAAG3L,cAAc,CAAC+G,QAAD,CAAnB;AACpBrB,MAAAA,MAAM,EAAE,EAAE,GAAG1F,cAAc,CAAC+G,QAAD,CAAd,CAAyBrB,MAA9B;AACN,WAAGjC;AADG;AADY,KAAtB;AAKA,SAAK3D,QAAL,CAAc;AACZE,MAAAA,cAAc,EAAE,EAAE,GAAGA,cAAL;AACd,SAAC+G,QAAD,GAAY4E;AADE;AADJ,KAAd;AAKD;AACD;AACF;AACA;AACA;AACA;;AAGE;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,MAAM,GAAG;AACP,QAAIC,qBAAJ;;AAEA,QAAI,EAAE,CAACA,qBAAqB,GAAG/U,2BAA2B,CAAC,IAAD,EAAOoC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsD4S,QAA/E,KAA4F,IAA5F,IAAoGD,qBAAqB,CAAC5G,MAA5H,CAAJ,EAAyI;AACvI,WAAK3F,GAAL,CAAS,mCAAT,EAA8C,SAA9C;AACD;;AAED,QAAI;AACFL,MAAAA;AADE,QAEA,KAAKwC,QAAL,EAFJ;AAGA,UAAMsK,oBAAoB,GAAG,KAAK1M,IAAL,CAAUL,cAAV,CAAyBC,KAAzB,CAA7B;;AAEA,QAAI8M,oBAAoB,KAAK,KAA7B,EAAoC;AAClC,aAAOlE,OAAO,CAAC4D,MAAR,CAAe,IAAIhT,KAAJ,CAAU,+DAAV,CAAf,CAAP;AACD;;AAED,QAAIsT,oBAAoB,IAAI,OAAOA,oBAAP,KAAgC,QAA5D,EAAsE;AACpE9M,MAAAA,KAAK,GAAG8M,oBAAR,CADoE,CACtC;AAC9B;;AAEA,WAAKjM,QAAL,CAAc;AACZb,QAAAA;AADY,OAAd;AAGD;;AAED,WAAO4I,OAAO,CAACC,OAAR,GAAkBkE,IAAlB,CAAuB,MAAM;AAClClV,MAAAA,2BAA2B,CAAC,IAAD,EAAO2C,sBAAP,CAA3B,CAA0DA,sBAA1D,EAAkFwF,KAAlF;;AAEAnI,MAAAA,2BAA2B,CAAC,IAAD,EAAO4C,wBAAP,CAA3B,CAA4DA,wBAA5D,EAAsFuF,KAAtF;AACD,KAJM,EAIJgN,KAJI,CAIEtG,GAAG,IAAI;AACd7O,MAAAA,2BAA2B,CAAC,IAAD,EAAO6C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFgM,GAApF;AACD,KANM,EAMJqG,IANI,CAMC,MAAM;AACZ,YAAM;AACJhM,QAAAA;AADI,UAEF,KAAKyB,QAAL,EAFJ,CADY,CAGS;;AAErB,YAAMyK,uBAAuB,GAAGjV,MAAM,CAAC8M,MAAP,CAAc/D,cAAd,EAA8BmM,OAA9B,CAAsCC,IAAI,IAAIA,IAAI,CAAC3F,OAAnD,CAAhC;AACA,YAAM4F,cAAc,GAAG,EAAvB;AACApV,MAAAA,MAAM,CAAC2L,IAAP,CAAY3D,KAAZ,EAAmB4D,OAAnB,CAA2BlB,MAAM,IAAI;AACnC,cAAM0C,IAAI,GAAG,KAAKR,OAAL,CAAalC,MAAb,CAAb,CADmC,CACA;;AAEnC,YAAI,CAAC0C,IAAI,CAACtB,QAAL,CAAcL,aAAf,IAAgCwJ,uBAAuB,CAACI,OAAxB,CAAgC3K,MAAhC,MAA4C,CAAC,CAAjF,EAAoF;AAClF0K,UAAAA,cAAc,CAACjG,IAAf,CAAoB/B,IAAI,CAAC/M,EAAzB;AACD;AACF,OAND;;AAQA,YAAMyP,QAAQ,GAAGjQ,2BAA2B,CAAC,IAAD,EAAOmD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgEoS,cAAhE,CAAjB;;AAEA,aAAOvV,2BAA2B,CAAC,IAAD,EAAOsD,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D2M,QAA1D,CAAP;AACD,KAxBM,EAwBJkF,KAxBI,CAwBEtG,GAAG,IAAI;AACd7O,MAAAA,2BAA2B,CAAC,IAAD,EAAO6C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFgM,GAApF,EAAyF;AACvF4G,QAAAA,YAAY,EAAE;AADyE,OAAzF;AAGD,KA5BM,CAAP;AA6BD;;AA9uCQ;;AAkvCX,SAASjR,mBAAT,CAA6B+I,IAA7B,EAAmCpF,KAAK,GAAG,KAAK6E,QAAL,EAA3C,EAA4D;AAC1D,QAAM;AACJxF,IAAAA,WADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,gBAHI;AAIJC,IAAAA,gBAJI;AAKJE,IAAAA;AALI,MAMF,KAAKU,IAAL,CAAUhB,YANd;;AAQA,MAAII,gBAAJ,EAAsB;AACpB,QAAIQ,KAAK,CAACgG,MAAN,GAAe,CAAf,GAAmBxG,gBAAvB,EAAyC;AACvC,YAAM,IAAIjG,gBAAJ,CAAsB,GAAE,KAAKsJ,IAAL,CAAU,mBAAV,EAA+B;AAC3DwE,QAAAA,WAAW,EAAE7H;AAD8C,OAA/B,CAE3B,EAFG,CAAN;AAGD;AACF;;AAED,MAAIE,gBAAJ,EAAsB;AACpB,UAAM6N,iBAAiB,GAAG7N,gBAAgB,CAAC4G,IAAjB,CAAsBS,IAAI,IAAI;AACtD;AACA,UAAIA,IAAI,CAACsG,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EAA4B;AAC1B,YAAI,CAACjI,IAAI,CAAC2B,IAAV,EAAgB,OAAO,KAAP;AAChB,eAAOjO,KAAK,CAACsM,IAAI,CAAC2B,IAAL,CAAUyG,OAAV,CAAkB,OAAlB,EAA2B,EAA3B,CAAD,EAAiCzG,IAAjC,CAAZ;AACD,OALqD,CAKpD;;;AAGF,UAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmB3B,IAAI,CAACqI,SAA5B,EAAuC;AACrC,eAAOrI,IAAI,CAACqI,SAAL,CAAeC,WAAf,OAAiC3G,IAAI,CAAC4G,MAAL,CAAY,CAAZ,EAAeD,WAAf,EAAxC;AACD;;AAED,aAAO,KAAP;AACD,KAbyB,CAA1B;;AAeA,QAAI,CAACH,iBAAL,EAAwB;AACtB,YAAMK,sBAAsB,GAAGlO,gBAAgB,CAACyI,IAAjB,CAAsB,IAAtB,CAA/B;AACA,YAAM,IAAI5O,gBAAJ,CAAqB,KAAKsJ,IAAL,CAAU,2BAAV,EAAuC;AAChEgL,QAAAA,KAAK,EAAED;AADyD,OAAvC,CAArB,CAAN;AAGD;AACF,GAvCyD,CAuCxD;;;AAGF,MAAIrO,gBAAgB,IAAI6F,IAAI,CAAC0I,IAAL,IAAa,IAArC,EAA2C;AACzC,QAAIC,cAAc,GAAG,CAArB;AACAA,IAAAA,cAAc,IAAI3I,IAAI,CAAC0I,IAAvB;AACA9N,IAAAA,KAAK,CAAC4D,OAAN,CAAcoK,CAAC,IAAI;AACjBD,MAAAA,cAAc,IAAIC,CAAC,CAACF,IAApB;AACD,KAFD;;AAIA,QAAIC,cAAc,GAAGxO,gBAArB,EAAuC;AACrC,YAAM,IAAIhG,gBAAJ,CAAqB,KAAKsJ,IAAL,CAAU,aAAV,EAAyB;AAClDiL,QAAAA,IAAI,EAAEjV,aAAa,CAAC0G,gBAAD,CAD+B;AAElD6F,QAAAA,IAAI,EAAEA,IAAI,CAAC7M;AAFuC,OAAzB,CAArB,CAAN;AAID;AACF,GAvDyD,CAuDxD;;;AAGF,MAAI8G,WAAW,IAAI+F,IAAI,CAAC0I,IAAL,IAAa,IAAhC,EAAsC;AACpC,QAAI1I,IAAI,CAAC0I,IAAL,GAAYzO,WAAhB,EAA6B;AAC3B,YAAM,IAAI9F,gBAAJ,CAAqB,KAAKsJ,IAAL,CAAU,aAAV,EAAyB;AAClDiL,QAAAA,IAAI,EAAEjV,aAAa,CAACwG,WAAD,CAD+B;AAElD+F,QAAAA,IAAI,EAAEA,IAAI,CAAC7M;AAFuC,OAAzB,CAArB,CAAN;AAID;AACF,GAjEyD,CAiExD;;;AAGF,MAAI+G,WAAW,IAAI8F,IAAI,CAAC0I,IAAL,IAAa,IAAhC,EAAsC;AACpC,QAAI1I,IAAI,CAAC0I,IAAL,GAAYxO,WAAhB,EAA6B;AAC3B,YAAM,IAAI/F,gBAAJ,CAAqB,KAAKsJ,IAAL,CAAU,cAAV,EAA0B;AACnDiL,QAAAA,IAAI,EAAEjV,aAAa,CAACyG,WAAD;AADgC,OAA1B,CAArB,CAAN;AAGD;AACF;AACF;;AAED,SAASlD,uBAAT,CAAiC4D,KAAjC,EAAwC;AACtC,QAAM;AACJP,IAAAA;AADI,MAEF,KAAKW,IAAL,CAAUhB,YAFd;;AAIA,MAAIpH,MAAM,CAAC2L,IAAP,CAAY3D,KAAZ,EAAmBgG,MAAnB,GAA4BvG,gBAAhC,EAAkD;AAChD,UAAM,IAAIlG,gBAAJ,CAAsB,GAAE,KAAKsJ,IAAL,CAAU,yBAAV,EAAqC;AACjEwE,MAAAA,WAAW,EAAE5H;AADoD,KAArC,CAE3B,EAFG,CAAN;AAGD;AACF;;AAED,SAAStD,yBAAT,CAAmC6D,KAAnC,EAA0C;AACxC,QAAM;AACJL,IAAAA;AADI,MAEF,KAAKS,IAAL,CAAUhB,YAFd;AAGA,QAAM;AACJlH,IAAAA;AADI,MAEFF,MAAM,CAACC,SAFX;AAGA,QAAM8B,MAAM,GAAG,EAAf;;AAEA,OAAK,MAAM2I,MAAX,IAAqB1K,MAAM,CAAC2L,IAAP,CAAY3D,KAAZ,CAArB,EAAyC;AACvC,UAAMoF,IAAI,GAAG,KAAKR,OAAL,CAAalC,MAAb,CAAb;;AAEA,SAAK,IAAIwE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvH,kBAAkB,CAACqG,MAAvC,EAA+CkB,CAAC,EAAhD,EAAoD;AAClD,UAAI,CAAChP,cAAc,CAACC,IAAf,CAAoBiN,IAAI,CAACxF,IAAzB,EAA+BD,kBAAkB,CAACuH,CAAD,CAAjD,CAAD,IAA0D9B,IAAI,CAACxF,IAAL,CAAUD,kBAAkB,CAACuH,CAAD,CAA5B,MAAqC,EAAnG,EAAuG;AACrG,cAAMR,GAAG,GAAG,IAAInN,gBAAJ,CAAsB,GAAE,KAAKsJ,IAAL,CAAU,gCAAV,EAA4C;AAC9EoL,UAAAA,QAAQ,EAAE7I,IAAI,CAAC7M;AAD+D,SAA5C,CAEjC,EAFS,CAAZ;AAGAwB,QAAAA,MAAM,CAACoN,IAAP,CAAYT,GAAZ;;AAEA7O,QAAAA,2BAA2B,CAAC,IAAD,EAAO6C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFgM,GAApF,EAAyF;AACvFtB,UAAAA,IADuF;AAEvFkI,UAAAA,YAAY,EAAE,KAFyE;AAGvFY,UAAAA,QAAQ,EAAE;AAH6E,SAAzF;AAKD;AACF;AACF;;AAED,MAAInU,MAAM,CAACiM,MAAX,EAAmB;AACjB,UAAM,IAAIhM,yBAAJ,CAA+B,GAAE,KAAK6I,IAAL,CAAU,0BAAV,CAAsC,EAAvE,EAA0E9I,MAA1E,CAAN;AACD;AACF;;AAED,SAASmC,wBAAT,CAAkCwK,GAAlC,EAAuC;AACrC4G,EAAAA,YAAY,GAAG,IADsB;AAErClI,EAAAA,IAAI,GAAG,IAF8B;AAGrC8I,EAAAA,QAAQ,GAAG;AAH0B,IAInC,EAJJ,EAIQ;AACN,QAAMpU,OAAO,GAAG,OAAO4M,GAAP,KAAe,QAAf,GAA0BA,GAAG,CAAC5M,OAA9B,GAAwC4M,GAAxD;AACA,QAAMY,OAAO,GAAG,OAAOZ,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACY,OAA/B,GAAyCZ,GAAG,CAACY,OAA7C,GAAuD,EAAvE,CAFM,CAEqE;AAC3E;;AAEA,MAAI6G,qBAAqB,GAAGrU,OAA5B;;AAEA,MAAIwN,OAAJ,EAAa;AACX6G,IAAAA,qBAAqB,IAAK,IAAG7G,OAAQ,EAArC;AACD;;AAED,MAAIZ,GAAG,CAAC/M,aAAR,EAAuB;AACrB,SAAK0G,GAAL,CAAS8N,qBAAT;AACA,SAAKvM,IAAL,CAAU,oBAAV,EAAgCwD,IAAhC,EAAsCsB,GAAtC;AACD,GAHD,MAGO;AACL,SAAKrG,GAAL,CAAS8N,qBAAT,EAAgC,OAAhC;AACD,GAhBK,CAgBJ;AACF;;;AAGA,MAAIb,YAAJ,EAAkB;AAChB,SAAKhM,IAAL,CAAU;AACRxH,MAAAA,OADQ;AAERwN,MAAAA;AAFQ,KAAV,EAGG,OAHH,EAGY,KAAKlH,IAAL,CAAUD,WAHtB;AAID;;AAED,MAAI+N,QAAJ,EAAc;AACZ,UAAM,OAAOxH,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgC,IAAIlN,KAAJ,CAAUkN,GAAV,CAAtC;AACD;AACF;;AAED,SAASzK,wBAAT,CAAkCmJ,IAAlC,EAAwC;AACtC,QAAM;AACJpE,IAAAA;AADI,MAEF,KAAKwB,QAAL,EAFJ;;AAIA,MAAIxB,cAAc,KAAK,KAAvB,EAA8B;AAC5BnJ,IAAAA,2BAA2B,CAAC,IAAD,EAAO6C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoF,IAAInB,gBAAJ,CAAqB,KAAKsJ,IAAL,CAAU,oBAAV,CAArB,CAApF,EAA2I;AACzIuC,MAAAA;AADyI,KAA3I;AAGD;AACF;;AAED,SAASpJ,+BAAT,CAAyCgE,KAAzC,EAAgDoO,cAAhD,EAAgE;AAC9D,QAAMC,QAAQ,GAAGrV,WAAW,CAACoV,cAAD,CAA5B;AACA,QAAMH,QAAQ,GAAG7U,WAAW,CAACiV,QAAD,EAAWD,cAAX,CAA5B;AACA,QAAME,aAAa,GAAGrV,uBAAuB,CAACgV,QAAD,CAAvB,CAAkCR,SAAxD;AACA,QAAMc,QAAQ,GAAGC,OAAO,CAACJ,cAAc,CAACG,QAAhB,CAAxB;AACA,QAAM7L,MAAM,GAAGxJ,cAAc,CAAC,EAAE,GAAGkV,cAAL;AAC5BrH,IAAAA,IAAI,EAAEsH;AADsB,GAAD,CAA7B;;AAIA,MAAI,KAAKzH,wBAAL,CAA8BlE,MAA9B,CAAJ,EAA2C;AACzC,UAAMuC,KAAK,GAAG,IAAI1L,gBAAJ,CAAqB,KAAKsJ,IAAL,CAAU,cAAV,EAA0B;AAC3DoL,MAAAA;AAD2D,KAA1B,CAArB,CAAd;;AAIApW,IAAAA,2BAA2B,CAAC,IAAD,EAAO6C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFuK,KAApF,EAA2F;AACzFG,MAAAA,IAAI,EAAEgJ;AADmF,KAA3F;AAGD;;AAED,QAAMxO,IAAI,GAAGwO,cAAc,CAACxO,IAAf,IAAuB,EAApC;AACAA,EAAAA,IAAI,CAACrH,IAAL,GAAY0V,QAAZ;AACArO,EAAAA,IAAI,CAACmH,IAAL,GAAYsH,QAAZ,CArB8D,CAqBxC;;AAEtB,QAAMP,IAAI,GAAGvE,MAAM,CAACC,QAAP,CAAgB4E,cAAc,CAAC5J,IAAf,CAAoBsJ,IAApC,IAA4CM,cAAc,CAAC5J,IAAf,CAAoBsJ,IAAhE,GAAuE,IAApF;AACA,MAAIhH,OAAO,GAAG;AACZ2H,IAAAA,MAAM,EAAEL,cAAc,CAACK,MAAf,IAAyB,EADrB;AAEZpW,IAAAA,EAAE,EAAEqK,MAFQ;AAGZnK,IAAAA,IAAI,EAAE0V,QAHM;AAIZR,IAAAA,SAAS,EAAEa,aAAa,IAAI,EAJhB;AAKZ1O,IAAAA,IAAI,EAAE,EAAE,GAAG,KAAK4C,QAAL,GAAgB5C,IAArB;AACJ,SAAGA;AADC,KALM;AAQZmH,IAAAA,IAAI,EAAEsH,QARM;AASZ7J,IAAAA,IAAI,EAAE4J,cAAc,CAAC5J,IATT;AAUZV,IAAAA,QAAQ,EAAE;AACRR,MAAAA,UAAU,EAAE,CADJ;AAERC,MAAAA,aAAa,EAAE,CAFP;AAGRkG,MAAAA,UAAU,EAAEqE,IAHJ;AAIRtK,MAAAA,cAAc,EAAE,KAJR;AAKRC,MAAAA,aAAa,EAAE;AALP,KAVE;AAiBZqK,IAAAA,IAjBY;AAkBZS,IAAAA,QAlBY;AAmBZG,IAAAA,MAAM,EAAEN,cAAc,CAACM,MAAf,IAAyB,EAnBrB;AAoBZC,IAAAA,OAAO,EAAEP,cAAc,CAACO;AApBZ,GAAd;AAsBA,QAAMC,uBAAuB,GAAG,KAAKxO,IAAL,CAAUP,iBAAV,CAA4BiH,OAA5B,EAAqC9G,KAArC,CAAhC;;AAEA,MAAI4O,uBAAuB,KAAK,KAAhC,EAAuC;AACrC;AACA/W,IAAAA,2BAA2B,CAAC,IAAD,EAAO6C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoF,IAAInB,gBAAJ,CAAqB,+DAArB,CAApF,EAA2K;AACzK+T,MAAAA,YAAY,EAAE,KAD2J;AAEzKc,MAAAA;AAFyK,KAA3K;AAID,GAND,MAMO,IAAI,OAAOQ,uBAAP,KAAmC,QAAnC,IAA+CA,uBAAuB,KAAK,IAA/E,EAAqF;AAC1F9H,IAAAA,OAAO,GAAG8H,uBAAV;AACD;;AAED,MAAI;AACF,UAAMC,UAAU,GAAG7W,MAAM,CAAC2L,IAAP,CAAY3D,KAAZ,EAAmB8O,GAAnB,CAAuB5H,CAAC,IAAIlH,KAAK,CAACkH,CAAD,CAAjC,CAAnB;;AAEArP,IAAAA,2BAA2B,CAAC,IAAD,EAAO0C,kBAAP,CAA3B,CAAsDA,kBAAtD,EAA0EuM,OAA1E,EAAmF+H,UAAnF;AACD,GAJD,CAIE,OAAOnI,GAAP,EAAY;AACZ7O,IAAAA,2BAA2B,CAAC,IAAD,EAAO6C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFgM,GAApF,EAAyF;AACvFtB,MAAAA,IAAI,EAAE0B;AADiF,KAAzF;AAGD;;AAED,SAAOA,OAAP;AACD;;AAED,SAAS/K,oBAAT,GAAgC;AAC9B,MAAI,KAAKqE,IAAL,CAAUpB,WAAV,IAAyB,CAAC,KAAK+P,oBAAnC,EAAyD;AACvD,SAAKA,oBAAL,GAA4B1C,UAAU,CAAC,MAAM;AAC3C,WAAK0C,oBAAL,GAA4B,IAA5B;AACA,WAAKpC,MAAL,GAAcK,KAAd,CAAoBtG,GAAG,IAAI;AACzB,YAAI,CAACA,GAAG,CAAC/M,aAAT,EAAwB;AACtB,eAAK0G,GAAL,CAASqG,GAAG,CAACsI,KAAJ,IAAatI,GAAG,CAAC5M,OAAjB,IAA4B4M,GAArC;AACD;AACF,OAJD;AAKD,KAPqC,EAOnC,CAPmC,CAAtC;AAQD;AACF;;AAED,SAAS5K,cAAT,GAA0B;AACxB;AACF;AACA;AACA;AACA;AACE,QAAMmT,YAAY,GAAG,CAAChK,KAAD,EAAQG,IAAR,EAAc8J,QAAd,KAA2B;AAC9C,QAAIC,QAAQ,GAAGlK,KAAK,CAACnL,OAAN,IAAiB,eAAhC;;AAEA,QAAImL,KAAK,CAACqC,OAAV,EAAmB;AACjB6H,MAAAA,QAAQ,IAAK,IAAGlK,KAAK,CAACqC,OAAQ,EAA9B;AACD;;AAED,SAAKzG,QAAL,CAAc;AACZoE,MAAAA,KAAK,EAAEkK;AADK,KAAd;;AAIA,QAAI/J,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAAC/M,EAAL,IAAW,KAAKmK,QAAL,GAAgBxC,KAA/C,EAAsD;AACpD,WAAKyC,YAAL,CAAkB2C,IAAI,CAAC/M,EAAvB,EAA2B;AACzB4M,QAAAA,KAAK,EAAEkK,QADkB;AAEzBD,QAAAA;AAFyB,OAA3B;AAID;AACF,GAjBD;;AAmBA,OAAKlN,EAAL,CAAQ,OAAR,EAAiBiN,YAAjB;AACA,OAAKjN,EAAL,CAAQ,cAAR,EAAwB,CAACoD,IAAD,EAAOH,KAAP,EAAciK,QAAd,KAA2B;AACjDD,IAAAA,YAAY,CAAChK,KAAD,EAAQG,IAAR,EAAc8J,QAAd,CAAZ;;AAEA,QAAI,OAAOjK,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACnL,OAAvC,EAAgD;AAC9C,YAAMsV,QAAQ,GAAG,IAAI5V,KAAJ,CAAUyL,KAAK,CAACnL,OAAhB,CAAjB;AACAsV,MAAAA,QAAQ,CAAC9H,OAAT,GAAmBrC,KAAK,CAACnL,OAAzB;;AAEA,UAAImL,KAAK,CAACqC,OAAV,EAAmB;AACjB8H,QAAAA,QAAQ,CAAC9H,OAAT,IAAqB,IAAGrC,KAAK,CAACqC,OAAQ,EAAtC;AACD;;AAED8H,MAAAA,QAAQ,CAACtV,OAAT,GAAmB,KAAK+I,IAAL,CAAU,gBAAV,EAA4B;AAC7CuC,QAAAA,IAAI,EAAEA,IAAI,CAAC7M;AADkC,OAA5B,CAAnB;;AAIAV,MAAAA,2BAA2B,CAAC,IAAD,EAAO6C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoF0U,QAApF,EAA8F;AAC5FlB,QAAAA,QAAQ,EAAE;AADkF,OAA9F;AAGD,KAfD,MAeO;AACLrW,MAAAA,2BAA2B,CAAC,IAAD,EAAO6C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFuK,KAApF,EAA2F;AACzFiJ,QAAAA,QAAQ,EAAE;AAD+E,OAA3F;AAGD;AACF,GAvBD;AAwBA,OAAKlM,EAAL,CAAQ,QAAR,EAAkB,MAAM;AACtB,SAAKnB,QAAL,CAAc;AACZoE,MAAAA,KAAK,EAAE;AADK,KAAd;AAGD,GAJD;AAKA,OAAKjD,EAAL,CAAQ,gBAAR,EAA0BoD,IAAI,IAAI;AAChC,QAAI,CAAC,KAAKR,OAAL,CAAaQ,IAAI,CAAC/M,EAAlB,CAAL,EAA4B;AAC1B,WAAKgI,GAAL,CAAU,0DAAyD+E,IAAI,CAAC/M,EAAG,EAA3E;AACA;AACD;;AAED,SAAKoK,YAAL,CAAkB2C,IAAI,CAAC/M,EAAvB,EAA2B;AACzByL,MAAAA,QAAQ,EAAE;AACRL,QAAAA,aAAa,EAAE4L,IAAI,CAACC,GAAL,EADP;AAER9L,QAAAA,cAAc,EAAE,KAFR;AAGRF,QAAAA,UAAU,EAAE,CAHJ;AAIRC,QAAAA,aAAa,EAAE,CAJP;AAKRkG,QAAAA,UAAU,EAAErE,IAAI,CAAC0I;AALT;AADe,KAA3B;AASD,GAfD;AAgBA,OAAK9L,EAAL,CAAQ,iBAAR,EAA2B,KAAKtB,iBAAhC;AACA,OAAKsB,EAAL,CAAQ,gBAAR,EAA0B,CAACoD,IAAD,EAAOmK,UAAP,KAAsB;AAC9C,QAAI,CAAC,KAAK3K,OAAL,CAAaQ,IAAI,CAAC/M,EAAlB,CAAL,EAA4B;AAC1B,WAAKgI,GAAL,CAAU,0DAAyD+E,IAAI,CAAC/M,EAAG,EAA3E;AACA;AACD;;AAED,UAAM2R,eAAe,GAAG,KAAKpF,OAAL,CAAaQ,IAAI,CAAC/M,EAAlB,EAAsByL,QAA9C;AACA,SAAKrB,YAAL,CAAkB2C,IAAI,CAAC/M,EAAvB,EAA2B;AACzByL,MAAAA,QAAQ,EAAE,EAAE,GAAGkG,eAAL;AACRzE,QAAAA,WAAW,EAAE1N,2BAA2B,CAAC,IAAD,EAAOyC,eAAP,CAA3B,CAAmDA,eAAnD,EAAoEwT,IAApE,GAA2E,CAA3E,GAA+E;AAC1F0B,UAAAA,IAAI,EAAE;AADoF,SAA/E,GAET,IAHI;AAIRhM,QAAAA,cAAc,EAAE,IAJR;AAKRF,QAAAA,UAAU,EAAE,GALJ;AAMRC,QAAAA,aAAa,EAAEyG,eAAe,CAACP;AANvB,OADe;AASzByF,MAAAA,QAAQ,EAAEK,UATe;AAUzBE,MAAAA,SAAS,EAAEF,UAAU,CAACE,SAVG;AAWzB/J,MAAAA,QAAQ,EAAE;AAXe,KAA3B,EAP8C,CAmB1C;AACJ;;AAEA,QAAIN,IAAI,CAAC0I,IAAL,IAAa,IAAjB,EAAuB;AACrB,WAAKrL,YAAL,CAAkB2C,IAAI,CAAC/M,EAAvB,EAA2B;AACzByV,QAAAA,IAAI,EAAEyB,UAAU,CAAChM,aAAX,IAA4ByG,eAAe,CAACP;AADzB,OAA3B;AAGD;;AAED,SAAKxB,sBAAL;AACD,GA7BD;AA8BA,OAAKjG,EAAL,CAAQ,qBAAR,EAA+B,CAACoD,IAAD,EAAOtB,QAAP,KAAoB;AACjD,QAAI,CAAC,KAAKc,OAAL,CAAaQ,IAAI,CAAC/M,EAAlB,CAAL,EAA4B;AAC1B,WAAKgI,GAAL,CAAU,0DAAyD+E,IAAI,CAAC/M,EAAG,EAA3E;AACA;AACD;;AAED,SAAKoK,YAAL,CAAkB2C,IAAI,CAAC/M,EAAvB,EAA2B;AACzByL,MAAAA,QAAQ,EAAE,EAAE,GAAG,KAAKc,OAAL,CAAaQ,IAAI,CAAC/M,EAAlB,EAAsByL,QAA3B;AACRwB,QAAAA,UAAU,EAAExB;AADJ;AADe,KAA3B;AAKD,GAXD;AAYA,OAAK9B,EAAL,CAAQ,qBAAR,EAA+BoD,IAAI,IAAI;AACrC,QAAI,CAAC,KAAKR,OAAL,CAAaQ,IAAI,CAAC/M,EAAlB,CAAL,EAA4B;AAC1B,WAAKgI,GAAL,CAAU,0DAAyD+E,IAAI,CAAC/M,EAAG,EAA3E;AACA;AACD;;AAED,UAAM2H,KAAK,GAAG,EAAE,GAAG,KAAKwC,QAAL,GAAgBxC;AAArB,KAAd;AAEAA,IAAAA,KAAK,CAACoF,IAAI,CAAC/M,EAAN,CAAL,GAAiB,EAAE,GAAG2H,KAAK,CAACoF,IAAI,CAAC/M,EAAN,CAAV;AACfyL,MAAAA,QAAQ,EAAE,EAAE,GAAG9D,KAAK,CAACoF,IAAI,CAAC/M,EAAN,CAAL,CAAeyL;AAApB;AADK,KAAjB;AAIA,WAAO9D,KAAK,CAACoF,IAAI,CAAC/M,EAAN,CAAL,CAAeyL,QAAf,CAAwBwB,UAA/B;AACA,SAAKzE,QAAL,CAAc;AACZb,MAAAA;AADY,KAAd;AAGD,GAhBD;AAiBA,OAAKgC,EAAL,CAAQ,sBAAR,EAAgC,CAACoD,IAAD,EAAOtB,QAAP,KAAoB;AAClD,QAAI,CAAC,KAAKc,OAAL,CAAaQ,IAAI,CAAC/M,EAAlB,CAAL,EAA4B;AAC1B,WAAKgI,GAAL,CAAU,0DAAyD+E,IAAI,CAAC/M,EAAG,EAA3E;AACA;AACD;;AAED,SAAKoK,YAAL,CAAkB2C,IAAI,CAAC/M,EAAvB,EAA2B;AACzByL,MAAAA,QAAQ,EAAE,EAAE,GAAG,KAAKtB,QAAL,GAAgBxC,KAAhB,CAAsBoF,IAAI,CAAC/M,EAA3B,EAA+ByL,QAApC;AACRyB,QAAAA,WAAW,EAAEzB;AADL;AADe,KAA3B;AAKD,GAXD;AAYA,OAAK9B,EAAL,CAAQ,sBAAR,EAAgCoD,IAAI,IAAI;AACtC,QAAI,CAAC,KAAKR,OAAL,CAAaQ,IAAI,CAAC/M,EAAlB,CAAL,EAA4B;AAC1B,WAAKgI,GAAL,CAAU,0DAAyD+E,IAAI,CAAC/M,EAAG,EAA3E;AACA;AACD;;AAED,UAAM2H,KAAK,GAAG,EAAE,GAAG,KAAKwC,QAAL,GAAgBxC;AAArB,KAAd;AAEAA,IAAAA,KAAK,CAACoF,IAAI,CAAC/M,EAAN,CAAL,GAAiB,EAAE,GAAG2H,KAAK,CAACoF,IAAI,CAAC/M,EAAN,CAAV;AACfyL,MAAAA,QAAQ,EAAE,EAAE,GAAG9D,KAAK,CAACoF,IAAI,CAAC/M,EAAN,CAAL,CAAeyL;AAApB;AADK,KAAjB;AAIA,WAAO9D,KAAK,CAACoF,IAAI,CAAC/M,EAAN,CAAL,CAAeyL,QAAf,CAAwByB,WAA/B;AACA,SAAK1E,QAAL,CAAc;AACZb,MAAAA;AADY,KAAd;AAGD,GAhBD;AAiBA,OAAKgC,EAAL,CAAQ,UAAR,EAAoB,MAAM;AACxB;AACA,SAAKiG,sBAAL;AACD,GAHD,EAhKwB,CAmKpB;;AAEJ,MAAI,OAAOnG,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAAC4N,gBAA5C,EAA8D;AAC5D5N,IAAAA,MAAM,CAAC4N,gBAAP,CAAwB,QAAxB,EAAkC7X,2BAA2B,CAAC,IAAD,EAAOkD,mBAAP,CAA3B,CAAuDA,mBAAvD,CAAlC;AACA+G,IAAAA,MAAM,CAAC4N,gBAAP,CAAwB,SAAxB,EAAmC7X,2BAA2B,CAAC,IAAD,EAAOkD,mBAAP,CAA3B,CAAuDA,mBAAvD,CAAnC;AACAsR,IAAAA,UAAU,CAACxU,2BAA2B,CAAC,IAAD,EAAOkD,mBAAP,CAA3B,CAAuDA,mBAAvD,CAAD,EAA8E,IAA9E,CAAV;AACD;AACF;;AAED,SAASc,cAAT,CAAwB2L,OAAxB,EAAiCpH,IAAI,GAAG,EAAxC,EAA4C;AAC1C;AACA,QAAM;AACJ4I,IAAAA,mBAAmB,GAAG;AADlB,MAEF5I,IAFJ;AAGA,QAAM;AACJY,IAAAA,cADI;AAEJD,IAAAA;AAFI,MAGF,KAAKyB,QAAL,EAHJ;;AAKA,MAAI,CAACxB,cAAD,IAAmB,CAACgI,mBAAxB,EAA6C;AAC3C,UAAM,IAAIxP,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,QAAMsO,QAAQ,GAAGnP,MAAM,EAAvB;AACA,OAAKiJ,IAAL,CAAU,QAAV,EAAoB;AAClBvJ,IAAAA,EAAE,EAAEyP,QADc;AAElBN,IAAAA;AAFkB,GAApB;AAIA,OAAK3G,QAAL,CAAc;AACZG,IAAAA,cAAc,EAAE,KAAKZ,IAAL,CAAUlB,0BAAV,KAAyC,KAAzC,IAAkD,KAAKkB,IAAL,CAAUnB,oBAAV,KAAmC,KADzF;AAEZ8B,IAAAA,cAAc,EAAE,EAAE,GAAGA,cAAL;AACd,OAAC+G,QAAD,GAAY;AACVN,QAAAA,OADU;AAEVmI,QAAAA,IAAI,EAAE,CAFI;AAGVlJ,QAAAA,MAAM,EAAE;AAHE;AADE;AAFJ,GAAd;AAUA,SAAOqB,QAAP;AACD;;AAED,SAASlM,WAAT,CAAqBkM,QAArB,EAA+B;AAC7B,QAAM;AACJ/G,IAAAA;AADI,MAEF,KAAKyB,QAAL,EAFJ;AAGA,SAAOzB,cAAc,CAAC+G,QAAD,CAArB;AACD;;AAED,SAASnM,cAAT,CAAwBmM,QAAxB,EAAkC;AAChC,QAAM/G,cAAc,GAAG,EAAE,GAAG,KAAKyB,QAAL,GAAgBzB;AAArB,GAAvB;AAEA,SAAOA,cAAc,CAAC+G,QAAD,CAArB;AACA,OAAKjH,QAAL,CAAc;AACZE,IAAAA;AADY,GAAd;AAGD;;AAED,eAAerF,WAAf,CAA2BoM,QAA3B,EAAqC;AACnC,MAAI;AACF/G,IAAAA;AADE,MAEA,KAAKyB,QAAL,EAFJ;AAGA,MAAIkK,aAAa,GAAG3L,cAAc,CAAC+G,QAAD,CAAlC;AACA,QAAM8H,WAAW,GAAGlD,aAAa,CAACiD,IAAd,IAAsB,CAA1C;AACA,QAAME,KAAK,GAAG,CAAC,GAAGhY,2BAA2B,CAAC,IAAD,EAAOuC,cAAP,CAA3B,CAAkDA,cAAlD,CAAJ,EAAuE,GAAGvC,2BAA2B,CAAC,IAAD,EAAOwC,UAAP,CAA3B,CAA8CA,UAA9C,CAA1E,EAAqI,GAAGxC,2BAA2B,CAAC,IAAD,EAAOyC,eAAP,CAA3B,CAAmDA,eAAnD,CAAxI,CAAd;;AAEA,MAAI;AACF,SAAK,IAAIqV,IAAI,GAAGC,WAAhB,EAA6BD,IAAI,GAAGE,KAAK,CAAC7J,MAA1C,EAAkD2J,IAAI,EAAtD,EAA0D;AACxD,UAAI,CAACjD,aAAL,EAAoB;AAClB;AACD;;AAED,YAAM1I,EAAE,GAAG6L,KAAK,CAACF,IAAD,CAAhB;AACA,YAAMG,aAAa,GAAG,EAAE,GAAGpD,aAAL;AACpBiD,QAAAA;AADoB,OAAtB;AAGA,WAAK9O,QAAL,CAAc;AACZE,QAAAA,cAAc,EAAE,EAAE,GAAGA,cAAL;AACd,WAAC+G,QAAD,GAAYgI;AADE;AADJ,OAAd,EATwD,CAapD;AACJ;;AAEA,YAAM9L,EAAE,CAAC8L,aAAa,CAACtI,OAAf,EAAwBM,QAAxB,CAAR,CAhBwD,CAgBb;;AAE3C/G,MAAAA,cAAc,GAAG,KAAKyB,QAAL,GAAgBzB,cAAjC;AACA2L,MAAAA,aAAa,GAAG3L,cAAc,CAAC+G,QAAD,CAA9B;AACD;AACF,GAtBD,CAsBE,OAAOpB,GAAP,EAAY;AACZ,SAAK9E,IAAL,CAAU,OAAV,EAAmB8E,GAAnB;;AAEA7O,IAAAA,2BAA2B,CAAC,IAAD,EAAOqD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgE4M,QAAhE;;AAEA,UAAMpB,GAAN;AACD,GApCkC,CAoCjC;;;AAGF,MAAIgG,aAAJ,EAAmB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,IAAAA,aAAa,CAAClF,OAAd,CAAsB5D,OAAtB,CAA8BlB,MAAM,IAAI;AACtC,YAAM0C,IAAI,GAAG,KAAKR,OAAL,CAAalC,MAAb,CAAb;;AAEA,UAAI0C,IAAI,IAAIA,IAAI,CAACtB,QAAL,CAAcyB,WAA1B,EAAuC;AACrC,aAAK3D,IAAL,CAAU,sBAAV,EAAkCwD,IAAlC;AACD;AACF,KAND;AAOA,UAAMpF,KAAK,GAAG0M,aAAa,CAAClF,OAAd,CAAsBsH,GAAtB,CAA0BpM,MAAM,IAAI,KAAKkC,OAAL,CAAalC,MAAb,CAApC,CAAd;AACA,UAAMoG,UAAU,GAAG9I,KAAK,CAAC7B,MAAN,CAAaiH,IAAI,IAAI,CAACA,IAAI,CAACH,KAA3B,CAAnB;AACA,UAAM8D,MAAM,GAAG/I,KAAK,CAAC7B,MAAN,CAAaiH,IAAI,IAAIA,IAAI,CAACH,KAA1B,CAAf;AACA,UAAM,KAAKwH,aAAL,CAAmB3E,QAAnB,EAA6B;AACjCgB,MAAAA,UADiC;AAEjCC,MAAAA,MAFiC;AAGjCjB,MAAAA;AAHiC,KAA7B,CAAN,CArBiB,CAyBb;;AAEJ/G,IAAAA,cAAc,GAAG,KAAKyB,QAAL,GAAgBzB,cAAjC;AACA2L,IAAAA,aAAa,GAAG3L,cAAc,CAAC+G,QAAD,CAA9B;AACD,GApEkC,CAoEjC;AACF;AACA;AACA;;;AAGA,MAAIrB,MAAJ;;AAEA,MAAIiG,aAAJ,EAAmB;AACjBjG,IAAAA,MAAM,GAAGiG,aAAa,CAACjG,MAAvB;AACA,SAAK7E,IAAL,CAAU,UAAV,EAAsB6E,MAAtB;;AAEA5O,IAAAA,2BAA2B,CAAC,IAAD,EAAOqD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgE4M,QAAhE;AACD;;AAED,MAAIrB,MAAM,IAAI,IAAd,EAAoB;AAClB,SAAKpG,GAAL,CAAU,2DAA0DyH,QAAS,EAA7E;AACD;;AAED,SAAOrB,MAAP;AACD;;AAEDnL,IAAI,CAACgF,OAAL,GAAe,OAAf;AACAyP,MAAM,CAACC,OAAP,GAAiB1U,IAAjB","sourcesContent":["/* global AggregateError */\n'use strict';\n\nlet _Symbol$for, _Symbol$for2;\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\n\nconst Translator = require('@uppy/utils/lib/Translator');\n\nconst ee = require('namespace-emitter');\n\nconst {\n  nanoid\n} = require('nanoid');\n\nconst throttle = require('lodash.throttle');\n\nconst prettierBytes = require('@transloadit/prettier-bytes');\n\nconst match = require('mime-match');\n\nconst DefaultStore = require('@uppy/store-default');\n\nconst getFileType = require('@uppy/utils/lib/getFileType');\n\nconst getFileNameAndExtension = require('@uppy/utils/lib/getFileNameAndExtension');\n\nconst generateFileID = require('@uppy/utils/lib/generateFileID');\n\nconst supportsUploadProgress = require('./supportsUploadProgress');\n\nconst getFileName = require('./getFileName');\n\nconst {\n  justErrorsLogger,\n  debugLogger\n} = require('./loggers'); // Exported from here.\n\n\nclass RestrictionError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.isRestriction = true;\n  }\n\n}\n\nif (typeof AggregateError === 'undefined') {\n  // eslint-disable-next-line no-global-assign\n  globalThis.AggregateError = class AggregateError extends Error {\n    constructor(message, errors) {\n      super(message);\n      this.errors = errors;\n    }\n\n  };\n}\n\nclass AggregateRestrictionError extends AggregateError {\n  constructor(...args) {\n    super(...args);\n    this.isRestriction = true;\n  }\n\n}\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\n\n\nvar _plugins = /*#__PURE__*/_classPrivateFieldLooseKey(\"plugins\");\n\nvar _storeUnsubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"storeUnsubscribe\");\n\nvar _emitter = /*#__PURE__*/_classPrivateFieldLooseKey(\"emitter\");\n\nvar _preProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"preProcessors\");\n\nvar _uploaders = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploaders\");\n\nvar _postProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"postProcessors\");\n\nvar _checkRestrictions = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRestrictions\");\n\nvar _checkMinNumberOfFiles = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkMinNumberOfFiles\");\n\nvar _checkRequiredMetaFields = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRequiredMetaFields\");\n\nvar _showOrLogErrorAndThrow = /*#__PURE__*/_classPrivateFieldLooseKey(\"showOrLogErrorAndThrow\");\n\nvar _assertNewUploadAllowed = /*#__PURE__*/_classPrivateFieldLooseKey(\"assertNewUploadAllowed\");\n\nvar _checkAndCreateFileStateObject = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkAndCreateFileStateObject\");\n\nvar _startIfAutoProceed = /*#__PURE__*/_classPrivateFieldLooseKey(\"startIfAutoProceed\");\n\nvar _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"addListeners\");\n\nvar _updateOnlineStatus = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateOnlineStatus\");\n\nvar _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"createUpload\");\n\nvar _getUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"getUpload\");\n\nvar _removeUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"removeUpload\");\n\nvar _runUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"runUpload\");\n\n_Symbol$for = Symbol.for('uppy test: getPlugins');\n_Symbol$for2 = Symbol.for('uppy test: createUpload');\n\nclass Uppy {\n  // eslint-disable-next-line global-require\n\n  /** @type {Record<string, BasePlugin[]>} */\n\n  /**\n   * Instantiate Uppy\n   *\n   * @param {object} opts — Uppy options\n   */\n  constructor(_opts) {\n    Object.defineProperty(this, _runUpload, {\n      value: _runUpload2\n    });\n    Object.defineProperty(this, _removeUpload, {\n      value: _removeUpload2\n    });\n    Object.defineProperty(this, _getUpload, {\n      value: _getUpload2\n    });\n    Object.defineProperty(this, _createUpload, {\n      value: _createUpload2\n    });\n    Object.defineProperty(this, _addListeners, {\n      value: _addListeners2\n    });\n    Object.defineProperty(this, _startIfAutoProceed, {\n      value: _startIfAutoProceed2\n    });\n    Object.defineProperty(this, _checkAndCreateFileStateObject, {\n      value: _checkAndCreateFileStateObject2\n    });\n    Object.defineProperty(this, _assertNewUploadAllowed, {\n      value: _assertNewUploadAllowed2\n    });\n    Object.defineProperty(this, _showOrLogErrorAndThrow, {\n      value: _showOrLogErrorAndThrow2\n    });\n    Object.defineProperty(this, _checkRequiredMetaFields, {\n      value: _checkRequiredMetaFields2\n    });\n    Object.defineProperty(this, _checkMinNumberOfFiles, {\n      value: _checkMinNumberOfFiles2\n    });\n    Object.defineProperty(this, _checkRestrictions, {\n      value: _checkRestrictions2\n    });\n    Object.defineProperty(this, _plugins, {\n      writable: true,\n      value: Object.create(null)\n    });\n    Object.defineProperty(this, _storeUnsubscribe, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _emitter, {\n      writable: true,\n      value: ee()\n    });\n    Object.defineProperty(this, _preProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _uploaders, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _postProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _updateOnlineStatus, {\n      writable: true,\n      value: this.updateOnlineStatus.bind(this)\n    });\n    this.defaultLocale = {\n      strings: {\n        addBulkFilesFailed: {\n          0: 'Failed to add %{smart_count} file due to an internal error',\n          1: 'Failed to add %{smart_count} files due to internal errors'\n        },\n        youCanOnlyUploadX: {\n          0: 'You can only upload %{smart_count} file',\n          1: 'You can only upload %{smart_count} files'\n        },\n        youHaveToAtLeastSelectX: {\n          0: 'You have to select at least %{smart_count} file',\n          1: 'You have to select at least %{smart_count} files'\n        },\n        exceedsSize: '%{file} exceeds maximum allowed size of %{size}',\n        missingRequiredMetaField: 'Missing required meta fields',\n        missingRequiredMetaFieldOnFile: 'Missing required meta fields in %{fileName}',\n        inferiorSize: 'This file is smaller than the allowed size of %{size}',\n        youCanOnlyUploadFileTypes: 'You can only upload: %{types}',\n        noMoreFilesAllowed: 'Cannot add more files',\n        noDuplicates: 'Cannot add the duplicate file \\'%{fileName}\\', it already exists',\n        companionError: 'Connection with Companion failed',\n        authAborted: 'Authentication aborted',\n        companionUnauthorizeHint: 'To unauthorize to your %{provider} account, please go to %{url}',\n        failedToUpload: 'Failed to upload %{file}',\n        noInternetConnection: 'No Internet connection',\n        connectedToInternet: 'Connected to the Internet',\n        // Strings for remote providers\n        noFilesFound: 'You have no files or folders here',\n        selectX: {\n          0: 'Select %{smart_count}',\n          1: 'Select %{smart_count}'\n        },\n        allFilesFromFolderNamed: 'All files from folder %{name}',\n        openFolderNamed: 'Open folder %{name}',\n        cancel: 'Cancel',\n        logOut: 'Log out',\n        filter: 'Filter',\n        resetFilter: 'Reset filter',\n        loading: 'Loading...',\n        authenticateWithTitle: 'Please authenticate with %{pluginName} to select files',\n        authenticateWith: 'Connect to %{pluginName}',\n        signInWithGoogle: 'Sign in with Google',\n        searchImages: 'Search for images',\n        enterTextToSearch: 'Enter text to search for images',\n        backToSearch: 'Back to Search',\n        emptyFolderAdded: 'No files were added from empty folder',\n        folderAlreadyAdded: 'The folder \"%{folder}\" was already added',\n        folderAdded: {\n          0: 'Added %{smart_count} file from %{folder}',\n          1: 'Added %{smart_count} files from %{folder}'\n        }\n      }\n    };\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: false,\n\n      /**\n       * @deprecated The method should not be used\n       */\n      allowMultipleUploads: true,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: {\n        maxFileSize: null,\n        minFileSize: null,\n        maxTotalFileSize: null,\n        maxNumberOfFiles: null,\n        minNumberOfFiles: null,\n        allowedFileTypes: null,\n        requiredMetaFields: []\n      },\n      meta: {},\n      onBeforeFileAdded: currentFile => currentFile,\n      onBeforeUpload: files => files,\n      store: DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000\n    }; // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n\n    this.opts = { ...defaultOptions,\n      ..._opts,\n      restrictions: { ...defaultOptions.restrictions,\n        ...(_opts && _opts.restrictions)\n      }\n    }; // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions\n\n    if (_opts && _opts.logger && _opts.debug) {\n      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');\n    } else if (_opts && _opts.debug) {\n      this.opts.logger = debugLogger;\n    }\n\n    this.log(`Using Core v${this.constructor.VERSION}`);\n\n    if (this.opts.restrictions.allowedFileTypes && this.opts.restrictions.allowedFileTypes !== null && !Array.isArray(this.opts.restrictions.allowedFileTypes)) {\n      throw new TypeError('`restrictions.allowedFileTypes` must be an array');\n    }\n\n    this.i18nInit(); // ___Why throttle at 500ms?\n    //    - We must throttle at >250ms for superfocus in Dashboard to work well\n    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n    //    - We must throttle at around >500ms to avoid performance lags.\n    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n\n    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, {\n      leading: true,\n      trailing: true\n    });\n    this.store = this.opts.store;\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      allowNewUpload: true,\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: { ...this.opts.meta\n      },\n      info: [],\n      recoveredState: null\n    });\n    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe] = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch);\n      this.updateAll(nextState);\n    }); // Exposing uppy object on window for debugging and testing\n\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window[this.opts.id] = this;\n    }\n\n    _classPrivateFieldLooseBase(this, _addListeners)[_addListeners]();\n  }\n\n  emit(event, ...args) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].emit(event, ...args);\n  }\n\n  on(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, callback);\n\n    return this;\n  }\n\n  once(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(event, callback);\n\n    return this;\n  }\n\n  off(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, callback);\n\n    return this;\n  }\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n\n\n  updateAll(state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state);\n    });\n  }\n  /**\n   * Updates state with a patch\n   *\n   * @param {object} patch {foo: 'bar'}\n   */\n\n\n  setState(patch) {\n    this.store.setState(patch);\n  }\n  /**\n   * Returns current state.\n   *\n   * @returns {object}\n   */\n\n\n  getState() {\n    return this.store.getState();\n  }\n  /**\n   * Back compat for when uppy.state is used instead of uppy.getState().\n   *\n   * @deprecated\n   */\n\n\n  get state() {\n    // Here, state is a non-enumerable property.\n    return this.getState();\n  }\n  /**\n   * Shorthand to set state for a specific file.\n   */\n\n\n  setFileState(fileID, state) {\n    if (!this.getState().files[fileID]) {\n      throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`);\n    }\n\n    this.setState({\n      files: { ...this.getState().files,\n        [fileID]: { ...this.getState().files[fileID],\n          ...state\n        }\n      }\n    });\n  }\n\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.locale = translator.locale;\n  }\n\n  setOptions(newOpts) {\n    this.opts = { ...this.opts,\n      ...newOpts,\n      restrictions: { ...this.opts.restrictions,\n        ...(newOpts && newOpts.restrictions)\n      }\n    };\n\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta);\n    }\n\n    this.i18nInit();\n\n    if (newOpts.locale) {\n      this.iteratePlugins(plugin => {\n        plugin.setOptions();\n      });\n    } // Note: this is not the preact `setState`, it's an internal function that has the same name.\n\n\n    this.setState(); // so that UI re-renders with new options\n  }\n\n  resetProgress() {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: null\n    };\n    const files = { ...this.getState().files\n    };\n    const updatedFiles = {};\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = { ...files[fileID]\n      };\n      updatedFile.progress = { ...updatedFile.progress,\n        ...defaultProgress\n      };\n      updatedFiles[fileID] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0\n    });\n    this.emit('reset-progress');\n  }\n\n  addPreProcessor(fn) {\n    _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].add(fn);\n  }\n\n  removePreProcessor(fn) {\n    return _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].delete(fn);\n  }\n\n  addPostProcessor(fn) {\n    _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].add(fn);\n  }\n\n  removePostProcessor(fn) {\n    return _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].delete(fn);\n  }\n\n  addUploader(fn) {\n    _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].add(fn);\n  }\n\n  removeUploader(fn) {\n    return _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].delete(fn);\n  }\n\n  setMeta(data) {\n    const updatedMeta = { ...this.getState().meta,\n      ...data\n    };\n    const updatedFiles = { ...this.getState().files\n    };\n    Object.keys(updatedFiles).forEach(fileID => {\n      updatedFiles[fileID] = { ...updatedFiles[fileID],\n        meta: { ...updatedFiles[fileID].meta,\n          ...data\n        }\n      };\n    });\n    this.log('Adding metadata:');\n    this.log(data);\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles\n    });\n  }\n\n  setFileMeta(fileID, data) {\n    const updatedFiles = { ...this.getState().files\n    };\n\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that has been removed: ', fileID);\n      return;\n    }\n\n    const newMeta = { ...updatedFiles[fileID].meta,\n      ...data\n    };\n    updatedFiles[fileID] = { ...updatedFiles[fileID],\n      meta: newMeta\n    };\n    this.setState({\n      files: updatedFiles\n    });\n  }\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n\n\n  getFile(fileID) {\n    return this.getState().files[fileID];\n  }\n  /**\n   * Get all files in an array.\n   */\n\n\n  getFiles() {\n    const {\n      files\n    } = this.getState();\n    return Object.values(files);\n  }\n\n  getObjectOfFilesPerState() {\n    const {\n      files: filesObject,\n      totalProgress,\n      error\n    } = this.getState();\n    const files = Object.values(filesObject);\n    const inProgressFiles = files.filter(({\n      progress\n    }) => !progress.uploadComplete && progress.uploadStarted);\n    const newFiles = files.filter(file => !file.progress.uploadStarted);\n    const startedFiles = files.filter(file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess);\n    const uploadStartedFiles = files.filter(file => file.progress.uploadStarted);\n    const pausedFiles = files.filter(file => file.isPaused);\n    const completeFiles = files.filter(file => file.progress.uploadComplete);\n    const erroredFiles = files.filter(file => file.error);\n    const inProgressNotPausedFiles = inProgressFiles.filter(file => !file.isPaused);\n    const processingFiles = files.filter(file => file.progress.preprocess || file.progress.postprocess);\n    return {\n      newFiles,\n      startedFiles,\n      uploadStartedFiles,\n      pausedFiles,\n      completeFiles,\n      erroredFiles,\n      inProgressFiles,\n      inProgressNotPausedFiles,\n      processingFiles,\n      isUploadStarted: uploadStartedFiles.length > 0,\n      isAllComplete: totalProgress === 100 && completeFiles.length === files.length && processingFiles.length === 0,\n      isAllErrored: !!error && erroredFiles.length === files.length,\n      isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,\n      isUploadInProgress: inProgressFiles.length > 0,\n      isSomeGhost: files.some(file => file.isGhost)\n    };\n  }\n  /**\n   * A public wrapper for _checkRestrictions — checks if a file passes a set of restrictions.\n   * For use in UI pluigins (like Providers), to disallow selecting files that won’t pass restrictions.\n   *\n   * @param {object} file object to check\n   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n   * @returns {object} { result: true/false, reason: why file didn’t pass restrictions }\n   */\n\n\n  validateRestrictions(file, files) {\n    try {\n      _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](file, files);\n\n      return {\n        result: true\n      };\n    } catch (err) {\n      return {\n        result: false,\n        reason: err.message\n      };\n    }\n  }\n  /**\n   * Check if file passes a set of restrictions set in options: maxFileSize, minFileSize,\n   * maxNumberOfFiles and allowedFileTypes.\n   *\n   * @param {object} file object to check\n   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n   * @private\n   */\n\n\n  checkIfFileAlreadyExists(fileID) {\n    const {\n      files\n    } = this.getState();\n\n    if (files[fileID] && !files[fileID].isGhost) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   *\n   * Note this is extremely side-effectful and should only be done when a file state object\n   * will be added to state immediately afterward!\n   *\n   * The `files` value is passed in because it may be updated by the caller without updating the store.\n   */\n\n\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   *\n   * @param {object} file object to add\n   * @returns {string} id for the added file\n   */\n  addFile(file) {\n    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](file);\n\n    const {\n      files\n    } = this.getState();\n\n    let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, file); // Users are asked to re-select recovered files without data,\n    // and to keep the progress, meta and everthing else, we only replace said data\n\n\n    if (files[newFile.id] && files[newFile.id].isGhost) {\n      newFile = { ...files[newFile.id],\n        data: file.data,\n        isGhost: false\n      };\n      this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`);\n    }\n\n    this.setState({\n      files: { ...files,\n        [newFile.id]: newFile\n      }\n    });\n    this.emit('file-added', newFile);\n    this.emit('files-added', [newFile]);\n    this.log(`Added file: ${newFile.name}, ${newFile.id}, mime type: ${newFile.type}`);\n\n    _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n\n    return newFile.id;\n  }\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */\n\n\n  addFiles(fileDescriptors) {\n    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](); // create a copy of the files object only once\n\n\n    const files = { ...this.getState().files\n    };\n    const newFiles = [];\n    const errors = [];\n\n    for (let i = 0; i < fileDescriptors.length; i++) {\n      try {\n        let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, fileDescriptors[i]); // Users are asked to re-select recovered files without data,\n        // and to keep the progress, meta and everthing else, we only replace said data\n\n\n        if (files[newFile.id] && files[newFile.id].isGhost) {\n          newFile = { ...files[newFile.id],\n            data: fileDescriptors[i].data,\n            isGhost: false\n          };\n          this.log(`Replaced blob in a ghost file: ${newFile.name}, ${newFile.id}`);\n        }\n\n        files[newFile.id] = newFile;\n        newFiles.push(newFile);\n      } catch (err) {\n        if (!err.isRestriction) {\n          errors.push(err);\n        }\n      }\n    }\n\n    this.setState({\n      files\n    });\n    newFiles.forEach(newFile => {\n      this.emit('file-added', newFile);\n    });\n    this.emit('files-added', newFiles);\n\n    if (newFiles.length > 5) {\n      this.log(`Added batch of ${newFiles.length} files`);\n    } else {\n      Object.keys(newFiles).forEach(fileID => {\n        this.log(`Added file: ${newFiles[fileID].name}\\n id: ${newFiles[fileID].id}\\n type: ${newFiles[fileID].type}`);\n      });\n    }\n\n    if (newFiles.length > 0) {\n      _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n    }\n\n    if (errors.length > 0) {\n      let message = 'Multiple errors occurred while adding files:\\n';\n      errors.forEach(subError => {\n        message += `\\n * ${subError.message}`;\n      });\n      this.info({\n        message: this.i18n('addBulkFilesFailed', {\n          smart_count: errors.length\n        }),\n        details: message\n      }, 'error', this.opts.infoTimeout);\n\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(errors, message);\n      } else {\n        const err = new Error(message);\n        err.errors = errors;\n        throw err;\n      }\n    }\n  }\n\n  removeFiles(fileIDs, reason) {\n    const {\n      files,\n      currentUploads\n    } = this.getState();\n    const updatedFiles = { ...files\n    };\n    const updatedUploads = { ...currentUploads\n    };\n    const removedFiles = Object.create(null);\n    fileIDs.forEach(fileID => {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID];\n        delete updatedFiles[fileID];\n      }\n    }); // Remove files from the `fileIDs` list in each upload.\n\n    function fileIsNotRemoved(uploadFileID) {\n      return removedFiles[uploadFileID] === undefined;\n    }\n\n    Object.keys(updatedUploads).forEach(uploadID => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved); // Remove the upload if no files are associated with it anymore.\n\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID];\n        return;\n      }\n\n      updatedUploads[uploadID] = { ...currentUploads[uploadID],\n        fileIDs: newFileIDs\n      };\n    });\n    const stateUpdate = {\n      currentUploads: updatedUploads,\n      files: updatedFiles\n    }; // If all files were removed - allow new uploads,\n    // and clear recoveredState\n\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true;\n      stateUpdate.error = null;\n      stateUpdate.recoveredState = null;\n    }\n\n    this.setState(stateUpdate);\n    this.calculateTotalProgress();\n    const removedFileIDs = Object.keys(removedFiles);\n    removedFileIDs.forEach(fileID => {\n      this.emit('file-removed', removedFiles[fileID], reason);\n    });\n\n    if (removedFileIDs.length > 5) {\n      this.log(`Removed ${removedFileIDs.length} files`);\n    } else {\n      this.log(`Removed files: ${removedFileIDs.join(', ')}`);\n    }\n  }\n\n  removeFile(fileID, reason = null) {\n    this.removeFiles([fileID], reason);\n  }\n\n  pauseResume(fileID) {\n    if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {\n      return undefined;\n    }\n\n    const wasPaused = this.getFile(fileID).isPaused || false;\n    const isPaused = !wasPaused;\n    this.setFileState(fileID, {\n      isPaused\n    });\n    this.emit('upload-pause', fileID, isPaused);\n    return isPaused;\n  }\n\n  pauseAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: true\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('pause-all');\n  }\n\n  resumeAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: false,\n        error: null\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('resume-all');\n  }\n\n  retryAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error;\n    });\n    filesToRetry.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: false,\n        error: null\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      error: null\n    });\n    this.emit('retry-all', filesToRetry);\n\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: []\n      });\n    }\n\n    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](filesToRetry, {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n    });\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n\n  cancelAll() {\n    this.emit('cancel-all');\n    const {\n      files\n    } = this.getState();\n    const fileIDs = Object.keys(files);\n\n    if (fileIDs.length) {\n      this.removeFiles(fileIDs, 'cancel-all');\n    }\n\n    this.setState({\n      totalProgress: 0,\n      error: null,\n      recoveredState: null\n    });\n  }\n\n  retryUpload(fileID) {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false\n    });\n    this.emit('upload-retry', fileID);\n\n    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]([fileID], {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n    });\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n\n  reset() {\n    this.cancelAll();\n  }\n\n  logout() {\n    this.iteratePlugins(plugin => {\n      if (plugin.provider && plugin.provider.logout) {\n        plugin.provider.logout();\n      }\n    });\n  }\n\n  calculateProgress(file, data) {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    } // bytesTotal may be null or zero; in that case we can't divide by it\n\n\n    const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0;\n    this.setFileState(file.id, {\n      progress: { ...this.getFile(file.id).progress,\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: canHavePercentage ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0\n      }\n    });\n    this.calculateTotalProgress();\n  }\n\n  calculateTotalProgress() {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = this.getFiles();\n    const inProgress = files.filter(file => {\n      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n    });\n\n    if (inProgress.length === 0) {\n      this.emit('progress', 0);\n      this.setState({\n        totalProgress: 0\n      });\n      return;\n    }\n\n    const sizedFiles = inProgress.filter(file => file.progress.bytesTotal != null);\n    const unsizedFiles = inProgress.filter(file => file.progress.bytesTotal == null);\n\n    if (sizedFiles.length === 0) {\n      const progressMax = inProgress.length * 100;\n      const currentProgress = unsizedFiles.reduce((acc, file) => {\n        return acc + file.progress.percentage;\n      }, 0);\n      const totalProgress = Math.round(currentProgress / progressMax * 100);\n      this.setState({\n        totalProgress\n      });\n      return;\n    }\n\n    let totalSize = sizedFiles.reduce((acc, file) => {\n      return acc + file.progress.bytesTotal;\n    }, 0);\n    const averageSize = totalSize / sizedFiles.length;\n    totalSize += averageSize * unsizedFiles.length;\n    let uploadedSize = 0;\n    sizedFiles.forEach(file => {\n      uploadedSize += file.progress.bytesUploaded;\n    });\n    unsizedFiles.forEach(file => {\n      uploadedSize += averageSize * (file.progress.percentage || 0) / 100;\n    });\n    let totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100); // hot fix, because:\n    // uploadedSize ended up larger than totalSize, resulting in 1325% total\n\n    if (totalProgress > 100) {\n      totalProgress = 100;\n    }\n\n    this.setState({\n      totalProgress\n    });\n    this.emit('progress', totalProgress);\n  }\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n\n\n  updateOnlineStatus() {\n    const online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;\n\n    if (!online) {\n      this.emit('is-offline');\n      this.info(this.i18n('noInternetConnection'), 'error', 0);\n      this.wasOffline = true;\n    } else {\n      this.emit('is-online');\n\n      if (this.wasOffline) {\n        this.emit('back-online');\n        this.info(this.i18n('connectedToInternet'), 'success', 3000);\n        this.wasOffline = false;\n      }\n    }\n  }\n\n  getID() {\n    return this.opts.id;\n  }\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {object} Plugin object\n   * @param {object} [opts] object with options to be passed to Plugin\n   * @returns {object} self for chaining\n   */\n  // eslint-disable-next-line no-shadow\n\n\n  use(Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` + ' Please verify that the plugin was imported and spelled correctly.';\n      throw new TypeError(msg);\n    } // Instantiate\n\n\n    const plugin = new Plugin(this, opts);\n    const pluginId = plugin.id;\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id');\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type');\n    }\n\n    const existsPluginAlready = this.getPlugin(pluginId);\n\n    if (existsPluginAlready) {\n      const msg = `Already found a plugin named '${existsPluginAlready.id}'. ` + `Tried to use: '${pluginId}'.\\n` + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';\n      throw new Error(msg);\n    }\n\n    if (Plugin.VERSION) {\n      this.log(`Using ${pluginId} v${Plugin.VERSION}`);\n    }\n\n    if (plugin.type in _classPrivateFieldLooseBase(this, _plugins)[_plugins]) {\n      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type].push(plugin);\n    } else {\n      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type] = [plugin];\n    }\n\n    plugin.install();\n    return this;\n  }\n  /**\n   * Find one Plugin by name.\n   *\n   * @param {string} id plugin id\n   * @returns {BasePlugin|undefined}\n   */\n\n\n  getPlugin(id) {\n    for (const plugins of Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins])) {\n      const foundPlugin = plugins.find(plugin => plugin.id === id);\n      if (foundPlugin != null) return foundPlugin;\n    }\n\n    return undefined;\n  }\n\n  [_Symbol$for](type) {\n    return _classPrivateFieldLooseBase(this, _plugins)[_plugins][type];\n  }\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param {Function} method that will be run on each plugin\n   */\n\n\n  iteratePlugins(method) {\n    Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins]).flat(1).forEach(method);\n  }\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n\n\n  removePlugin(instance) {\n    this.log(`Removing plugin ${instance.id}`);\n    this.emit('plugin-remove', instance);\n\n    if (instance.uninstall) {\n      instance.uninstall();\n    }\n\n    const list = _classPrivateFieldLooseBase(this, _plugins)[_plugins][instance.type]; // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n\n\n    const index = list.findIndex(item => item.id === instance.id);\n\n    if (index !== -1) {\n      list.splice(index, 1);\n    }\n\n    const state = this.getState();\n    const updatedState = {\n      plugins: { ...state.plugins,\n        [instance.id]: undefined\n      }\n    };\n    this.setState(updatedState);\n  }\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n\n\n  close() {\n    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`);\n    this.reset();\n\n    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe]();\n\n    this.iteratePlugins(plugin => {\n      this.removePlugin(plugin);\n    });\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n      window.removeEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    }\n  }\n\n  hideInfo() {\n    const {\n      info\n    } = this.getState();\n    this.setState({\n      info: info.slice(1)\n    });\n    this.emit('info-hidden');\n  }\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   *\n   * @param {string | object} message Message to be displayed by the informer\n   * @param {string} [type]\n   * @param {number} [duration]\n   */\n\n\n  info(message, type = 'info', duration = 3000) {\n    const isComplexMessage = typeof message === 'object';\n    this.setState({\n      info: [...this.getState().info, {\n        type,\n        message: isComplexMessage ? message.message : message,\n        details: isComplexMessage ? message.details : null\n      }]\n    });\n    setTimeout(() => this.hideInfo(), duration);\n    this.emit('info-visible');\n  }\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   *\n   * @param {string|object} message to log\n   * @param {string} [type] optional `error` or `warning`\n   */\n\n\n  log(message, type) {\n    const {\n      logger\n    } = this.opts;\n\n    switch (type) {\n      case 'error':\n        logger.error(message);\n        break;\n\n      case 'warning':\n        logger.warn(message);\n        break;\n\n      default:\n        logger.debug(message);\n        break;\n    }\n  }\n  /**\n   * Restore an upload by its ID.\n   */\n\n\n  restore(uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`);\n\n    if (!this.getState().currentUploads[uploadID]) {\n      _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n\n      return Promise.reject(new Error('Nonexistent upload'));\n    }\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @returns {string} ID of this upload.\n   */\n\n\n  [_Symbol$for2](...args) {\n    return _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](...args);\n  }\n\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */\n  addResultData(uploadID, data) {\n    if (!_classPrivateFieldLooseBase(this, _getUpload)[_getUpload](uploadID)) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n      return;\n    }\n\n    const {\n      currentUploads\n    } = this.getState();\n    const currentUpload = { ...currentUploads[uploadID],\n      result: { ...currentUploads[uploadID].result,\n        ...data\n      }\n    };\n    this.setState({\n      currentUploads: { ...currentUploads,\n        [uploadID]: currentUpload\n      }\n    });\n  }\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @returns {Promise}\n   */\n  upload() {\n    var _classPrivateFieldLoo;\n\n    if (!((_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _plugins)[_plugins].uploader) != null && _classPrivateFieldLoo.length)) {\n      this.log('No uploader type plugins are used', 'warning');\n    }\n\n    let {\n      files\n    } = this.getState();\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files);\n\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));\n    }\n\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult; // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n\n      this.setState({\n        files\n      });\n    }\n\n    return Promise.resolve().then(() => {\n      _classPrivateFieldLooseBase(this, _checkMinNumberOfFiles)[_checkMinNumberOfFiles](files);\n\n      _classPrivateFieldLooseBase(this, _checkRequiredMetaFields)[_checkRequiredMetaFields](files);\n    }).catch(err => {\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err);\n    }).then(() => {\n      const {\n        currentUploads\n      } = this.getState(); // get a list of files that are currently assigned to uploads\n\n      const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs);\n      const waitingFileIDs = [];\n      Object.keys(files).forEach(fileID => {\n        const file = this.getFile(fileID); // if the file hasn't started uploading and hasn't already been assigned to an upload..\n\n        if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {\n          waitingFileIDs.push(file.id);\n        }\n      });\n\n      const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](waitingFileIDs);\n\n      return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n    }).catch(err => {\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n        showInformer: false\n      });\n    });\n  }\n\n}\n\nfunction _checkRestrictions2(file, files = this.getFiles()) {\n  const {\n    maxFileSize,\n    minFileSize,\n    maxTotalFileSize,\n    maxNumberOfFiles,\n    allowedFileTypes\n  } = this.opts.restrictions;\n\n  if (maxNumberOfFiles) {\n    if (files.length + 1 > maxNumberOfFiles) {\n      throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', {\n        smart_count: maxNumberOfFiles\n      })}`);\n    }\n  }\n\n  if (allowedFileTypes) {\n    const isCorrectFileType = allowedFileTypes.some(type => {\n      // check if this is a mime-type\n      if (type.indexOf('/') > -1) {\n        if (!file.type) return false;\n        return match(file.type.replace(/;.*?$/, ''), type);\n      } // otherwise this is likely an extension\n\n\n      if (type[0] === '.' && file.extension) {\n        return file.extension.toLowerCase() === type.substr(1).toLowerCase();\n      }\n\n      return false;\n    });\n\n    if (!isCorrectFileType) {\n      const allowedFileTypesString = allowedFileTypes.join(', ');\n      throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {\n        types: allowedFileTypesString\n      }));\n    }\n  } // We can't check maxTotalFileSize if the size is unknown.\n\n\n  if (maxTotalFileSize && file.size != null) {\n    let totalFilesSize = 0;\n    totalFilesSize += file.size;\n    files.forEach(f => {\n      totalFilesSize += f.size;\n    });\n\n    if (totalFilesSize > maxTotalFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxTotalFileSize),\n        file: file.name\n      }));\n    }\n  } // We can't check maxFileSize if the size is unknown.\n\n\n  if (maxFileSize && file.size != null) {\n    if (file.size > maxFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxFileSize),\n        file: file.name\n      }));\n    }\n  } // We can't check minFileSize if the size is unknown.\n\n\n  if (minFileSize && file.size != null) {\n    if (file.size < minFileSize) {\n      throw new RestrictionError(this.i18n('inferiorSize', {\n        size: prettierBytes(minFileSize)\n      }));\n    }\n  }\n}\n\nfunction _checkMinNumberOfFiles2(files) {\n  const {\n    minNumberOfFiles\n  } = this.opts.restrictions;\n\n  if (Object.keys(files).length < minNumberOfFiles) {\n    throw new RestrictionError(`${this.i18n('youHaveToAtLeastSelectX', {\n      smart_count: minNumberOfFiles\n    })}`);\n  }\n}\n\nfunction _checkRequiredMetaFields2(files) {\n  const {\n    requiredMetaFields\n  } = this.opts.restrictions;\n  const {\n    hasOwnProperty\n  } = Object.prototype;\n  const errors = [];\n\n  for (const fileID of Object.keys(files)) {\n    const file = this.getFile(fileID);\n\n    for (let i = 0; i < requiredMetaFields.length; i++) {\n      if (!hasOwnProperty.call(file.meta, requiredMetaFields[i]) || file.meta[requiredMetaFields[i]] === '') {\n        const err = new RestrictionError(`${this.i18n('missingRequiredMetaFieldOnFile', {\n          fileName: file.name\n        })}`);\n        errors.push(err);\n\n        _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n          file,\n          showInformer: false,\n          throwErr: false\n        });\n      }\n    }\n  }\n\n  if (errors.length) {\n    throw new AggregateRestrictionError(`${this.i18n('missingRequiredMetaField')}`, errors);\n  }\n}\n\nfunction _showOrLogErrorAndThrow2(err, {\n  showInformer = true,\n  file = null,\n  throwErr = true\n} = {}) {\n  const message = typeof err === 'object' ? err.message : err;\n  const details = typeof err === 'object' && err.details ? err.details : ''; // Restriction errors should be logged, but not as errors,\n  // as they are expected and shown in the UI.\n\n  let logMessageWithDetails = message;\n\n  if (details) {\n    logMessageWithDetails += ` ${details}`;\n  }\n\n  if (err.isRestriction) {\n    this.log(logMessageWithDetails);\n    this.emit('restriction-failed', file, err);\n  } else {\n    this.log(logMessageWithDetails, 'error');\n  } // Sometimes informer has to be shown manually by the developer,\n  // for example, in `onBeforeFileAdded`.\n\n\n  if (showInformer) {\n    this.info({\n      message,\n      details\n    }, 'error', this.opts.infoTimeout);\n  }\n\n  if (throwErr) {\n    throw typeof err === 'object' ? err : new Error(err);\n  }\n}\n\nfunction _assertNewUploadAllowed2(file) {\n  const {\n    allowNewUpload\n  } = this.getState();\n\n  if (allowNewUpload === false) {\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError(this.i18n('noMoreFilesAllowed')), {\n      file\n    });\n  }\n}\n\nfunction _checkAndCreateFileStateObject2(files, fileDescriptor) {\n  const fileType = getFileType(fileDescriptor);\n  const fileName = getFileName(fileType, fileDescriptor);\n  const fileExtension = getFileNameAndExtension(fileName).extension;\n  const isRemote = Boolean(fileDescriptor.isRemote);\n  const fileID = generateFileID({ ...fileDescriptor,\n    type: fileType\n  });\n\n  if (this.checkIfFileAlreadyExists(fileID)) {\n    const error = new RestrictionError(this.i18n('noDuplicates', {\n      fileName\n    }));\n\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {\n      file: fileDescriptor\n    });\n  }\n\n  const meta = fileDescriptor.meta || {};\n  meta.name = fileName;\n  meta.type = fileType; // `null` means the size is unknown.\n\n  const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null;\n  let newFile = {\n    source: fileDescriptor.source || '',\n    id: fileID,\n    name: fileName,\n    extension: fileExtension || '',\n    meta: { ...this.getState().meta,\n      ...meta\n    },\n    type: fileType,\n    data: fileDescriptor.data,\n    progress: {\n      percentage: 0,\n      bytesUploaded: 0,\n      bytesTotal: size,\n      uploadComplete: false,\n      uploadStarted: null\n    },\n    size,\n    isRemote,\n    remote: fileDescriptor.remote || '',\n    preview: fileDescriptor.preview\n  };\n  const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files);\n\n  if (onBeforeFileAddedResult === false) {\n    // Don’t show UI info for this error, as it should be done by the developer\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.'), {\n      showInformer: false,\n      fileDescriptor\n    });\n  } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {\n    newFile = onBeforeFileAddedResult;\n  }\n\n  try {\n    const filesArray = Object.keys(files).map(i => files[i]);\n\n    _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](newFile, filesArray);\n  } catch (err) {\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n      file: newFile\n    });\n  }\n\n  return newFile;\n}\n\nfunction _startIfAutoProceed2() {\n  if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n    this.scheduledAutoProceed = setTimeout(() => {\n      this.scheduledAutoProceed = null;\n      this.upload().catch(err => {\n        if (!err.isRestriction) {\n          this.log(err.stack || err.message || err);\n        }\n      });\n    }, 4);\n  }\n}\n\nfunction _addListeners2() {\n  /**\n   * @param {Error} error\n   * @param {object} [file]\n   * @param {object} [response]\n   */\n  const errorHandler = (error, file, response) => {\n    let errorMsg = error.message || 'Unknown error';\n\n    if (error.details) {\n      errorMsg += ` ${error.details}`;\n    }\n\n    this.setState({\n      error: errorMsg\n    });\n\n    if (file != null && file.id in this.getState().files) {\n      this.setFileState(file.id, {\n        error: errorMsg,\n        response\n      });\n    }\n  };\n\n  this.on('error', errorHandler);\n  this.on('upload-error', (file, error, response) => {\n    errorHandler(error, file, response);\n\n    if (typeof error === 'object' && error.message) {\n      const newError = new Error(error.message);\n      newError.details = error.message;\n\n      if (error.details) {\n        newError.details += ` ${error.details}`;\n      }\n\n      newError.message = this.i18n('failedToUpload', {\n        file: file.name\n      });\n\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](newError, {\n        throwErr: false\n      });\n    } else {\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {\n        throwErr: false\n      });\n    }\n  });\n  this.on('upload', () => {\n    this.setState({\n      error: null\n    });\n  });\n  this.on('upload-started', file => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: {\n        uploadStarted: Date.now(),\n        uploadComplete: false,\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: file.size\n      }\n    });\n  });\n  this.on('upload-progress', this.calculateProgress);\n  this.on('upload-success', (file, uploadResp) => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    const currentProgress = this.getFile(file.id).progress;\n    this.setFileState(file.id, {\n      progress: { ...currentProgress,\n        postprocess: _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].size > 0 ? {\n          mode: 'indeterminate'\n        } : null,\n        uploadComplete: true,\n        percentage: 100,\n        bytesUploaded: currentProgress.bytesTotal\n      },\n      response: uploadResp,\n      uploadURL: uploadResp.uploadURL,\n      isPaused: false\n    }); // Remote providers sometimes don't tell us the file size,\n    // but we can know how many bytes we uploaded once the upload is complete.\n\n    if (file.size == null) {\n      this.setFileState(file.id, {\n        size: uploadResp.bytesUploaded || currentProgress.bytesTotal\n      });\n    }\n\n    this.calculateTotalProgress();\n  });\n  this.on('preprocess-progress', (file, progress) => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: { ...this.getFile(file.id).progress,\n        preprocess: progress\n      }\n    });\n  });\n  this.on('preprocess-complete', file => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    const files = { ...this.getState().files\n    };\n    files[file.id] = { ...files[file.id],\n      progress: { ...files[file.id].progress\n      }\n    };\n    delete files[file.id].progress.preprocess;\n    this.setState({\n      files\n    });\n  });\n  this.on('postprocess-progress', (file, progress) => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: { ...this.getState().files[file.id].progress,\n        postprocess: progress\n      }\n    });\n  });\n  this.on('postprocess-complete', file => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    const files = { ...this.getState().files\n    };\n    files[file.id] = { ...files[file.id],\n      progress: { ...files[file.id].progress\n      }\n    };\n    delete files[file.id].progress.postprocess;\n    this.setState({\n      files\n    });\n  });\n  this.on('restored', () => {\n    // Files may have changed--ensure progress is still accurate.\n    this.calculateTotalProgress();\n  }); // show informer if offline\n\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    window.addEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    setTimeout(_classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus], 3000);\n  }\n}\n\nfunction _createUpload2(fileIDs, opts = {}) {\n  // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`\n  const {\n    forceAllowNewUpload = false\n  } = opts;\n  const {\n    allowNewUpload,\n    currentUploads\n  } = this.getState();\n\n  if (!allowNewUpload && !forceAllowNewUpload) {\n    throw new Error('Cannot create a new upload: already uploading.');\n  }\n\n  const uploadID = nanoid();\n  this.emit('upload', {\n    id: uploadID,\n    fileIDs\n  });\n  this.setState({\n    allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,\n    currentUploads: { ...currentUploads,\n      [uploadID]: {\n        fileIDs,\n        step: 0,\n        result: {}\n      }\n    }\n  });\n  return uploadID;\n}\n\nfunction _getUpload2(uploadID) {\n  const {\n    currentUploads\n  } = this.getState();\n  return currentUploads[uploadID];\n}\n\nfunction _removeUpload2(uploadID) {\n  const currentUploads = { ...this.getState().currentUploads\n  };\n  delete currentUploads[uploadID];\n  this.setState({\n    currentUploads\n  });\n}\n\nasync function _runUpload2(uploadID) {\n  let {\n    currentUploads\n  } = this.getState();\n  let currentUpload = currentUploads[uploadID];\n  const restoreStep = currentUpload.step || 0;\n  const steps = [..._classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors], ..._classPrivateFieldLooseBase(this, _uploaders)[_uploaders], ..._classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors]];\n\n  try {\n    for (let step = restoreStep; step < steps.length; step++) {\n      if (!currentUpload) {\n        break;\n      }\n\n      const fn = steps[step];\n      const updatedUpload = { ...currentUpload,\n        step\n      };\n      this.setState({\n        currentUploads: { ...currentUploads,\n          [uploadID]: updatedUpload\n        }\n      }); // TODO give this the `updatedUpload` object as its only parameter maybe?\n      // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n\n      await fn(updatedUpload.fileIDs, uploadID); // Update currentUpload value in case it was modified asynchronously.\n\n      currentUploads = this.getState().currentUploads;\n      currentUpload = currentUploads[uploadID];\n    }\n  } catch (err) {\n    this.emit('error', err);\n\n    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n\n    throw err;\n  } // Set result data.\n\n\n  if (currentUpload) {\n    // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n    // stuck in the postprocessing UI while the upload is fully complete.\n    // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n    // all, and never mark the postprocessing as complete. This is fine on its own but we\n    // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n    // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n    // before the postprocessing plugins can emit events.\n    //\n    // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n    // postprocessing completion, we do it instead.\n    currentUpload.fileIDs.forEach(fileID => {\n      const file = this.getFile(fileID);\n\n      if (file && file.progress.postprocess) {\n        this.emit('postprocess-complete', file);\n      }\n    });\n    const files = currentUpload.fileIDs.map(fileID => this.getFile(fileID));\n    const successful = files.filter(file => !file.error);\n    const failed = files.filter(file => file.error);\n    await this.addResultData(uploadID, {\n      successful,\n      failed,\n      uploadID\n    }); // Update currentUpload value in case it was modified asynchronously.\n\n    currentUploads = this.getState().currentUploads;\n    currentUpload = currentUploads[uploadID];\n  } // Emit completion events.\n  // This is in a separate function so that the `currentUploads` variable\n  // always refers to the latest state. In the handler right above it refers\n  // to an outdated object without the `.result` property.\n\n\n  let result;\n\n  if (currentUpload) {\n    result = currentUpload.result;\n    this.emit('complete', result);\n\n    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n  }\n\n  if (result == null) {\n    this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n  }\n\n  return result;\n}\n\nUppy.VERSION = \"2.1.1\";\nmodule.exports = Uppy;"]},"metadata":{},"sourceType":"script"}