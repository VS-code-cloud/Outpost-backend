{"ast":null,"code":"var _jsxFileName = \"/Users/albertshay/Desktop/silkroad/client/src/components/PostDetails/CommentSection.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport { Typography, TextField, Button } from '@material-ui/core/';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { commentPost } from '../../actions/posts';\nimport useStyles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CommentSection = ({\n  post\n}) => {\n  _s();\n\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const [comment, setComment] = useState('');\n  const dispatch = useDispatch();\n  const [comments, setComments] = useState(post === null || post === void 0 ? void 0 : post.comments);\n  const history = useHistory();\n  const classes = useStyles();\n  const commentsRef = useRef();\n\n  const handleComment = async () => {\n    if (!(user === null || user === void 0 ? void 0 : user.token)) {\n      history.push('/auth');\n    } else {\n      var _user$result, _commentsRef$current;\n\n      const newComments = await dispatch(commentPost(`${user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name}: ${comment}`, post._id));\n      setComment('');\n      setComments(newComments);\n      commentsRef === null || commentsRef === void 0 ? void 0 : (_commentsRef$current = commentsRef.current) === null || _commentsRef$current === void 0 ? void 0 : _commentsRef$current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.commentsOuterContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.commentsInnerContainer,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h7\",\n          className: classes.messages,\n          children: \"Messages:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), comments === null || comments === void 0 ? void 0 : comments.map((c, i) => /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.messageDetails,\n          gutterBottom: true,\n          variant: \"subtitle1\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            className: classes.messageName,\n            children: c.split(`: `)[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), \": \", c.split(`:`)[1]]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: commentsRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '70%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.leaveMessage,\n          gutterBottom: true,\n          variant: \"h7\",\n          children: \"Leave a message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          rows: 10,\n          variant: \"outlined\",\n          label: \"leave message...\",\n          multiline: true,\n          value: comment,\n          onChange: e => setComment(e.target.value),\n          InputProps: {\n            classes: {\n              root: classes.inputRoot\n            }\n          },\n          InputLabelProps: {\n            classes: {\n              root: classes.labelRoot,\n              focused: classes.labelFocused\n            }\n          },\n          margin: \"normal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.buttonMessage,\n          style: {\n            marginTop: '10px'\n          },\n          fullWidth: true,\n          disabled: !comment.length,\n          color: \"primary\",\n          variant: \"contained\",\n          onClick: handleComment,\n          children: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CommentSection, \"SArsN23e0gHsm0rKxqLWXBfdDWU=\", false, function () {\n  return [useDispatch, useHistory, useStyles];\n});\n\n_c = CommentSection;\nexport default CommentSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/src/components/PostDetails/CommentSection.jsx"],"names":["React","useState","useRef","Typography","TextField","Button","useDispatch","useHistory","commentPost","useStyles","CommentSection","post","user","JSON","parse","localStorage","getItem","comment","setComment","dispatch","comments","setComments","history","classes","commentsRef","handleComment","token","push","newComments","result","name","_id","current","scrollIntoView","behavior","commentsOuterContainer","commentsInnerContainer","messages","map","c","i","messageDetails","messageName","split","width","leaveMessage","e","target","value","root","inputRoot","labelRoot","focused","labelFocused","buttonMessage","marginTop","length"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Typography, TextField, Button } from '@material-ui/core/';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { commentPost } from '../../actions/posts';\nimport useStyles from './styles';\n\nconst CommentSection = ({ post }) => {\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const [comment, setComment] = useState('');\n  const dispatch = useDispatch();\n\n  const [comments, setComments] = useState(post?.comments);\n  const history = useHistory();\n  const classes = useStyles();\n  const commentsRef = useRef();\n\n  const handleComment = async () => {\n    if (!user?.token) {\n      history.push('/auth');\n    } else {\n      const newComments = await dispatch(\n        commentPost(`${user?.result?.name}: ${comment}`, post._id)\n      );\n\n      setComment('');\n      setComments(newComments);\n\n      commentsRef?.current?.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div>\n      <div className={classes.commentsOuterContainer}>\n        <div className={classes.commentsInnerContainer}>\n          <Typography gutterBottom variant='h7' className={classes.messages}>\n            Messages:\n          </Typography>\n          {comments?.map((c, i) => (\n            <Typography\n              key={i}\n              className={classes.messageDetails}\n              gutterBottom\n              variant='subtitle1'\n            >\n              <strong className={classes.messageName}>\n                {c.split(`: `)[0]}\n              </strong>\n              : {c.split(`:`)[1]}\n            </Typography>\n          ))}\n          <div ref={commentsRef} />\n        </div>\n        <div style={{ width: '70%' }}>\n          <Typography\n            className={classes.leaveMessage}\n            gutterBottom\n            variant='h7'\n          >\n            Leave a message\n          </Typography>\n          <TextField\n            fullWidth\n            rows={10}\n            variant='outlined'\n            label='leave message...'\n            multiline\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n            InputProps={{ classes: { root: classes.inputRoot } }}\n            InputLabelProps={{\n              classes: {\n                root: classes.labelRoot,\n                focused: classes.labelFocused,\n              },\n            }}\n            margin='normal'\n          />\n          <br />\n          <Button\n            className={classes.buttonMessage}\n            style={{ marginTop: '10px' }}\n            fullWidth\n            disabled={!comment.length}\n            color='primary'\n            variant='contained'\n            onClick={handleComment}\n          >\n            Message\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default CommentSection;\n"]},"metadata":{},"sourceType":"module"}