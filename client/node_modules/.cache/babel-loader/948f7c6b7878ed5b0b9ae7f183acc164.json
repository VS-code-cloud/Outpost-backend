{"ast":null,"code":"\"use strict\";\n\nvar _class, _temp;\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst {\n  h\n} = require('preact');\n/**\n * Progress bar\n *\n */\n\n\nmodule.exports = (_temp = _class = class ProgressBar extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    this.id = this.opts.id || 'ProgressBar';\n    this.title = 'Progress Bar';\n    this.type = 'progressindicator'; // set default options\n\n    const defaultOptions = {\n      target: 'body',\n      fixed: false,\n      hideAfterFinish: true\n    }; // merge default options with the ones set by user\n\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.render = this.render.bind(this);\n  }\n\n  render(state) {\n    const progress = state.totalProgress || 0; // before starting and after finish should be hidden if specified in the options\n\n    const isHidden = (progress === 0 || progress === 100) && this.opts.hideAfterFinish;\n    return h(\"div\", {\n      className: \"uppy uppy-ProgressBar\",\n      style: {\n        position: this.opts.fixed ? 'fixed' : 'initial'\n      },\n      \"aria-hidden\": isHidden\n    }, h(\"div\", {\n      className: \"uppy-ProgressBar-inner\",\n      style: {\n        width: `${progress}%`\n      }\n    }), h(\"div\", {\n      className: \"uppy-ProgressBar-percentage\"\n    }, progress));\n  }\n\n  install() {\n    const {\n      target\n    } = this.opts;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n\n  uninstall() {\n    this.unmount();\n  }\n\n}, _class.VERSION = \"2.0.4\", _temp);","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/progress-bar/lib/index.js"],"names":["_class","_temp","UIPlugin","require","h","module","exports","ProgressBar","constructor","uppy","opts","id","title","type","defaultOptions","target","fixed","hideAfterFinish","render","bind","state","progress","totalProgress","isHidden","className","style","position","width","install","mount","uninstall","unmount","VERSION"],"mappings":"AAAA;;AAEA,IAAIA,MAAJ,EAAYC,KAAZ;;AAEA,MAAM;AACJC,EAAAA;AADI,IAEFC,OAAO,CAAC,YAAD,CAFX;;AAIA,MAAM;AACJC,EAAAA;AADI,IAEFD,OAAO,CAAC,QAAD,CAFX;AAGA;AACA;AACA;AACA;;;AAGAE,MAAM,CAACC,OAAP,IAAkBL,KAAK,GAAGD,MAAM,GAAG,MAAMO,WAAN,SAA0BL,QAA1B,CAAmC;AACpEM,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAa;AACtB,UAAMD,IAAN,EAAYC,IAAZ;AACA,SAAKC,EAAL,GAAU,KAAKD,IAAL,CAAUC,EAAV,IAAgB,aAA1B;AACA,SAAKC,KAAL,GAAa,cAAb;AACA,SAAKC,IAAL,GAAY,mBAAZ,CAJsB,CAIW;;AAEjC,UAAMC,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,KAAK,EAAE,KAFc;AAGrBC,MAAAA,eAAe,EAAE;AAHI,KAAvB,CANsB,CAUnB;;AAEH,SAAKP,IAAL,GAAY,EAAE,GAAGI,cAAL;AACV,SAAGJ;AADO,KAAZ;AAGA,SAAKQ,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACD;;AAEDD,EAAAA,MAAM,CAACE,KAAD,EAAQ;AACZ,UAAMC,QAAQ,GAAGD,KAAK,CAACE,aAAN,IAAuB,CAAxC,CADY,CAC+B;;AAE3C,UAAMC,QAAQ,GAAG,CAACF,QAAQ,KAAK,CAAb,IAAkBA,QAAQ,KAAK,GAAhC,KAAwC,KAAKX,IAAL,CAAUO,eAAnE;AACA,WAAOb,CAAC,CAAC,KAAD,EAAQ;AACdoB,MAAAA,SAAS,EAAE,uBADG;AAEdC,MAAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE,KAAKhB,IAAL,CAAUM,KAAV,GAAkB,OAAlB,GAA4B;AADjC,OAFO;AAKd,qBAAeO;AALD,KAAR,EAMLnB,CAAC,CAAC,KAAD,EAAQ;AACVoB,MAAAA,SAAS,EAAE,wBADD;AAEVC,MAAAA,KAAK,EAAE;AACLE,QAAAA,KAAK,EAAG,GAAEN,QAAS;AADd;AAFG,KAAR,CANI,EAWJjB,CAAC,CAAC,KAAD,EAAQ;AACXoB,MAAAA,SAAS,EAAE;AADA,KAAR,EAEFH,QAFE,CAXG,CAAR;AAcD;;AAEDO,EAAAA,OAAO,GAAG;AACR,UAAM;AACJb,MAAAA;AADI,QAEF,KAAKL,IAFT;;AAIA,QAAIK,MAAJ,EAAY;AACV,WAAKc,KAAL,CAAWd,MAAX,EAAmB,IAAnB;AACD;AACF;;AAEDe,EAAAA,SAAS,GAAG;AACV,SAAKC,OAAL;AACD;;AAnDmE,CAApD,EAqDf/B,MAAM,CAACgC,OAAP,GAAiB,OArDF,EAqDW/B,KArD7B","sourcesContent":["\"use strict\";\n\nvar _class, _temp;\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst {\n  h\n} = require('preact');\n/**\n * Progress bar\n *\n */\n\n\nmodule.exports = (_temp = _class = class ProgressBar extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    this.id = this.opts.id || 'ProgressBar';\n    this.title = 'Progress Bar';\n    this.type = 'progressindicator'; // set default options\n\n    const defaultOptions = {\n      target: 'body',\n      fixed: false,\n      hideAfterFinish: true\n    }; // merge default options with the ones set by user\n\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.render = this.render.bind(this);\n  }\n\n  render(state) {\n    const progress = state.totalProgress || 0; // before starting and after finish should be hidden if specified in the options\n\n    const isHidden = (progress === 0 || progress === 100) && this.opts.hideAfterFinish;\n    return h(\"div\", {\n      className: \"uppy uppy-ProgressBar\",\n      style: {\n        position: this.opts.fixed ? 'fixed' : 'initial'\n      },\n      \"aria-hidden\": isHidden\n    }, h(\"div\", {\n      className: \"uppy-ProgressBar-inner\",\n      style: {\n        width: `${progress}%`\n      }\n    }), h(\"div\", {\n      className: \"uppy-ProgressBar-percentage\"\n    }, progress));\n  }\n\n  install() {\n    const {\n      target\n    } = this.opts;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n\n  uninstall() {\n    this.unmount();\n  }\n\n}, _class.VERSION = \"2.0.4\", _temp);"]},"metadata":{},"sourceType":"script"}