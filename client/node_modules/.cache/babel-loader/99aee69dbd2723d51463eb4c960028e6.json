{"ast":null,"code":"\"use strict\";\n\nvar _class, _temp;\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst getSpeed = require('@uppy/utils/lib/getSpeed');\n\nconst getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining');\n\nconst getTextDirection = require('@uppy/utils/lib/getTextDirection');\n\nconst statusBarStates = require('./StatusBarStates');\n\nconst StatusBarUI = require('./StatusBar');\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\n\n\nmodule.exports = (_temp = _class = class StatusBar extends UIPlugin {\n  // eslint-disable-next-line global-require\n  constructor(uppy, opts) {\n    super(uppy, opts);\n\n    this.startUpload = () => {\n      const {\n        recoveredState\n      } = this.uppy.getState();\n\n      if (recoveredState) {\n        this.uppy.emit('restore-confirmed');\n        return undefined;\n      }\n\n      return this.uppy.upload().catch(() => {// Error logged in Core\n      });\n    };\n\n    this.id = this.opts.id || 'StatusBar';\n    this.title = 'StatusBar';\n    this.type = 'progressindicator';\n    this.defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        upload: 'Upload',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        paused: 'Paused',\n        retry: 'Retry',\n        retryUpload: 'Retry upload',\n        cancel: 'Cancel',\n        pause: 'Pause',\n        resume: 'Resume',\n        done: 'Done',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded'\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files'\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files'\n        },\n        xMoreFilesAdded: {\n          0: '%{smart_count} more file added',\n          1: '%{smart_count} more files added'\n        }\n      }\n    }; // set default options\n\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null\n    };\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.install = this.install.bind(this);\n  }\n\n  render(state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState\n    } = state;\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n      inProgressNotPausedFiles,\n      isUploadStarted,\n      isAllComplete,\n      isAllErrored,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost\n    } = this.uppy.getObjectOfFilesPerState(); // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n\n    const newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles;\n    const totalETA = getTotalETA(inProgressNotPausedFiles);\n    const resumableUploads = !!capabilities.resumableUploads;\n    const supportsUploadProgress = capabilities.uploadProgress !== false;\n    let totalSize = 0;\n    let totalUploadedSize = 0;\n    startedFiles.forEach(file => {\n      totalSize += file.progress.bytesTotal || 0;\n      totalUploadedSize += file.progress.bytesUploaded || 0;\n    });\n    return StatusBarUI({\n      error,\n      uploadState: getUploadingState(isAllErrored, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete: false,\n      isAllPaused,\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl\n    });\n  }\n\n  onMount() {\n    // Set the text direction if the page has not defined one.\n    const element = this.el;\n    const direction = getTextDirection(element);\n\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  }\n\n  install() {\n    const {\n      target\n    } = this.opts;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n\n  uninstall() {\n    this.unmount();\n  }\n\n}, _class.VERSION = \"2.1.1\", _temp);\n\nfunction getTotalSpeed(files) {\n  let totalSpeed = 0;\n  files.forEach(file => {\n    totalSpeed += getSpeed(file.progress);\n  });\n  return totalSpeed;\n}\n\nfunction getTotalETA(files) {\n  const totalSpeed = getTotalSpeed(files);\n\n  if (totalSpeed === 0) {\n    return 0;\n  }\n\n  const totalBytesRemaining = files.reduce((total, file) => {\n    return total + getBytesRemaining(file.progress);\n  }, 0);\n  return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;\n}\n\nfunction getUploadingState(isAllErrored, isAllComplete, recoveredState, files) {\n  if (isAllErrored) {\n    return statusBarStates.STATE_ERROR;\n  }\n\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE;\n  }\n\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING;\n  }\n\n  let state = statusBarStates.STATE_WAITING;\n  const fileIDs = Object.keys(files);\n\n  for (let i = 0; i < fileIDs.length; i++) {\n    const {\n      progress\n    } = files[fileIDs[i]]; // If ANY files are being uploaded right now, show the uploading state.\n\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING;\n    } // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n\n\n    if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n      state = statusBarStates.STATE_PREPROCESSING;\n    } // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n\n\n    if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n      state = statusBarStates.STATE_POSTPROCESSING;\n    }\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/status-bar/lib/index.js"],"names":["_class","_temp","UIPlugin","require","getSpeed","getBytesRemaining","getTextDirection","statusBarStates","StatusBarUI","module","exports","StatusBar","constructor","uppy","opts","startUpload","recoveredState","getState","emit","undefined","upload","catch","id","title","type","defaultLocale","strings","uploading","complete","uploadFailed","paused","retry","retryUpload","cancel","pause","resume","done","filesUploadedOfTotal","dataUploadedOfTotal","xTimeLeft","uploadXFiles","uploadXNewFiles","xMoreFilesAdded","defaultOptions","target","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","i18nInit","render","bind","install","state","capabilities","files","allowNewUpload","totalProgress","error","newFiles","startedFiles","completeFiles","inProgressNotPausedFiles","isUploadStarted","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","getObjectOfFilesPerState","newFilesOrRecovered","Object","values","totalETA","getTotalETA","resumableUploads","supportsUploadProgress","uploadProgress","totalSize","totalUploadedSize","forEach","file","progress","bytesTotal","bytesUploaded","uploadState","getUploadingState","length","numUploads","i18n","isTargetDOMEl","onMount","element","el","direction","dir","mount","uninstall","unmount","VERSION","getTotalSpeed","totalSpeed","totalBytesRemaining","reduce","total","Math","round","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","fileIDs","keys","i","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _class, _temp;\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst getSpeed = require('@uppy/utils/lib/getSpeed');\n\nconst getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining');\n\nconst getTextDirection = require('@uppy/utils/lib/getTextDirection');\n\nconst statusBarStates = require('./StatusBarStates');\n\nconst StatusBarUI = require('./StatusBar');\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\n\n\nmodule.exports = (_temp = _class = class StatusBar extends UIPlugin {\n  // eslint-disable-next-line global-require\n  constructor(uppy, opts) {\n    super(uppy, opts);\n\n    this.startUpload = () => {\n      const {\n        recoveredState\n      } = this.uppy.getState();\n\n      if (recoveredState) {\n        this.uppy.emit('restore-confirmed');\n        return undefined;\n      }\n\n      return this.uppy.upload().catch(() => {// Error logged in Core\n      });\n    };\n\n    this.id = this.opts.id || 'StatusBar';\n    this.title = 'StatusBar';\n    this.type = 'progressindicator';\n    this.defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        upload: 'Upload',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        paused: 'Paused',\n        retry: 'Retry',\n        retryUpload: 'Retry upload',\n        cancel: 'Cancel',\n        pause: 'Pause',\n        resume: 'Resume',\n        done: 'Done',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded'\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files'\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files'\n        },\n        xMoreFilesAdded: {\n          0: '%{smart_count} more file added',\n          1: '%{smart_count} more files added'\n        }\n      }\n    }; // set default options\n\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null\n    };\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.install = this.install.bind(this);\n  }\n\n  render(state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState\n    } = state;\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n      inProgressNotPausedFiles,\n      isUploadStarted,\n      isAllComplete,\n      isAllErrored,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost\n    } = this.uppy.getObjectOfFilesPerState(); // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n\n    const newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles;\n    const totalETA = getTotalETA(inProgressNotPausedFiles);\n    const resumableUploads = !!capabilities.resumableUploads;\n    const supportsUploadProgress = capabilities.uploadProgress !== false;\n    let totalSize = 0;\n    let totalUploadedSize = 0;\n    startedFiles.forEach(file => {\n      totalSize += file.progress.bytesTotal || 0;\n      totalUploadedSize += file.progress.bytesUploaded || 0;\n    });\n    return StatusBarUI({\n      error,\n      uploadState: getUploadingState(isAllErrored, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete: false,\n      isAllPaused,\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl\n    });\n  }\n\n  onMount() {\n    // Set the text direction if the page has not defined one.\n    const element = this.el;\n    const direction = getTextDirection(element);\n\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  }\n\n  install() {\n    const {\n      target\n    } = this.opts;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n\n  uninstall() {\n    this.unmount();\n  }\n\n}, _class.VERSION = \"2.1.1\", _temp);\n\nfunction getTotalSpeed(files) {\n  let totalSpeed = 0;\n  files.forEach(file => {\n    totalSpeed += getSpeed(file.progress);\n  });\n  return totalSpeed;\n}\n\nfunction getTotalETA(files) {\n  const totalSpeed = getTotalSpeed(files);\n\n  if (totalSpeed === 0) {\n    return 0;\n  }\n\n  const totalBytesRemaining = files.reduce((total, file) => {\n    return total + getBytesRemaining(file.progress);\n  }, 0);\n  return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;\n}\n\nfunction getUploadingState(isAllErrored, isAllComplete, recoveredState, files) {\n  if (isAllErrored) {\n    return statusBarStates.STATE_ERROR;\n  }\n\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE;\n  }\n\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING;\n  }\n\n  let state = statusBarStates.STATE_WAITING;\n  const fileIDs = Object.keys(files);\n\n  for (let i = 0; i < fileIDs.length; i++) {\n    const {\n      progress\n    } = files[fileIDs[i]]; // If ANY files are being uploaded right now, show the uploading state.\n\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING;\n    } // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n\n\n    if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n      state = statusBarStates.STATE_PREPROCESSING;\n    } // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n\n\n    if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n      state = statusBarStates.STATE_POSTPROCESSING;\n    }\n  }\n\n  return state;\n}"]},"metadata":{},"sourceType":"script"}