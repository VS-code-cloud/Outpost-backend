{"ast":null,"code":"\"use strict\";\n\nvar getFileNameAndExtension = require('./getFileNameAndExtension');\n\nvar mimeTypes = require('./mimeTypes');\n\nmodule.exports = function getFileType(file) {\n  var _getFileNameAndExtens;\n\n  if (file.type) return file.type;\n  var fileExtension = file.name ? (_getFileNameAndExtens = getFileNameAndExtension(file.name).extension) == null ? void 0 : _getFileNameAndExtens.toLowerCase() : null;\n\n  if (fileExtension && fileExtension in mimeTypes) {\n    // else, see if we can map extension to a mime type\n    return mimeTypes[fileExtension];\n  } // if all fails, fall back to a generic byte stream type\n\n\n  return 'application/octet-stream';\n};","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/utils/lib/getFileType.js"],"names":["getFileNameAndExtension","require","mimeTypes","module","exports","getFileType","file","_getFileNameAndExtens","type","fileExtension","name","extension","toLowerCase"],"mappings":"AAAA;;AAEA,IAAMA,uBAAuB,GAAGC,OAAO,CAAC,2BAAD,CAAvC;;AAEA,IAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAC1C,MAAIC,qBAAJ;;AAEA,MAAID,IAAI,CAACE,IAAT,EAAe,OAAOF,IAAI,CAACE,IAAZ;AACf,MAAMC,aAAa,GAAGH,IAAI,CAACI,IAAL,GAAY,CAACH,qBAAqB,GAAGP,uBAAuB,CAACM,IAAI,CAACI,IAAN,CAAvB,CAAmCC,SAA5D,KAA0E,IAA1E,GAAiF,KAAK,CAAtF,GAA0FJ,qBAAqB,CAACK,WAAtB,EAAtG,GAA4I,IAAlK;;AAEA,MAAIH,aAAa,IAAIA,aAAa,IAAIP,SAAtC,EAAiD;AAC/C;AACA,WAAOA,SAAS,CAACO,aAAD,CAAhB;AACD,GATyC,CASxC;;;AAGF,SAAO,0BAAP;AACD,CAbD","sourcesContent":["\"use strict\";\n\nconst getFileNameAndExtension = require('./getFileNameAndExtension');\n\nconst mimeTypes = require('./mimeTypes');\n\nmodule.exports = function getFileType(file) {\n  var _getFileNameAndExtens;\n\n  if (file.type) return file.type;\n  const fileExtension = file.name ? (_getFileNameAndExtens = getFileNameAndExtension(file.name).extension) == null ? void 0 : _getFileNameAndExtens.toLowerCase() : null;\n\n  if (fileExtension && fileExtension in mimeTypes) {\n    // else, see if we can map extension to a mime type\n    return mimeTypes[fileExtension];\n  } // if all fails, fall back to a generic byte stream type\n\n\n  return 'application/octet-stream';\n};"]},"metadata":{},"sourceType":"script"}