{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _class, _temp;\n\nvar _require = require('@uppy/core'),\n    UIPlugin = _require.UIPlugin;\n\nvar getSpeed = require('@uppy/utils/lib/getSpeed');\n\nvar getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining');\n\nvar getTextDirection = require('@uppy/utils/lib/getTextDirection');\n\nvar statusBarStates = require('./StatusBarStates');\n\nvar StatusBarUI = require('./StatusBar');\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\n\n\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin) {\n  _inherits(StatusBar, _UIPlugin);\n\n  var _super = _createSuper(StatusBar);\n\n  // eslint-disable-next-line global-require\n  function StatusBar(uppy, opts) {\n    var _this;\n\n    _classCallCheck(this, StatusBar);\n\n    _this = _super.call(this, uppy, opts);\n\n    _this.startUpload = function () {\n      var _this$uppy$getState = _this.uppy.getState(),\n          recoveredState = _this$uppy$getState.recoveredState;\n\n      if (recoveredState) {\n        _this.uppy.emit('restore-confirmed');\n\n        return undefined;\n      }\n\n      return _this.uppy.upload().catch(function () {// Error logged in Core\n      });\n    };\n\n    _this.id = _this.opts.id || 'StatusBar';\n    _this.title = 'StatusBar';\n    _this.type = 'progressindicator';\n    _this.defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        upload: 'Upload',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        paused: 'Paused',\n        retry: 'Retry',\n        retryUpload: 'Retry upload',\n        cancel: 'Cancel',\n        pause: 'Pause',\n        resume: 'Resume',\n        done: 'Done',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded'\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files'\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files'\n        },\n        xMoreFilesAdded: {\n          0: '%{smart_count} more file added',\n          1: '%{smart_count} more files added'\n        }\n      }\n    }; // set default options\n\n    var defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null\n    };\n    _this.opts = _objectSpread(_objectSpread({}, defaultOptions), opts);\n\n    _this.i18nInit();\n\n    _this.render = _this.render.bind(_assertThisInitialized(_this));\n    _this.install = _this.install.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(StatusBar, [{\n    key: \"render\",\n    value: function render(state) {\n      var capabilities = state.capabilities,\n          files = state.files,\n          allowNewUpload = state.allowNewUpload,\n          totalProgress = state.totalProgress,\n          error = state.error,\n          recoveredState = state.recoveredState;\n\n      var _this$uppy$getObjectO = this.uppy.getObjectOfFilesPerState(),\n          newFiles = _this$uppy$getObjectO.newFiles,\n          startedFiles = _this$uppy$getObjectO.startedFiles,\n          completeFiles = _this$uppy$getObjectO.completeFiles,\n          inProgressNotPausedFiles = _this$uppy$getObjectO.inProgressNotPausedFiles,\n          isUploadStarted = _this$uppy$getObjectO.isUploadStarted,\n          isAllComplete = _this$uppy$getObjectO.isAllComplete,\n          isAllErrored = _this$uppy$getObjectO.isAllErrored,\n          isAllPaused = _this$uppy$getObjectO.isAllPaused,\n          isUploadInProgress = _this$uppy$getObjectO.isUploadInProgress,\n          isSomeGhost = _this$uppy$getObjectO.isSomeGhost; // If some state was recovered, we want to show Upload button/counter\n      // for all the files, because in this case it’s not an Upload button,\n      // but “Confirm Restore Button”\n\n\n      var newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles;\n      var totalETA = getTotalETA(inProgressNotPausedFiles);\n      var resumableUploads = !!capabilities.resumableUploads;\n      var supportsUploadProgress = capabilities.uploadProgress !== false;\n      var totalSize = 0;\n      var totalUploadedSize = 0;\n      startedFiles.forEach(function (file) {\n        totalSize += file.progress.bytesTotal || 0;\n        totalUploadedSize += file.progress.bytesUploaded || 0;\n      });\n      return StatusBarUI({\n        error: error,\n        uploadState: getUploadingState(isAllErrored, isAllComplete, recoveredState, state.files || {}),\n        allowNewUpload: allowNewUpload,\n        totalProgress: totalProgress,\n        totalSize: totalSize,\n        totalUploadedSize: totalUploadedSize,\n        isAllComplete: false,\n        isAllPaused: isAllPaused,\n        isAllErrored: isAllErrored,\n        isUploadStarted: isUploadStarted,\n        isUploadInProgress: isUploadInProgress,\n        isSomeGhost: isSomeGhost,\n        recoveredState: recoveredState,\n        complete: completeFiles.length,\n        newFiles: newFilesOrRecovered.length,\n        numUploads: startedFiles.length,\n        totalETA: totalETA,\n        files: files,\n        i18n: this.i18n,\n        uppy: this.uppy,\n        startUpload: this.startUpload,\n        doneButtonHandler: this.opts.doneButtonHandler,\n        resumableUploads: resumableUploads,\n        supportsUploadProgress: supportsUploadProgress,\n        showProgressDetails: this.opts.showProgressDetails,\n        hideUploadButton: this.opts.hideUploadButton,\n        hideRetryButton: this.opts.hideRetryButton,\n        hidePauseResumeButton: this.opts.hidePauseResumeButton,\n        hideCancelButton: this.opts.hideCancelButton,\n        hideAfterFinish: this.opts.hideAfterFinish,\n        isTargetDOMEl: this.isTargetDOMEl\n      });\n    }\n  }, {\n    key: \"onMount\",\n    value: function onMount() {\n      // Set the text direction if the page has not defined one.\n      var element = this.el;\n      var direction = getTextDirection(element);\n\n      if (!direction) {\n        element.dir = 'ltr';\n      }\n    }\n  }, {\n    key: \"install\",\n    value: function install() {\n      var target = this.opts.target;\n\n      if (target) {\n        this.mount(target, this);\n      }\n    }\n  }, {\n    key: \"uninstall\",\n    value: function uninstall() {\n      this.unmount();\n    }\n  }]);\n\n  return StatusBar;\n}(UIPlugin), _class.VERSION = \"2.1.1\", _temp);\n\nfunction getTotalSpeed(files) {\n  var totalSpeed = 0;\n  files.forEach(function (file) {\n    totalSpeed += getSpeed(file.progress);\n  });\n  return totalSpeed;\n}\n\nfunction getTotalETA(files) {\n  var totalSpeed = getTotalSpeed(files);\n\n  if (totalSpeed === 0) {\n    return 0;\n  }\n\n  var totalBytesRemaining = files.reduce(function (total, file) {\n    return total + getBytesRemaining(file.progress);\n  }, 0);\n  return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;\n}\n\nfunction getUploadingState(isAllErrored, isAllComplete, recoveredState, files) {\n  if (isAllErrored) {\n    return statusBarStates.STATE_ERROR;\n  }\n\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE;\n  }\n\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING;\n  }\n\n  var state = statusBarStates.STATE_WAITING;\n  var fileIDs = Object.keys(files);\n\n  for (var i = 0; i < fileIDs.length; i++) {\n    var progress = files[fileIDs[i]].progress; // If ANY files are being uploaded right now, show the uploading state.\n\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING;\n    } // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n\n\n    if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n      state = statusBarStates.STATE_PREPROCESSING;\n    } // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n\n\n    if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n      state = statusBarStates.STATE_POSTPROCESSING;\n    }\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/status-bar/lib/index.js"],"names":["_class","_temp","require","UIPlugin","getSpeed","getBytesRemaining","getTextDirection","statusBarStates","StatusBarUI","module","exports","uppy","opts","startUpload","getState","recoveredState","emit","undefined","upload","catch","id","title","type","defaultLocale","strings","uploading","complete","uploadFailed","paused","retry","retryUpload","cancel","pause","resume","done","filesUploadedOfTotal","dataUploadedOfTotal","xTimeLeft","uploadXFiles","uploadXNewFiles","xMoreFilesAdded","defaultOptions","target","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","i18nInit","render","bind","install","state","capabilities","files","allowNewUpload","totalProgress","error","getObjectOfFilesPerState","newFiles","startedFiles","completeFiles","inProgressNotPausedFiles","isUploadStarted","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","newFilesOrRecovered","Object","values","totalETA","getTotalETA","resumableUploads","supportsUploadProgress","uploadProgress","totalSize","totalUploadedSize","forEach","file","progress","bytesTotal","bytesUploaded","uploadState","getUploadingState","length","numUploads","i18n","isTargetDOMEl","element","el","direction","dir","mount","unmount","VERSION","getTotalSpeed","totalSpeed","totalBytesRemaining","reduce","total","Math","round","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","fileIDs","keys","i","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _class, _temp;\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst getSpeed = require('@uppy/utils/lib/getSpeed');\n\nconst getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining');\n\nconst getTextDirection = require('@uppy/utils/lib/getTextDirection');\n\nconst statusBarStates = require('./StatusBarStates');\n\nconst StatusBarUI = require('./StatusBar');\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\n\n\nmodule.exports = (_temp = _class = class StatusBar extends UIPlugin {\n  // eslint-disable-next-line global-require\n  constructor(uppy, opts) {\n    super(uppy, opts);\n\n    this.startUpload = () => {\n      const {\n        recoveredState\n      } = this.uppy.getState();\n\n      if (recoveredState) {\n        this.uppy.emit('restore-confirmed');\n        return undefined;\n      }\n\n      return this.uppy.upload().catch(() => {// Error logged in Core\n      });\n    };\n\n    this.id = this.opts.id || 'StatusBar';\n    this.title = 'StatusBar';\n    this.type = 'progressindicator';\n    this.defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        upload: 'Upload',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        paused: 'Paused',\n        retry: 'Retry',\n        retryUpload: 'Retry upload',\n        cancel: 'Cancel',\n        pause: 'Pause',\n        resume: 'Resume',\n        done: 'Done',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded'\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files'\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files'\n        },\n        xMoreFilesAdded: {\n          0: '%{smart_count} more file added',\n          1: '%{smart_count} more files added'\n        }\n      }\n    }; // set default options\n\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null\n    };\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.install = this.install.bind(this);\n  }\n\n  render(state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState\n    } = state;\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n      inProgressNotPausedFiles,\n      isUploadStarted,\n      isAllComplete,\n      isAllErrored,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost\n    } = this.uppy.getObjectOfFilesPerState(); // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n\n    const newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles;\n    const totalETA = getTotalETA(inProgressNotPausedFiles);\n    const resumableUploads = !!capabilities.resumableUploads;\n    const supportsUploadProgress = capabilities.uploadProgress !== false;\n    let totalSize = 0;\n    let totalUploadedSize = 0;\n    startedFiles.forEach(file => {\n      totalSize += file.progress.bytesTotal || 0;\n      totalUploadedSize += file.progress.bytesUploaded || 0;\n    });\n    return StatusBarUI({\n      error,\n      uploadState: getUploadingState(isAllErrored, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete: false,\n      isAllPaused,\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl\n    });\n  }\n\n  onMount() {\n    // Set the text direction if the page has not defined one.\n    const element = this.el;\n    const direction = getTextDirection(element);\n\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  }\n\n  install() {\n    const {\n      target\n    } = this.opts;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n\n  uninstall() {\n    this.unmount();\n  }\n\n}, _class.VERSION = \"2.1.1\", _temp);\n\nfunction getTotalSpeed(files) {\n  let totalSpeed = 0;\n  files.forEach(file => {\n    totalSpeed += getSpeed(file.progress);\n  });\n  return totalSpeed;\n}\n\nfunction getTotalETA(files) {\n  const totalSpeed = getTotalSpeed(files);\n\n  if (totalSpeed === 0) {\n    return 0;\n  }\n\n  const totalBytesRemaining = files.reduce((total, file) => {\n    return total + getBytesRemaining(file.progress);\n  }, 0);\n  return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;\n}\n\nfunction getUploadingState(isAllErrored, isAllComplete, recoveredState, files) {\n  if (isAllErrored) {\n    return statusBarStates.STATE_ERROR;\n  }\n\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE;\n  }\n\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING;\n  }\n\n  let state = statusBarStates.STATE_WAITING;\n  const fileIDs = Object.keys(files);\n\n  for (let i = 0; i < fileIDs.length; i++) {\n    const {\n      progress\n    } = files[fileIDs[i]]; // If ANY files are being uploaded right now, show the uploading state.\n\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING;\n    } // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n\n\n    if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n      state = statusBarStates.STATE_PREPROCESSING;\n    } // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n\n\n    if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n      state = statusBarStates.STATE_POSTPROCESSING;\n    }\n  }\n\n  return state;\n}"]},"metadata":{},"sourceType":"script"}