{"ast":null,"code":"\"use strict\";\n\nvar webkitGetAsEntryApi = require('./utils/webkitGetAsEntryApi/index');\n\nvar fallbackApi = require('./utils/fallbackApi');\n/**\n * Returns a promise that resolves to the array of dropped files (if a folder is\n * dropped, and browser supports folder parsing - promise resolves to the flat\n * array of all files in all directories).\n * Each file has .relativePath prop appended to it (e.g. \"/docs/Prague/ticket_from_prague_to_ufa.pdf\")\n * if browser supports it. Otherwise it's undefined.\n *\n * @param {DataTransfer} dataTransfer\n * @param {Function} logDropError - a function that's called every time some\n * folder or some file error out (e.g. because of the folder name being too long\n * on Windows). Notice that resulting promise will always be resolved anyway.\n *\n * @returns {Promise} - Array<File>\n */\n\n\nmodule.exports = function getDroppedFiles(dataTransfer) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$logDropError = _ref.logDropError,\n      logDropError = _ref$logDropError === void 0 ? function () {} : _ref$logDropError;\n\n  var _dataTransfer$items; // Get all files from all subdirs. Works (at least) in Chrome, Mozilla, and Safari\n\n\n  if ((_dataTransfer$items = dataTransfer.items) != null && _dataTransfer$items[0] && 'webkitGetAsEntry' in dataTransfer.items[0]) {\n    return webkitGetAsEntryApi(dataTransfer, logDropError); // Otherwise just return all first-order files\n  }\n\n  return fallbackApi(dataTransfer);\n};","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/utils/lib/getDroppedFiles/index.js"],"names":["webkitGetAsEntryApi","require","fallbackApi","module","exports","getDroppedFiles","dataTransfer","logDropError","_dataTransfer$items","items"],"mappings":"AAAA;;AAEA,IAAMA,mBAAmB,GAAGC,OAAO,CAAC,mCAAD,CAAnC;;AAEA,IAAMC,WAAW,GAAGD,OAAO,CAAC,qBAAD,CAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAE,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,YAAzB,EAET;AAAA,iFAAJ,EAAI;AAAA,+BADNC,YACM;AAAA,MADNA,YACM,kCADS,YAAM,CAAE,CACjB;;AACN,MAAIC,mBAAJ,CADM,CAGN;;;AACA,MAAI,CAACA,mBAAmB,GAAGF,YAAY,CAACG,KAApC,KAA8C,IAA9C,IAAsDD,mBAAmB,CAAC,CAAD,CAAzE,IAAgF,sBAAsBF,YAAY,CAACG,KAAb,CAAmB,CAAnB,CAA1G,EAAiI;AAC/H,WAAOT,mBAAmB,CAACM,YAAD,EAAeC,YAAf,CAA1B,CAD+H,CACvE;AACzD;;AAED,SAAOL,WAAW,CAACI,YAAD,CAAlB;AACD,CAXD","sourcesContent":["\"use strict\";\n\nconst webkitGetAsEntryApi = require('./utils/webkitGetAsEntryApi/index');\n\nconst fallbackApi = require('./utils/fallbackApi');\n/**\n * Returns a promise that resolves to the array of dropped files (if a folder is\n * dropped, and browser supports folder parsing - promise resolves to the flat\n * array of all files in all directories).\n * Each file has .relativePath prop appended to it (e.g. \"/docs/Prague/ticket_from_prague_to_ufa.pdf\")\n * if browser supports it. Otherwise it's undefined.\n *\n * @param {DataTransfer} dataTransfer\n * @param {Function} logDropError - a function that's called every time some\n * folder or some file error out (e.g. because of the folder name being too long\n * on Windows). Notice that resulting promise will always be resolved anyway.\n *\n * @returns {Promise} - Array<File>\n */\n\n\nmodule.exports = function getDroppedFiles(dataTransfer, {\n  logDropError = () => {}\n} = {}) {\n  var _dataTransfer$items;\n\n  // Get all files from all subdirs. Works (at least) in Chrome, Mozilla, and Safari\n  if ((_dataTransfer$items = dataTransfer.items) != null && _dataTransfer$items[0] && 'webkitGetAsEntry' in dataTransfer.items[0]) {\n    return webkitGetAsEntryApi(dataTransfer, logDropError); // Otherwise just return all first-order files\n  }\n\n  return fallbackApi(dataTransfer);\n};"]},"metadata":{},"sourceType":"script"}