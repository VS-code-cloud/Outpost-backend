{"ast":null,"code":"\"use strict\";\n\nvar _class, _temp;\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst dataURItoBlob = require('@uppy/utils/lib/dataURItoBlob');\n\nconst isObjectURL = require('@uppy/utils/lib/isObjectURL');\n\nconst isPreviewSupported = require('@uppy/utils/lib/isPreviewSupported');\n\nconst exifr = require('exifr/dist/mini.legacy.umd.js');\n/**\n * The Thumbnail Generator plugin\n */\n\n\nmodule.exports = (_temp = _class = class ThumbnailGenerator extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n\n    this.onFileAdded = file => {\n      if (!file.preview && file.data && isPreviewSupported(file.type) && !file.isRemote) {\n        this.addToQueue(file.id);\n      }\n    };\n\n    this.onCancelRequest = file => {\n      const index = this.queue.indexOf(file.id);\n\n      if (index !== -1) {\n        this.queue.splice(index, 1);\n      }\n    };\n\n    this.onFileRemoved = file => {\n      const index = this.queue.indexOf(file.id);\n\n      if (index !== -1) {\n        this.queue.splice(index, 1);\n      } // Clean up object URLs.\n\n\n      if (file.preview && isObjectURL(file.preview)) {\n        URL.revokeObjectURL(file.preview);\n      }\n    };\n\n    this.onRestored = () => {\n      const restoredFiles = this.uppy.getFiles().filter(file => file.isRestored);\n      restoredFiles.forEach(file => {\n        // Only add blob URLs; they are likely invalid after being restored.\n        if (!file.preview || isObjectURL(file.preview)) {\n          this.addToQueue(file.id);\n        }\n      });\n    };\n\n    this.waitUntilAllProcessed = fileIDs => {\n      fileIDs.forEach(fileID => {\n        const file = this.uppy.getFile(fileID);\n        this.uppy.emit('preprocess-progress', file, {\n          mode: 'indeterminate',\n          message: this.i18n('generatingThumbnails')\n        });\n      });\n\n      const emitPreprocessCompleteForAll = () => {\n        fileIDs.forEach(fileID => {\n          const file = this.uppy.getFile(fileID);\n          this.uppy.emit('preprocess-complete', file);\n        });\n      };\n\n      return new Promise(resolve => {\n        if (this.queueProcessing) {\n          this.uppy.once('thumbnail:all-generated', () => {\n            emitPreprocessCompleteForAll();\n            resolve();\n          });\n        } else {\n          emitPreprocessCompleteForAll();\n          resolve();\n        }\n      });\n    };\n\n    this.type = 'modifier';\n    this.id = this.opts.id || 'ThumbnailGenerator';\n    this.title = 'Thumbnail Generator';\n    this.queue = [];\n    this.queueProcessing = false;\n    this.defaultThumbnailDimension = 200;\n    this.thumbnailType = this.opts.thumbnailType || 'image/jpeg';\n    this.defaultLocale = {\n      strings: {\n        generatingThumbnails: 'Generating thumbnails...'\n      }\n    };\n    const defaultOptions = {\n      thumbnailWidth: null,\n      thumbnailHeight: null,\n      waitForThumbnailsBeforeUpload: false,\n      lazy: false\n    };\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n\n    if (this.opts.lazy && this.opts.waitForThumbnailsBeforeUpload) {\n      throw new Error('ThumbnailGenerator: The `lazy` and `waitForThumbnailsBeforeUpload` options are mutually exclusive. Please ensure at most one of them is set to `true`.');\n    }\n  }\n  /**\n   * Create a thumbnail for the given Uppy file object.\n   *\n   * @param {{data: Blob}} file\n   * @param {number} targetWidth\n   * @param {number} targetHeight\n   * @returns {Promise}\n   */\n\n\n  createThumbnail(file, targetWidth, targetHeight) {\n    const originalUrl = URL.createObjectURL(file.data);\n    const onload = new Promise((resolve, reject) => {\n      const image = new Image();\n      image.src = originalUrl;\n      image.addEventListener('load', () => {\n        URL.revokeObjectURL(originalUrl);\n        resolve(image);\n      });\n      image.addEventListener('error', event => {\n        URL.revokeObjectURL(originalUrl);\n        reject(event.error || new Error('Could not create thumbnail'));\n      });\n    });\n    const orientationPromise = exifr.rotation(file.data).catch(() => 1);\n    return Promise.all([onload, orientationPromise]).then(([image, orientation]) => {\n      const dimensions = this.getProportionalDimensions(image, targetWidth, targetHeight, orientation.deg);\n      const rotatedImage = this.rotateImage(image, orientation);\n      const resizedImage = this.resizeImage(rotatedImage, dimensions.width, dimensions.height);\n      return this.canvasToBlob(resizedImage, this.thumbnailType, 80);\n    }).then(blob => {\n      return URL.createObjectURL(blob);\n    });\n  }\n  /**\n   * Get the new calculated dimensions for the given image and a target width\n   * or height. If both width and height are given, only width is taken into\n   * account. If neither width nor height are given, the default dimension\n   * is used.\n   */\n\n\n  getProportionalDimensions(img, width, height, rotation) {\n    let aspect = img.width / img.height;\n\n    if (rotation === 90 || rotation === 270) {\n      aspect = img.height / img.width;\n    }\n\n    if (width != null) {\n      return {\n        width,\n        height: Math.round(width / aspect)\n      };\n    }\n\n    if (height != null) {\n      return {\n        width: Math.round(height * aspect),\n        height\n      };\n    }\n\n    return {\n      width: this.defaultThumbnailDimension,\n      height: Math.round(this.defaultThumbnailDimension / aspect)\n    };\n  }\n  /**\n   * Make sure the image doesnâ€™t exceed browser/device canvas limits.\n   * For ios with 256 RAM and ie\n   */\n\n\n  protect(image) {\n    // https://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element\n    const ratio = image.width / image.height;\n    const maxSquare = 5000000; // ios max canvas square\n\n    const maxSize = 4096; // ie max canvas dimensions\n\n    let maxW = Math.floor(Math.sqrt(maxSquare * ratio));\n    let maxH = Math.floor(maxSquare / Math.sqrt(maxSquare * ratio));\n\n    if (maxW > maxSize) {\n      maxW = maxSize;\n      maxH = Math.round(maxW / ratio);\n    }\n\n    if (maxH > maxSize) {\n      maxH = maxSize;\n      maxW = Math.round(ratio * maxH);\n    }\n\n    if (image.width > maxW) {\n      const canvas = document.createElement('canvas');\n      canvas.width = maxW;\n      canvas.height = maxH;\n      canvas.getContext('2d').drawImage(image, 0, 0, maxW, maxH);\n      image = canvas;\n    }\n\n    return image;\n  }\n  /**\n   * Resize an image to the target `width` and `height`.\n   *\n   * Returns a Canvas with the resized image on it.\n   */\n\n\n  resizeImage(image, targetWidth, targetHeight) {\n    // Resizing in steps refactored to use a solution from\n    // https://blog.uploadcare.com/image-resize-in-browsers-is-broken-e38eed08df01\n    image = this.protect(image);\n    let steps = Math.ceil(Math.log2(image.width / targetWidth));\n\n    if (steps < 1) {\n      steps = 1;\n    }\n\n    let sW = targetWidth * 2 ** (steps - 1);\n    let sH = targetHeight * 2 ** (steps - 1);\n    const x = 2;\n\n    while (steps--) {\n      const canvas = document.createElement('canvas');\n      canvas.width = sW;\n      canvas.height = sH;\n      canvas.getContext('2d').drawImage(image, 0, 0, sW, sH);\n      image = canvas;\n      sW = Math.round(sW / x);\n      sH = Math.round(sH / x);\n    }\n\n    return image;\n  }\n\n  rotateImage(image, translate) {\n    let w = image.width;\n    let h = image.height;\n\n    if (translate.deg === 90 || translate.deg === 270) {\n      w = image.height;\n      h = image.width;\n    }\n\n    const canvas = document.createElement('canvas');\n    canvas.width = w;\n    canvas.height = h;\n    const context = canvas.getContext('2d');\n    context.translate(w / 2, h / 2);\n\n    if (translate.canvas) {\n      context.rotate(translate.rad);\n      context.scale(translate.scaleX, translate.scaleY);\n    }\n\n    context.drawImage(image, -image.width / 2, -image.height / 2, image.width, image.height);\n    return canvas;\n  }\n  /**\n   * Save a <canvas> element's content to a Blob object.\n   *\n   * @param {HTMLCanvasElement} canvas\n   * @returns {Promise}\n   */\n\n\n  canvasToBlob(canvas, type, quality) {\n    try {\n      canvas.getContext('2d').getImageData(0, 0, 1, 1);\n    } catch (err) {\n      if (err.code === 18) {\n        return Promise.reject(new Error('cannot read image, probably an svg with external resources'));\n      }\n    }\n\n    if (canvas.toBlob) {\n      return new Promise(resolve => {\n        canvas.toBlob(resolve, type, quality);\n      }).then(blob => {\n        if (blob === null) {\n          throw new Error('cannot read image, probably an svg with external resources');\n        }\n\n        return blob;\n      });\n    }\n\n    return Promise.resolve().then(() => {\n      return dataURItoBlob(canvas.toDataURL(type, quality), {});\n    }).then(blob => {\n      if (blob === null) {\n        throw new Error('could not extract blob, probably an old browser');\n      }\n\n      return blob;\n    });\n  }\n  /**\n   * Set the preview URL for a file.\n   */\n\n\n  setPreviewURL(fileID, preview) {\n    this.uppy.setFileState(fileID, {\n      preview\n    });\n  }\n\n  addToQueue(item) {\n    this.queue.push(item);\n\n    if (this.queueProcessing === false) {\n      this.processQueue();\n    }\n  }\n\n  processQueue() {\n    this.queueProcessing = true;\n\n    if (this.queue.length > 0) {\n      const current = this.uppy.getFile(this.queue.shift());\n\n      if (!current) {\n        this.uppy.log('[ThumbnailGenerator] file was removed before a thumbnail could be generated, but not removed from the queue. This is probably a bug', 'error');\n        return;\n      }\n\n      return this.requestThumbnail(current).catch(() => {}) // eslint-disable-line node/handle-callback-err\n      .then(() => this.processQueue());\n    }\n\n    this.queueProcessing = false;\n    this.uppy.log('[ThumbnailGenerator] Emptied thumbnail queue');\n    this.uppy.emit('thumbnail:all-generated');\n  }\n\n  requestThumbnail(file) {\n    if (isPreviewSupported(file.type) && !file.isRemote) {\n      return this.createThumbnail(file, this.opts.thumbnailWidth, this.opts.thumbnailHeight).then(preview => {\n        this.setPreviewURL(file.id, preview);\n        this.uppy.log(`[ThumbnailGenerator] Generated thumbnail for ${file.id}`);\n        this.uppy.emit('thumbnail:generated', this.uppy.getFile(file.id), preview);\n      }).catch(err => {\n        this.uppy.log(`[ThumbnailGenerator] Failed thumbnail for ${file.id}:`, 'warning');\n        this.uppy.log(err, 'warning');\n        this.uppy.emit('thumbnail:error', this.uppy.getFile(file.id), err);\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  install() {\n    this.uppy.on('file-removed', this.onFileRemoved);\n\n    if (this.opts.lazy) {\n      this.uppy.on('thumbnail:request', this.onFileAdded);\n      this.uppy.on('thumbnail:cancel', this.onCancelRequest);\n    } else {\n      this.uppy.on('file-added', this.onFileAdded);\n      this.uppy.on('restored', this.onRestored);\n    }\n\n    if (this.opts.waitForThumbnailsBeforeUpload) {\n      this.uppy.addPreProcessor(this.waitUntilAllProcessed);\n    }\n  }\n\n  uninstall() {\n    this.uppy.off('file-removed', this.onFileRemoved);\n\n    if (this.opts.lazy) {\n      this.uppy.off('thumbnail:request', this.onFileAdded);\n      this.uppy.off('thumbnail:cancel', this.onCancelRequest);\n    } else {\n      this.uppy.off('file-added', this.onFileAdded);\n      this.uppy.off('restored', this.onRestored);\n    }\n\n    if (this.opts.waitForThumbnailsBeforeUpload) {\n      this.uppy.removePreProcessor(this.waitUntilAllProcessed);\n    }\n  }\n\n}, _class.VERSION = \"2.0.5\", _temp);","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/thumbnail-generator/lib/index.js"],"names":["_class","_temp","UIPlugin","require","dataURItoBlob","isObjectURL","isPreviewSupported","exifr","module","exports","ThumbnailGenerator","constructor","uppy","opts","onFileAdded","file","preview","data","type","isRemote","addToQueue","id","onCancelRequest","index","queue","indexOf","splice","onFileRemoved","URL","revokeObjectURL","onRestored","restoredFiles","getFiles","filter","isRestored","forEach","waitUntilAllProcessed","fileIDs","fileID","getFile","emit","mode","message","i18n","emitPreprocessCompleteForAll","Promise","resolve","queueProcessing","once","title","defaultThumbnailDimension","thumbnailType","defaultLocale","strings","generatingThumbnails","defaultOptions","thumbnailWidth","thumbnailHeight","waitForThumbnailsBeforeUpload","lazy","i18nInit","Error","createThumbnail","targetWidth","targetHeight","originalUrl","createObjectURL","onload","reject","image","Image","src","addEventListener","event","error","orientationPromise","rotation","catch","all","then","orientation","dimensions","getProportionalDimensions","deg","rotatedImage","rotateImage","resizedImage","resizeImage","width","height","canvasToBlob","blob","img","aspect","Math","round","protect","ratio","maxSquare","maxSize","maxW","floor","sqrt","maxH","canvas","document","createElement","getContext","drawImage","steps","ceil","log2","sW","sH","x","translate","w","h","context","rotate","rad","scale","scaleX","scaleY","quality","getImageData","err","code","toBlob","toDataURL","setPreviewURL","setFileState","item","push","processQueue","length","current","shift","log","requestThumbnail","install","on","addPreProcessor","uninstall","off","removePreProcessor","VERSION"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _class, _temp;\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst dataURItoBlob = require('@uppy/utils/lib/dataURItoBlob');\n\nconst isObjectURL = require('@uppy/utils/lib/isObjectURL');\n\nconst isPreviewSupported = require('@uppy/utils/lib/isPreviewSupported');\n\nconst exifr = require('exifr/dist/mini.legacy.umd.js');\n/**\n * The Thumbnail Generator plugin\n */\n\n\nmodule.exports = (_temp = _class = class ThumbnailGenerator extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n\n    this.onFileAdded = file => {\n      if (!file.preview && file.data && isPreviewSupported(file.type) && !file.isRemote) {\n        this.addToQueue(file.id);\n      }\n    };\n\n    this.onCancelRequest = file => {\n      const index = this.queue.indexOf(file.id);\n\n      if (index !== -1) {\n        this.queue.splice(index, 1);\n      }\n    };\n\n    this.onFileRemoved = file => {\n      const index = this.queue.indexOf(file.id);\n\n      if (index !== -1) {\n        this.queue.splice(index, 1);\n      } // Clean up object URLs.\n\n\n      if (file.preview && isObjectURL(file.preview)) {\n        URL.revokeObjectURL(file.preview);\n      }\n    };\n\n    this.onRestored = () => {\n      const restoredFiles = this.uppy.getFiles().filter(file => file.isRestored);\n      restoredFiles.forEach(file => {\n        // Only add blob URLs; they are likely invalid after being restored.\n        if (!file.preview || isObjectURL(file.preview)) {\n          this.addToQueue(file.id);\n        }\n      });\n    };\n\n    this.waitUntilAllProcessed = fileIDs => {\n      fileIDs.forEach(fileID => {\n        const file = this.uppy.getFile(fileID);\n        this.uppy.emit('preprocess-progress', file, {\n          mode: 'indeterminate',\n          message: this.i18n('generatingThumbnails')\n        });\n      });\n\n      const emitPreprocessCompleteForAll = () => {\n        fileIDs.forEach(fileID => {\n          const file = this.uppy.getFile(fileID);\n          this.uppy.emit('preprocess-complete', file);\n        });\n      };\n\n      return new Promise(resolve => {\n        if (this.queueProcessing) {\n          this.uppy.once('thumbnail:all-generated', () => {\n            emitPreprocessCompleteForAll();\n            resolve();\n          });\n        } else {\n          emitPreprocessCompleteForAll();\n          resolve();\n        }\n      });\n    };\n\n    this.type = 'modifier';\n    this.id = this.opts.id || 'ThumbnailGenerator';\n    this.title = 'Thumbnail Generator';\n    this.queue = [];\n    this.queueProcessing = false;\n    this.defaultThumbnailDimension = 200;\n    this.thumbnailType = this.opts.thumbnailType || 'image/jpeg';\n    this.defaultLocale = {\n      strings: {\n        generatingThumbnails: 'Generating thumbnails...'\n      }\n    };\n    const defaultOptions = {\n      thumbnailWidth: null,\n      thumbnailHeight: null,\n      waitForThumbnailsBeforeUpload: false,\n      lazy: false\n    };\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n\n    if (this.opts.lazy && this.opts.waitForThumbnailsBeforeUpload) {\n      throw new Error('ThumbnailGenerator: The `lazy` and `waitForThumbnailsBeforeUpload` options are mutually exclusive. Please ensure at most one of them is set to `true`.');\n    }\n  }\n  /**\n   * Create a thumbnail for the given Uppy file object.\n   *\n   * @param {{data: Blob}} file\n   * @param {number} targetWidth\n   * @param {number} targetHeight\n   * @returns {Promise}\n   */\n\n\n  createThumbnail(file, targetWidth, targetHeight) {\n    const originalUrl = URL.createObjectURL(file.data);\n    const onload = new Promise((resolve, reject) => {\n      const image = new Image();\n      image.src = originalUrl;\n      image.addEventListener('load', () => {\n        URL.revokeObjectURL(originalUrl);\n        resolve(image);\n      });\n      image.addEventListener('error', event => {\n        URL.revokeObjectURL(originalUrl);\n        reject(event.error || new Error('Could not create thumbnail'));\n      });\n    });\n    const orientationPromise = exifr.rotation(file.data).catch(() => 1);\n    return Promise.all([onload, orientationPromise]).then(([image, orientation]) => {\n      const dimensions = this.getProportionalDimensions(image, targetWidth, targetHeight, orientation.deg);\n      const rotatedImage = this.rotateImage(image, orientation);\n      const resizedImage = this.resizeImage(rotatedImage, dimensions.width, dimensions.height);\n      return this.canvasToBlob(resizedImage, this.thumbnailType, 80);\n    }).then(blob => {\n      return URL.createObjectURL(blob);\n    });\n  }\n  /**\n   * Get the new calculated dimensions for the given image and a target width\n   * or height. If both width and height are given, only width is taken into\n   * account. If neither width nor height are given, the default dimension\n   * is used.\n   */\n\n\n  getProportionalDimensions(img, width, height, rotation) {\n    let aspect = img.width / img.height;\n\n    if (rotation === 90 || rotation === 270) {\n      aspect = img.height / img.width;\n    }\n\n    if (width != null) {\n      return {\n        width,\n        height: Math.round(width / aspect)\n      };\n    }\n\n    if (height != null) {\n      return {\n        width: Math.round(height * aspect),\n        height\n      };\n    }\n\n    return {\n      width: this.defaultThumbnailDimension,\n      height: Math.round(this.defaultThumbnailDimension / aspect)\n    };\n  }\n  /**\n   * Make sure the image doesnâ€™t exceed browser/device canvas limits.\n   * For ios with 256 RAM and ie\n   */\n\n\n  protect(image) {\n    // https://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element\n    const ratio = image.width / image.height;\n    const maxSquare = 5000000; // ios max canvas square\n\n    const maxSize = 4096; // ie max canvas dimensions\n\n    let maxW = Math.floor(Math.sqrt(maxSquare * ratio));\n    let maxH = Math.floor(maxSquare / Math.sqrt(maxSquare * ratio));\n\n    if (maxW > maxSize) {\n      maxW = maxSize;\n      maxH = Math.round(maxW / ratio);\n    }\n\n    if (maxH > maxSize) {\n      maxH = maxSize;\n      maxW = Math.round(ratio * maxH);\n    }\n\n    if (image.width > maxW) {\n      const canvas = document.createElement('canvas');\n      canvas.width = maxW;\n      canvas.height = maxH;\n      canvas.getContext('2d').drawImage(image, 0, 0, maxW, maxH);\n      image = canvas;\n    }\n\n    return image;\n  }\n  /**\n   * Resize an image to the target `width` and `height`.\n   *\n   * Returns a Canvas with the resized image on it.\n   */\n\n\n  resizeImage(image, targetWidth, targetHeight) {\n    // Resizing in steps refactored to use a solution from\n    // https://blog.uploadcare.com/image-resize-in-browsers-is-broken-e38eed08df01\n    image = this.protect(image);\n    let steps = Math.ceil(Math.log2(image.width / targetWidth));\n\n    if (steps < 1) {\n      steps = 1;\n    }\n\n    let sW = targetWidth * 2 ** (steps - 1);\n    let sH = targetHeight * 2 ** (steps - 1);\n    const x = 2;\n\n    while (steps--) {\n      const canvas = document.createElement('canvas');\n      canvas.width = sW;\n      canvas.height = sH;\n      canvas.getContext('2d').drawImage(image, 0, 0, sW, sH);\n      image = canvas;\n      sW = Math.round(sW / x);\n      sH = Math.round(sH / x);\n    }\n\n    return image;\n  }\n\n  rotateImage(image, translate) {\n    let w = image.width;\n    let h = image.height;\n\n    if (translate.deg === 90 || translate.deg === 270) {\n      w = image.height;\n      h = image.width;\n    }\n\n    const canvas = document.createElement('canvas');\n    canvas.width = w;\n    canvas.height = h;\n    const context = canvas.getContext('2d');\n    context.translate(w / 2, h / 2);\n\n    if (translate.canvas) {\n      context.rotate(translate.rad);\n      context.scale(translate.scaleX, translate.scaleY);\n    }\n\n    context.drawImage(image, -image.width / 2, -image.height / 2, image.width, image.height);\n    return canvas;\n  }\n  /**\n   * Save a <canvas> element's content to a Blob object.\n   *\n   * @param {HTMLCanvasElement} canvas\n   * @returns {Promise}\n   */\n\n\n  canvasToBlob(canvas, type, quality) {\n    try {\n      canvas.getContext('2d').getImageData(0, 0, 1, 1);\n    } catch (err) {\n      if (err.code === 18) {\n        return Promise.reject(new Error('cannot read image, probably an svg with external resources'));\n      }\n    }\n\n    if (canvas.toBlob) {\n      return new Promise(resolve => {\n        canvas.toBlob(resolve, type, quality);\n      }).then(blob => {\n        if (blob === null) {\n          throw new Error('cannot read image, probably an svg with external resources');\n        }\n\n        return blob;\n      });\n    }\n\n    return Promise.resolve().then(() => {\n      return dataURItoBlob(canvas.toDataURL(type, quality), {});\n    }).then(blob => {\n      if (blob === null) {\n        throw new Error('could not extract blob, probably an old browser');\n      }\n\n      return blob;\n    });\n  }\n  /**\n   * Set the preview URL for a file.\n   */\n\n\n  setPreviewURL(fileID, preview) {\n    this.uppy.setFileState(fileID, {\n      preview\n    });\n  }\n\n  addToQueue(item) {\n    this.queue.push(item);\n\n    if (this.queueProcessing === false) {\n      this.processQueue();\n    }\n  }\n\n  processQueue() {\n    this.queueProcessing = true;\n\n    if (this.queue.length > 0) {\n      const current = this.uppy.getFile(this.queue.shift());\n\n      if (!current) {\n        this.uppy.log('[ThumbnailGenerator] file was removed before a thumbnail could be generated, but not removed from the queue. This is probably a bug', 'error');\n        return;\n      }\n\n      return this.requestThumbnail(current).catch(() => {}) // eslint-disable-line node/handle-callback-err\n      .then(() => this.processQueue());\n    }\n\n    this.queueProcessing = false;\n    this.uppy.log('[ThumbnailGenerator] Emptied thumbnail queue');\n    this.uppy.emit('thumbnail:all-generated');\n  }\n\n  requestThumbnail(file) {\n    if (isPreviewSupported(file.type) && !file.isRemote) {\n      return this.createThumbnail(file, this.opts.thumbnailWidth, this.opts.thumbnailHeight).then(preview => {\n        this.setPreviewURL(file.id, preview);\n        this.uppy.log(`[ThumbnailGenerator] Generated thumbnail for ${file.id}`);\n        this.uppy.emit('thumbnail:generated', this.uppy.getFile(file.id), preview);\n      }).catch(err => {\n        this.uppy.log(`[ThumbnailGenerator] Failed thumbnail for ${file.id}:`, 'warning');\n        this.uppy.log(err, 'warning');\n        this.uppy.emit('thumbnail:error', this.uppy.getFile(file.id), err);\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  install() {\n    this.uppy.on('file-removed', this.onFileRemoved);\n\n    if (this.opts.lazy) {\n      this.uppy.on('thumbnail:request', this.onFileAdded);\n      this.uppy.on('thumbnail:cancel', this.onCancelRequest);\n    } else {\n      this.uppy.on('file-added', this.onFileAdded);\n      this.uppy.on('restored', this.onRestored);\n    }\n\n    if (this.opts.waitForThumbnailsBeforeUpload) {\n      this.uppy.addPreProcessor(this.waitUntilAllProcessed);\n    }\n  }\n\n  uninstall() {\n    this.uppy.off('file-removed', this.onFileRemoved);\n\n    if (this.opts.lazy) {\n      this.uppy.off('thumbnail:request', this.onFileAdded);\n      this.uppy.off('thumbnail:cancel', this.onCancelRequest);\n    } else {\n      this.uppy.off('file-added', this.onFileAdded);\n      this.uppy.off('restored', this.onRestored);\n    }\n\n    if (this.opts.waitForThumbnailsBeforeUpload) {\n      this.uppy.removePreProcessor(this.waitUntilAllProcessed);\n    }\n  }\n\n}, _class.VERSION = \"2.0.5\", _temp);"]},"metadata":{},"sourceType":"script"}