{"ast":null,"code":"\"use strict\";\n\nvar _class, _temp;\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst toArray = require('@uppy/utils/lib/toArray');\n\nconst {\n  h\n} = require('preact');\n\nmodule.exports = (_temp = _class = class FileInput extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    this.id = this.opts.id || 'FileInput';\n    this.title = 'File Input';\n    this.type = 'acquirer';\n    this.defaultLocale = {\n      strings: {\n        // The same key is used for the same purpose by @uppy/robodog's `form()` API, but our\n        // locale pack scripts can't access it in Robodog. If it is updated here, it should\n        // also be updated there!\n        chooseFiles: 'Choose files'\n      }\n    }; // Default options\n\n    const defaultOptions = {\n      target: null,\n      pretty: true,\n      inputName: 'files[]'\n    }; // Merge default options with the ones set by user\n\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  addFiles(files) {\n    const descriptors = files.map(file => ({\n      source: this.id,\n      name: file.name,\n      type: file.type,\n      data: file\n    }));\n\n    try {\n      this.uppy.addFiles(descriptors);\n    } catch (err) {\n      this.uppy.log(err);\n    }\n  }\n\n  handleInputChange(event) {\n    this.uppy.log('[FileInput] Something selected through input...');\n    const files = toArray(event.target.files);\n    this.addFiles(files); // We clear the input after a file is selected, because otherwise\n    // change event is not fired in Chrome and Safari when a file\n    // with the same name is selected.\n    // ___Why not use value=\"\" on <input/> instead?\n    //    Because if we use that method of clearing the input,\n    //    Chrome will not trigger change if we drop the same file twice (Issue #768).\n\n    event.target.value = null;\n  }\n\n  handleClick() {\n    this.input.click();\n  }\n\n  render() {\n    /* http://tympanus.net/codrops/2015/09/15/styling-customizing-file-inputs-smart-way/ */\n    const hiddenInputStyle = {\n      width: '0.1px',\n      height: '0.1px',\n      opacity: 0,\n      overflow: 'hidden',\n      position: 'absolute',\n      zIndex: -1\n    };\n    const {\n      restrictions\n    } = this.uppy.opts;\n    const accept = restrictions.allowedFileTypes ? restrictions.allowedFileTypes.join(',') : null;\n    return h(\"div\", {\n      className: \"uppy-Root uppy-FileInput-container\"\n    }, h(\"input\", {\n      className: \"uppy-FileInput-input\",\n      style: this.opts.pretty && hiddenInputStyle,\n      type: \"file\",\n      name: this.opts.inputName,\n      onChange: this.handleInputChange,\n      multiple: restrictions.maxNumberOfFiles !== 1,\n      accept: accept,\n      ref: input => {\n        this.input = input;\n      }\n    }), this.opts.pretty && h(\"button\", {\n      className: \"uppy-FileInput-btn\",\n      type: \"button\",\n      onClick: this.handleClick\n    }, this.i18n('chooseFiles')));\n  }\n\n  install() {\n    const {\n      target\n    } = this.opts;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n\n  uninstall() {\n    this.unmount();\n  }\n\n}, _class.VERSION = \"2.0.4\", _temp);","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/file-input/lib/index.js"],"names":["_class","_temp","UIPlugin","require","toArray","h","module","exports","FileInput","constructor","uppy","opts","id","title","type","defaultLocale","strings","chooseFiles","defaultOptions","target","pretty","inputName","i18nInit","render","bind","handleInputChange","handleClick","addFiles","files","descriptors","map","file","source","name","data","err","log","event","value","input","click","hiddenInputStyle","width","height","opacity","overflow","position","zIndex","restrictions","accept","allowedFileTypes","join","className","style","onChange","multiple","maxNumberOfFiles","ref","onClick","i18n","install","mount","uninstall","unmount","VERSION"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _class, _temp;\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst toArray = require('@uppy/utils/lib/toArray');\n\nconst {\n  h\n} = require('preact');\n\nmodule.exports = (_temp = _class = class FileInput extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    this.id = this.opts.id || 'FileInput';\n    this.title = 'File Input';\n    this.type = 'acquirer';\n    this.defaultLocale = {\n      strings: {\n        // The same key is used for the same purpose by @uppy/robodog's `form()` API, but our\n        // locale pack scripts can't access it in Robodog. If it is updated here, it should\n        // also be updated there!\n        chooseFiles: 'Choose files'\n      }\n    }; // Default options\n\n    const defaultOptions = {\n      target: null,\n      pretty: true,\n      inputName: 'files[]'\n    }; // Merge default options with the ones set by user\n\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  addFiles(files) {\n    const descriptors = files.map(file => ({\n      source: this.id,\n      name: file.name,\n      type: file.type,\n      data: file\n    }));\n\n    try {\n      this.uppy.addFiles(descriptors);\n    } catch (err) {\n      this.uppy.log(err);\n    }\n  }\n\n  handleInputChange(event) {\n    this.uppy.log('[FileInput] Something selected through input...');\n    const files = toArray(event.target.files);\n    this.addFiles(files); // We clear the input after a file is selected, because otherwise\n    // change event is not fired in Chrome and Safari when a file\n    // with the same name is selected.\n    // ___Why not use value=\"\" on <input/> instead?\n    //    Because if we use that method of clearing the input,\n    //    Chrome will not trigger change if we drop the same file twice (Issue #768).\n\n    event.target.value = null;\n  }\n\n  handleClick() {\n    this.input.click();\n  }\n\n  render() {\n    /* http://tympanus.net/codrops/2015/09/15/styling-customizing-file-inputs-smart-way/ */\n    const hiddenInputStyle = {\n      width: '0.1px',\n      height: '0.1px',\n      opacity: 0,\n      overflow: 'hidden',\n      position: 'absolute',\n      zIndex: -1\n    };\n    const {\n      restrictions\n    } = this.uppy.opts;\n    const accept = restrictions.allowedFileTypes ? restrictions.allowedFileTypes.join(',') : null;\n    return h(\"div\", {\n      className: \"uppy-Root uppy-FileInput-container\"\n    }, h(\"input\", {\n      className: \"uppy-FileInput-input\",\n      style: this.opts.pretty && hiddenInputStyle,\n      type: \"file\",\n      name: this.opts.inputName,\n      onChange: this.handleInputChange,\n      multiple: restrictions.maxNumberOfFiles !== 1,\n      accept: accept,\n      ref: input => {\n        this.input = input;\n      }\n    }), this.opts.pretty && h(\"button\", {\n      className: \"uppy-FileInput-btn\",\n      type: \"button\",\n      onClick: this.handleClick\n    }, this.i18n('chooseFiles')));\n  }\n\n  install() {\n    const {\n      target\n    } = this.opts;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n\n  uninstall() {\n    this.unmount();\n  }\n\n}, _class.VERSION = \"2.0.4\", _temp);"]},"metadata":{},"sourceType":"script"}