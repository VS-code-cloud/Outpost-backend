{"ast":null,"code":"\"use strict\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\n * Adapted from preact-virtual-list: https://github.com/developit/preact-virtual-list\n *\n * Â© 2016 Jason Miller\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * Adaptations:\n * - Added role=presentation to helper elements\n * - Tweaked styles for Uppy's Dashboard use case\n */\n\n\nconst {\n  h,\n  Component\n} = require('preact');\n\nconst STYLE_INNER = {\n  position: 'relative',\n  // Disabled for our use case: the wrapper elements around FileList already deal with overflow,\n  // and this additional property would hide things that we want to show.\n  //\n  // overflow: 'hidden',\n  width: '100%',\n  minHeight: '100%'\n};\nconst STYLE_CONTENT = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  // Because the `top` value gets set to some offset, this `height` being 100% would make the scrollbar\n  // stretch far beyond the content. For our use case, the content div actually can get its height from\n  // the elements inside it, so we don't need to specify a `height` property at all.\n  //\n  // height: '100%',\n  width: '100%',\n  overflow: 'visible'\n};\n\nclass VirtualList extends Component {\n  constructor(props) {\n    super(props); // The currently focused node, used to retain focus when the visible rows change.\n    // To avoid update loops, this should not cause state updates, so it's kept as a plain property.\n\n    this.handleScroll = () => {\n      this.setState({\n        offset: this.base.scrollTop\n      });\n    };\n\n    this.handleResize = () => {\n      this.resize();\n    };\n\n    this.focusElement = null;\n    this.state = {\n      offset: 0,\n      height: 0\n    };\n  }\n\n  componentDidMount() {\n    this.resize();\n    window.addEventListener('resize', this.handleResize);\n  } // TODO: refactor to stable lifecycle method\n  // eslint-disable-next-line\n\n\n  componentWillUpdate() {\n    if (this.base.contains(document.activeElement)) {\n      this.focusElement = document.activeElement;\n    }\n  }\n\n  componentDidUpdate() {\n    // Maintain focus when rows are added and removed.\n    if (this.focusElement && this.focusElement.parentNode && document.activeElement !== this.focusElement) {\n      this.focusElement.focus();\n    }\n\n    this.focusElement = null;\n    this.resize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  resize() {\n    const {\n      height\n    } = this.state;\n\n    if (height !== this.base.offsetHeight) {\n      this.setState({\n        height: this.base.offsetHeight\n      });\n    }\n  }\n\n  render({\n    data,\n    rowHeight,\n    renderRow,\n    overscanCount = 10,\n    ...props\n  }) {\n    const {\n      offset,\n      height\n    } = this.state; // first visible row index\n\n    let start = Math.floor(offset / rowHeight); // actual number of visible rows (without overscan)\n\n    let visibleRowCount = Math.floor(height / rowHeight); // Overscan: render blocks of rows modulo an overscan row count\n    // This dramatically reduces DOM writes during scrolling\n\n    if (overscanCount) {\n      start = Math.max(0, start - start % overscanCount);\n      visibleRowCount += overscanCount;\n    } // last visible + overscan row index + padding to allow keyboard focus to travel past the visible area\n\n\n    const end = start + visibleRowCount + 4; // data slice currently in viewport plus overscan items\n\n    const selection = data.slice(start, end);\n    const styleInner = { ...STYLE_INNER,\n      height: data.length * rowHeight\n    };\n    const styleContent = { ...STYLE_CONTENT,\n      top: start * rowHeight\n    }; // The `role=\"presentation\"` attributes ensure that these wrapper elements are not treated as list\n    // items by accessibility and outline tools.\n\n    return h(\"div\", _extends({\n      onScroll: this.handleScroll\n    }, props), h(\"div\", {\n      role: \"presentation\",\n      style: styleInner\n    }, h(\"div\", {\n      role: \"presentation\",\n      style: styleContent\n    }, selection.map(renderRow))));\n  }\n\n}\n\nmodule.exports = VirtualList;","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/dashboard/lib/components/VirtualList.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","h","Component","require","STYLE_INNER","position","width","minHeight","STYLE_CONTENT","top","left","overflow","VirtualList","constructor","props","handleScroll","setState","offset","base","scrollTop","handleResize","resize","focusElement","state","height","componentDidMount","window","addEventListener","componentWillUpdate","contains","document","activeElement","componentDidUpdate","parentNode","focus","componentWillUnmount","removeEventListener","offsetHeight","render","data","rowHeight","renderRow","overscanCount","start","Math","floor","visibleRowCount","max","end","selection","slice","styleInner","styleContent","onScroll","role","style","map","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * Adapted from preact-virtual-list: https://github.com/developit/preact-virtual-list\n *\n * Â© 2016 Jason Miller\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * Adaptations:\n * - Added role=presentation to helper elements\n * - Tweaked styles for Uppy's Dashboard use case\n */\nconst {\n  h,\n  Component\n} = require('preact');\n\nconst STYLE_INNER = {\n  position: 'relative',\n  // Disabled for our use case: the wrapper elements around FileList already deal with overflow,\n  // and this additional property would hide things that we want to show.\n  //\n  // overflow: 'hidden',\n  width: '100%',\n  minHeight: '100%'\n};\nconst STYLE_CONTENT = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  // Because the `top` value gets set to some offset, this `height` being 100% would make the scrollbar\n  // stretch far beyond the content. For our use case, the content div actually can get its height from\n  // the elements inside it, so we don't need to specify a `height` property at all.\n  //\n  // height: '100%',\n  width: '100%',\n  overflow: 'visible'\n};\n\nclass VirtualList extends Component {\n  constructor(props) {\n    super(props); // The currently focused node, used to retain focus when the visible rows change.\n    // To avoid update loops, this should not cause state updates, so it's kept as a plain property.\n\n    this.handleScroll = () => {\n      this.setState({\n        offset: this.base.scrollTop\n      });\n    };\n\n    this.handleResize = () => {\n      this.resize();\n    };\n\n    this.focusElement = null;\n    this.state = {\n      offset: 0,\n      height: 0\n    };\n  }\n\n  componentDidMount() {\n    this.resize();\n    window.addEventListener('resize', this.handleResize);\n  } // TODO: refactor to stable lifecycle method\n  // eslint-disable-next-line\n\n\n  componentWillUpdate() {\n    if (this.base.contains(document.activeElement)) {\n      this.focusElement = document.activeElement;\n    }\n  }\n\n  componentDidUpdate() {\n    // Maintain focus when rows are added and removed.\n    if (this.focusElement && this.focusElement.parentNode && document.activeElement !== this.focusElement) {\n      this.focusElement.focus();\n    }\n\n    this.focusElement = null;\n    this.resize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  resize() {\n    const {\n      height\n    } = this.state;\n\n    if (height !== this.base.offsetHeight) {\n      this.setState({\n        height: this.base.offsetHeight\n      });\n    }\n  }\n\n  render({\n    data,\n    rowHeight,\n    renderRow,\n    overscanCount = 10,\n    ...props\n  }) {\n    const {\n      offset,\n      height\n    } = this.state; // first visible row index\n\n    let start = Math.floor(offset / rowHeight); // actual number of visible rows (without overscan)\n\n    let visibleRowCount = Math.floor(height / rowHeight); // Overscan: render blocks of rows modulo an overscan row count\n    // This dramatically reduces DOM writes during scrolling\n\n    if (overscanCount) {\n      start = Math.max(0, start - start % overscanCount);\n      visibleRowCount += overscanCount;\n    } // last visible + overscan row index + padding to allow keyboard focus to travel past the visible area\n\n\n    const end = start + visibleRowCount + 4; // data slice currently in viewport plus overscan items\n\n    const selection = data.slice(start, end);\n    const styleInner = { ...STYLE_INNER,\n      height: data.length * rowHeight\n    };\n    const styleContent = { ...STYLE_CONTENT,\n      top: start * rowHeight\n    }; // The `role=\"presentation\"` attributes ensure that these wrapper elements are not treated as list\n    // items by accessibility and outline tools.\n\n    return h(\"div\", _extends({\n      onScroll: this.handleScroll\n    }, props), h(\"div\", {\n      role: \"presentation\",\n      style: styleInner\n    }, h(\"div\", {\n      role: \"presentation\",\n      style: styleContent\n    }, selection.map(renderRow))));\n  }\n\n}\n\nmodule.exports = VirtualList;"]},"metadata":{},"sourceType":"script"}