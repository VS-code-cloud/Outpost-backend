{"ast":null,"code":"\"use strict\";\n\nvar _class, _openFileEditorWhenFilesAdded, _attachRenderFunctionToTarget, _isTargetSupported, _getAcquirers, _getProgressIndicators, _getEditors, _temp;\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n\n  return receiver;\n}\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\n\nconst {\n  h\n} = require('preact');\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst StatusBar = require('@uppy/status-bar');\n\nconst Informer = require('@uppy/informer');\n\nconst ThumbnailGenerator = require('@uppy/thumbnail-generator');\n\nconst findAllDOMElements = require('@uppy/utils/lib/findAllDOMElements');\n\nconst toArray = require('@uppy/utils/lib/toArray');\n\nconst getDroppedFiles = require('@uppy/utils/lib/getDroppedFiles');\n\nconst getTextDirection = require('@uppy/utils/lib/getTextDirection');\n\nconst {\n  nanoid\n} = require('nanoid');\n\nconst trapFocus = require('./utils/trapFocus');\n\nconst createSuperFocus = require('./utils/createSuperFocus');\n\nconst memoize = require('memoize-one').default || require('memoize-one');\n\nconst FOCUSABLE_ELEMENTS = require('@uppy/utils/lib/FOCUSABLE_ELEMENTS');\n\nconst DashboardUI = require('./components/Dashboard');\n\nconst TAB_KEY = 9;\nconst ESC_KEY = 27;\n\nfunction createPromise() {\n  const o = {};\n  o.promise = new Promise((resolve, reject) => {\n    o.resolve = resolve;\n    o.reject = reject;\n  });\n  return o;\n}\n\nfunction defaultPickerIcon() {\n  return h(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    width: \"30\",\n    height: \"30\",\n    viewBox: \"0 0 30 30\"\n  }, h(\"path\", {\n    d: \"M15 30c8.284 0 15-6.716 15-15 0-8.284-6.716-15-15-15C6.716 0 0 6.716 0 15c0 8.284 6.716 15 15 15zm4.258-12.676v6.846h-8.426v-6.846H5.204l9.82-12.364 9.82 12.364H19.26z\"\n  }));\n}\n/**\n * Dashboard UI with previews, metadata editing, tabs for various services and more\n */\n\n\nmodule.exports = (_temp = (_openFileEditorWhenFilesAdded = /*#__PURE__*/_classPrivateFieldLooseKey(\"openFileEditorWhenFilesAdded\"), _attachRenderFunctionToTarget = /*#__PURE__*/_classPrivateFieldLooseKey(\"attachRenderFunctionToTarget\"), _isTargetSupported = /*#__PURE__*/_classPrivateFieldLooseKey(\"isTargetSupported\"), _getAcquirers = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAcquirers\"), _getProgressIndicators = /*#__PURE__*/_classPrivateFieldLooseKey(\"getProgressIndicators\"), _getEditors = /*#__PURE__*/_classPrivateFieldLooseKey(\"getEditors\"), _class = class Dashboard extends UIPlugin {\n  constructor(uppy, _opts) {\n    super(uppy, _opts);\n\n    this.removeTarget = plugin => {\n      const pluginState = this.getPluginState(); // filter out the one we want to remove\n\n      const newTargets = pluginState.targets.filter(target => target.id !== plugin.id);\n      this.setPluginState({\n        targets: newTargets\n      });\n    };\n\n    this.addTarget = plugin => {\n      const callerPluginId = plugin.id || plugin.constructor.name;\n      const callerPluginName = plugin.title || callerPluginId;\n      const callerPluginType = plugin.type;\n\n      if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'editor') {\n        const msg = 'Dashboard: can only be targeted by plugins of types: acquirer, progressindicator, editor';\n        this.uppy.log(msg, 'error');\n        return;\n      }\n\n      const target = {\n        id: callerPluginId,\n        name: callerPluginName,\n        type: callerPluginType\n      };\n      const state = this.getPluginState();\n      const newTargets = state.targets.slice();\n      newTargets.push(target);\n      this.setPluginState({\n        targets: newTargets\n      });\n      return this.el;\n    };\n\n    this.hideAllPanels = () => {\n      const state = this.getPluginState();\n      const update = {\n        activePickerPanel: false,\n        showAddFilesPanel: false,\n        activeOverlayType: null,\n        fileCardFor: null,\n        showFileEditor: false\n      };\n\n      if (state.activePickerPanel === update.activePickerPanel && state.showAddFilesPanel === update.showAddFilesPanel && state.showFileEditor === update.showFileEditor && state.activeOverlayType === update.activeOverlayType) {\n        // avoid doing a state update if nothing changed\n        return;\n      }\n\n      this.setPluginState(update);\n    };\n\n    this.showPanel = id => {\n      const {\n        targets\n      } = this.getPluginState();\n      const activePickerPanel = targets.filter(target => {\n        return target.type === 'acquirer' && target.id === id;\n      })[0];\n      this.setPluginState({\n        activePickerPanel,\n        activeOverlayType: 'PickerPanel'\n      });\n    };\n\n    this.canEditFile = file => {\n      const {\n        targets\n      } = this.getPluginState();\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n\n      return editors.some(target => this.uppy.getPlugin(target.id).canEditFile(file));\n    };\n\n    this.openFileEditor = file => {\n      const {\n        targets\n      } = this.getPluginState();\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n\n      this.setPluginState({\n        showFileEditor: true,\n        fileCardFor: file.id || null,\n        activeOverlayType: 'FileEditor'\n      });\n      editors.forEach(editor => {\n        this.uppy.getPlugin(editor.id).selectFile(file);\n      });\n    };\n\n    this.saveFileEditor = () => {\n      const {\n        targets\n      } = this.getPluginState();\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n\n      editors.forEach(editor => {\n        this.uppy.getPlugin(editor.id).save();\n      });\n      this.hideAllPanels();\n    };\n\n    this.openModal = () => {\n      const {\n        promise,\n        resolve\n      } = createPromise(); // save scroll position\n\n      this.savedScrollPosition = window.pageYOffset; // save active element, so we can restore focus when modal is closed\n\n      this.savedActiveElement = document.activeElement;\n\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.add('uppy-Dashboard-isFixed');\n      }\n\n      if (this.opts.animateOpenClose && this.getPluginState().isClosing) {\n        const handler = () => {\n          this.setPluginState({\n            isHidden: false\n          });\n          this.el.removeEventListener('animationend', handler, false);\n          resolve();\n        };\n\n        this.el.addEventListener('animationend', handler, false);\n      } else {\n        this.setPluginState({\n          isHidden: false\n        });\n        resolve();\n      }\n\n      if (this.opts.browserBackButtonClose) {\n        this.updateBrowserHistory();\n      } // handle ESC and TAB keys in modal dialog\n\n\n      document.addEventListener('keydown', this.handleKeyDownInModal);\n      this.uppy.emit('dashboard:modal-open');\n      return promise;\n    };\n\n    this.closeModal = (opts = {}) => {\n      const {\n        // Whether the modal is being closed by the user (`true`) or by other means (e.g. browser back button)\n        manualClose = true\n      } = opts;\n      const {\n        isHidden,\n        isClosing\n      } = this.getPluginState();\n\n      if (isHidden || isClosing) {\n        // short-circuit if animation is ongoing\n        return;\n      }\n\n      const {\n        promise,\n        resolve\n      } = createPromise();\n\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.remove('uppy-Dashboard-isFixed');\n      }\n\n      if (this.opts.animateOpenClose) {\n        this.setPluginState({\n          isClosing: true\n        });\n\n        const handler = () => {\n          this.setPluginState({\n            isHidden: true,\n            isClosing: false\n          });\n          this.superFocus.cancel();\n          this.savedActiveElement.focus();\n          this.el.removeEventListener('animationend', handler, false);\n          resolve();\n        };\n\n        this.el.addEventListener('animationend', handler, false);\n      } else {\n        this.setPluginState({\n          isHidden: true\n        });\n        this.superFocus.cancel();\n        this.savedActiveElement.focus();\n        resolve();\n      } // handle ESC and TAB keys in modal dialog\n\n\n      document.removeEventListener('keydown', this.handleKeyDownInModal);\n\n      if (manualClose) {\n        if (this.opts.browserBackButtonClose) {\n          var _history$state; // Make sure that the latest entry in the history state is our modal name\n          // eslint-disable-next-line no-restricted-globals\n\n\n          if ((_history$state = history.state) != null && _history$state[this.modalName]) {\n            // Go back in history to clear out the entry we created (ultimately closing the modal)\n            // eslint-disable-next-line no-restricted-globals\n            history.back();\n          }\n        }\n      }\n\n      this.uppy.emit('dashboard:modal-closed');\n      return promise;\n    };\n\n    this.isModalOpen = () => {\n      return !this.getPluginState().isHidden || false;\n    };\n\n    this.requestCloseModal = () => {\n      if (this.opts.onRequestCloseModal) {\n        return this.opts.onRequestCloseModal();\n      }\n\n      return this.closeModal();\n    };\n\n    this.setDarkModeCapability = isDarkModeOn => {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: { ...capabilities,\n          darkMode: isDarkModeOn\n        }\n      });\n    };\n\n    this.handleSystemDarkModeChange = event => {\n      const isDarkModeOnNow = event.matches;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnNow ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnNow);\n    };\n\n    this.toggleFileCard = (show, fileID) => {\n      const file = this.uppy.getFile(fileID);\n\n      if (show) {\n        this.uppy.emit('dashboard:file-edit-start', file);\n      } else {\n        this.uppy.emit('dashboard:file-edit-complete', file);\n      }\n\n      this.setPluginState({\n        fileCardFor: show ? fileID : null,\n        activeOverlayType: show ? 'FileCard' : null\n      });\n    };\n\n    this.toggleAddFilesPanel = show => {\n      this.setPluginState({\n        showAddFilesPanel: show,\n        activeOverlayType: show ? 'AddFiles' : null\n      });\n    };\n\n    this.addFiles = files => {\n      const descriptors = files.map(file => ({\n        source: this.id,\n        name: file.name,\n        type: file.type,\n        data: file,\n        meta: {\n          // path of the file relative to the ancestor directory the user selected.\n          // e.g. 'docs/Old Prague/airbnb.pdf'\n          relativePath: file.relativePath || null\n        }\n      }));\n\n      try {\n        this.uppy.addFiles(descriptors);\n      } catch (err) {\n        this.uppy.log(err);\n      }\n    };\n\n    this.startListeningToResize = () => {\n      // Watch for Dashboard container (`.uppy-Dashboard-inner`) resize\n      // and update containerWidth/containerHeight in plugin state accordingly.\n      // Emits first event on initialization.\n      this.resizeObserver = new ResizeObserver(entries => {\n        const uppyDashboardInnerEl = entries[0];\n        const {\n          width,\n          height\n        } = uppyDashboardInnerEl.contentRect;\n        this.uppy.log(`[Dashboard] resized: ${width} / ${height}`, 'debug');\n        this.setPluginState({\n          containerWidth: width,\n          containerHeight: height,\n          areInsidesReadyToBeVisible: true\n        });\n      });\n      this.resizeObserver.observe(this.el.querySelector('.uppy-Dashboard-inner')); // If ResizeObserver fails to emit an event telling us what size to use - default to the mobile view\n\n      this.makeDashboardInsidesVisibleAnywayTimeout = setTimeout(() => {\n        const pluginState = this.getPluginState();\n        const isModalAndClosed = !this.opts.inline && pluginState.isHidden;\n\n        if ( // if ResizeObserver hasn't yet fired,\n        !pluginState.areInsidesReadyToBeVisible // and it's not due to the modal being closed\n        && !isModalAndClosed) {\n          this.uppy.log(\"[Dashboard] resize event didn't fire on time: defaulted to mobile layout\", 'debug');\n          this.setPluginState({\n            areInsidesReadyToBeVisible: true\n          });\n        }\n      }, 1000);\n    };\n\n    this.stopListeningToResize = () => {\n      this.resizeObserver.disconnect();\n      clearTimeout(this.makeDashboardInsidesVisibleAnywayTimeout);\n    };\n\n    this.recordIfFocusedOnUppyRecently = event => {\n      if (this.el.contains(event.target)) {\n        this.ifFocusedOnUppyRecently = true;\n      } else {\n        this.ifFocusedOnUppyRecently = false; // ___Why run this.superFocus.cancel here when it already runs in superFocusOnEachUpdate?\n        //    Because superFocus is debounced, when we move from Uppy to some other element on the page,\n        //    previously run superFocus sometimes hits and moves focus back to Uppy.\n\n        this.superFocus.cancel();\n      }\n    };\n\n    this.disableAllFocusableElements = disable => {\n      const focusableNodes = toArray(this.el.querySelectorAll(FOCUSABLE_ELEMENTS));\n\n      if (disable) {\n        focusableNodes.forEach(node => {\n          // save previous tabindex in a data-attribute, to restore when enabling\n          const currentTabIndex = node.getAttribute('tabindex');\n\n          if (currentTabIndex) {\n            node.dataset.inertTabindex = currentTabIndex;\n          }\n\n          node.setAttribute('tabindex', '-1');\n        });\n      } else {\n        focusableNodes.forEach(node => {\n          if ('inertTabindex' in node.dataset) {\n            node.setAttribute('tabindex', node.dataset.inertTabindex);\n          } else {\n            node.removeAttribute('tabindex');\n          }\n        });\n      }\n\n      this.dashboardIsDisabled = disable;\n    };\n\n    this.updateBrowserHistory = () => {\n      var _history$state2; // Ensure history state does not already contain our modal name to avoid double-pushing\n      // eslint-disable-next-line no-restricted-globals\n\n\n      if (!((_history$state2 = history.state) != null && _history$state2[this.modalName])) {\n        // Push to history so that the page is not lost on browser back button press\n        // eslint-disable-next-line no-restricted-globals\n        history.pushState({ // eslint-disable-next-line no-restricted-globals\n          ...history.state,\n          [this.modalName]: true\n        }, '');\n      } // Listen for back button presses\n\n\n      window.addEventListener('popstate', this.handlePopState, false);\n    };\n\n    this.handlePopState = event => {\n      var _event$state; // Close the modal if the history state no longer contains our modal name\n\n\n      if (this.isModalOpen() && (!event.state || !event.state[this.modalName])) {\n        this.closeModal({\n          manualClose: false\n        });\n      } // When the browser back button is pressed and uppy is now the latest entry\n      // in the history but the modal is closed, fix the history by removing the\n      // uppy history entry.\n      // This occurs when another entry is added into the history state while the\n      // modal is open, and then the modal gets manually closed.\n      // Solves PR #575 (https://github.com/transloadit/uppy/pull/575)\n\n\n      if (!this.isModalOpen() && (_event$state = event.state) != null && _event$state[this.modalName]) {\n        // eslint-disable-next-line no-restricted-globals\n        history.back();\n      }\n    };\n\n    this.handleKeyDownInModal = event => {\n      // close modal on esc key press\n      if (event.keyCode === ESC_KEY) this.requestCloseModal(event); // trap focus on tab key press\n\n      if (event.keyCode === TAB_KEY) trapFocus.forModal(event, this.getPluginState().activeOverlayType, this.el);\n    };\n\n    this.handleClickOutside = () => {\n      if (this.opts.closeModalOnClickOutside) this.requestCloseModal();\n    };\n\n    this.handlePaste = event => {\n      // 1. Let any acquirer plugin (Url/Webcam/etc.) handle pastes to the root\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootPaste(event)\n          plugin.handleRootPaste == null ? void 0 : plugin.handleRootPaste(event);\n        }\n      }); // 2. Add all dropped files\n\n      const files = toArray(event.clipboardData.files);\n      this.addFiles(files);\n    };\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const files = toArray(event.target.files);\n      this.addFiles(files);\n    };\n\n    this.handleDragOver = event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (this.opts.disabled || this.opts.disableLocalFiles || !this.uppy.getState().allowNewUpload) {\n        return;\n      } // 1. Add a small (+) icon on drop\n      // (and prevent browsers from interpreting this as files being _moved_ into the\n      // browser, https://github.com/transloadit/uppy/issues/1978).\n\n\n      event.dataTransfer.dropEffect = 'copy';\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: true\n      });\n    };\n\n    this.handleDragLeave = event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (this.opts.disabled || this.opts.disableLocalFiles || !this.uppy.getState().allowNewUpload) {\n        return;\n      }\n\n      clearTimeout(this.removeDragOverClassTimeout); // Timeout against flickering, this solution is taken from drag-drop library.\n      // Solution with 'pointer-events: none' didn't work across browsers.\n\n      this.removeDragOverClassTimeout = setTimeout(() => {\n        this.setPluginState({\n          isDraggingOver: false\n        });\n      }, 50);\n    };\n\n    this.handleDrop = event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (this.opts.disabled || this.opts.disableLocalFiles || !this.uppy.getState().allowNewUpload) {\n        return;\n      }\n\n      clearTimeout(this.removeDragOverClassTimeout); // 2. Remove dragover class\n\n      this.setPluginState({\n        isDraggingOver: false\n      }); // 3. Let any acquirer plugin (Url/Webcam/etc.) handle drops to the root\n\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootDrop(event)\n          plugin.handleRootDrop == null ? void 0 : plugin.handleRootDrop(event);\n        }\n      }); // 4. Add all dropped files\n\n      let executedDropErrorOnce = false;\n\n      const logDropError = error => {\n        this.uppy.log(error, 'error'); // In practice all drop errors are most likely the same, so let's just show one to avoid overwhelming the user\n\n        if (!executedDropErrorOnce) {\n          this.uppy.info(error.message, 'error');\n          executedDropErrorOnce = true;\n        }\n      };\n\n      getDroppedFiles(event.dataTransfer, {\n        logDropError\n      }).then(files => {\n        if (files.length > 0) {\n          this.uppy.log('[Dashboard] Files were dropped');\n          this.addFiles(files);\n        }\n      });\n    };\n\n    this.handleRequestThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:request', file);\n      }\n    };\n\n    this.handleCancelThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:cancel', file);\n      }\n    };\n\n    this.handleKeyDownInInline = event => {\n      // Trap focus on tab key press.\n      if (event.keyCode === TAB_KEY) trapFocus.forInline(event, this.getPluginState().activeOverlayType, this.el);\n    };\n\n    this.handlePasteOnBody = event => {\n      const isFocusInOverlay = this.el.contains(document.activeElement);\n\n      if (isFocusInOverlay) {\n        this.handlePaste(event);\n      }\n    };\n\n    this.handleComplete = ({\n      failed\n    }) => {\n      if (this.opts.closeAfterFinish && failed.length === 0) {\n        // All uploads are done\n        this.requestCloseModal();\n      }\n    };\n\n    this.handleCancelRestore = () => {\n      this.uppy.emit('restore-canceled');\n    };\n\n    Object.defineProperty(this, _openFileEditorWhenFilesAdded, {\n      writable: true,\n      value: files => {\n        const firstFile = files[0];\n\n        if (this.canEditFile(firstFile)) {\n          this.openFileEditor(firstFile);\n        }\n      }\n    });\n\n    this.initEvents = () => {\n      // Modal open button\n      if (this.opts.trigger && !this.opts.inline) {\n        const showModalTrigger = findAllDOMElements(this.opts.trigger);\n\n        if (showModalTrigger) {\n          showModalTrigger.forEach(trigger => trigger.addEventListener('click', this.openModal));\n        } else {\n          this.uppy.log('Dashboard modal trigger not found. Make sure `trigger` is set in Dashboard options, unless you are planning to call `dashboard.openModal()` method yourself', 'warning');\n        }\n      }\n\n      this.startListeningToResize();\n      document.addEventListener('paste', this.handlePasteOnBody);\n      this.uppy.on('plugin-remove', this.removeTarget);\n      this.uppy.on('file-added', this.hideAllPanels);\n      this.uppy.on('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.on('file-editor:complete', this.hideAllPanels);\n      this.uppy.on('complete', this.handleComplete); // ___Why fire on capture?\n      //    Because this.ifFocusedOnUppyRecently needs to change before onUpdate() fires.\n\n      document.addEventListener('focus', this.recordIfFocusedOnUppyRecently, true);\n      document.addEventListener('click', this.recordIfFocusedOnUppyRecently, true);\n\n      if (this.opts.inline) {\n        this.el.addEventListener('keydown', this.handleKeyDownInInline);\n      }\n\n      if (this.opts.autoOpenFileEditor) {\n        this.uppy.on('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n\n    this.removeEvents = () => {\n      const showModalTrigger = findAllDOMElements(this.opts.trigger);\n\n      if (!this.opts.inline && showModalTrigger) {\n        showModalTrigger.forEach(trigger => trigger.removeEventListener('click', this.openModal));\n      }\n\n      this.stopListeningToResize();\n      document.removeEventListener('paste', this.handlePasteOnBody);\n      window.removeEventListener('popstate', this.handlePopState, false);\n      this.uppy.off('plugin-remove', this.removeTarget);\n      this.uppy.off('file-added', this.hideAllPanels);\n      this.uppy.off('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.off('file-editor:complete', this.hideAllPanels);\n      this.uppy.off('complete', this.handleComplete);\n      document.removeEventListener('focus', this.recordIfFocusedOnUppyRecently);\n      document.removeEventListener('click', this.recordIfFocusedOnUppyRecently);\n\n      if (this.opts.inline) {\n        this.el.removeEventListener('keydown', this.handleKeyDownInInline);\n      }\n\n      if (this.opts.autoOpenFileEditor) {\n        this.uppy.off('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n\n    this.superFocusOnEachUpdate = () => {\n      const isFocusInUppy = this.el.contains(document.activeElement); // When focus is lost on the page (== focus is on body for most browsers, or focus is null for IE11)\n\n      const isFocusNowhere = document.activeElement === document.body || document.activeElement === null;\n      const isInformerHidden = this.uppy.getState().info.isHidden;\n      const isModal = !this.opts.inline;\n\n      if ( // If update is connected to showing the Informer - let the screen reader calmly read it.\n      isInformerHidden && ( // If we are in a modal - always superfocus without concern for other elements\n      // on the page (user is unlikely to want to interact with the rest of the page)\n      isModal // If we are already inside of Uppy, or\n      || isFocusInUppy // If we are not focused on anything BUT we have already, at least once, focused on uppy\n      //   1. We focus when isFocusNowhere, because when the element we were focused\n      //      on disappears (e.g. an overlay), - focus gets lost. If user is typing\n      //      something somewhere else on the page, - focus won't be 'nowhere'.\n      //   2. We only focus when focus is nowhere AND this.ifFocusedOnUppyRecently,\n      //      to avoid focus jumps if we do something else on the page.\n      //   [Practical check] Without '&& this.ifFocusedOnUppyRecently', in Safari, in inline mode,\n      //                     when file is uploading, - navigate via tab to the checkbox,\n      //                     try to press space multiple times. Focus will jump to Uppy.\n      || isFocusNowhere && this.ifFocusedOnUppyRecently)) {\n        this.superFocus(this.el, this.getPluginState().activeOverlayType);\n      } else {\n        this.superFocus.cancel();\n      }\n    };\n\n    this.afterUpdate = () => {\n      if (this.opts.disabled && !this.dashboardIsDisabled) {\n        this.disableAllFocusableElements(true);\n        return;\n      }\n\n      if (!this.opts.disabled && this.dashboardIsDisabled) {\n        this.disableAllFocusableElements(false);\n      }\n\n      this.superFocusOnEachUpdate();\n    };\n\n    this.saveFileCard = (meta, fileID) => {\n      this.uppy.setFileMeta(fileID, meta);\n      this.toggleFileCard(false, fileID);\n    };\n\n    Object.defineProperty(this, _attachRenderFunctionToTarget, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id);\n        return { ...target,\n          icon: plugin.icon || this.opts.defaultPickerIcon,\n          render: plugin.render\n        };\n      }\n    });\n    Object.defineProperty(this, _isTargetSupported, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id); // If the plugin does not provide a `supported` check, assume the plugin works everywhere.\n\n        if (typeof plugin.isSupported !== 'function') {\n          return true;\n        }\n\n        return plugin.isSupported();\n      }\n    });\n    Object.defineProperty(this, _getAcquirers, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'acquirer' && _classPrivateFieldLooseBase(this, _isTargetSupported)[_isTargetSupported](target)).map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getProgressIndicators, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'progressindicator').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getEditors, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'editor').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n\n    this.render = state => {\n      const pluginState = this.getPluginState();\n      const {\n        files,\n        capabilities,\n        allowNewUpload\n      } = state;\n      const {\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused\n      } = this.uppy.getObjectOfFilesPerState();\n\n      const acquirers = _classPrivateFieldLooseBase(this, _getAcquirers)[_getAcquirers](pluginState.targets);\n\n      const progressindicators = _classPrivateFieldLooseBase(this, _getProgressIndicators)[_getProgressIndicators](pluginState.targets);\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](pluginState.targets);\n\n      let theme;\n\n      if (this.opts.theme === 'auto') {\n        theme = capabilities.darkMode ? 'dark' : 'light';\n      } else {\n        theme = this.opts.theme;\n      }\n\n      if (['files', 'folders', 'both'].indexOf(this.opts.fileManagerSelectionType) < 0) {\n        this.opts.fileManagerSelectionType = 'files'; // eslint-disable-next-line no-console\n\n        console.warn(`Unsupported option for \"fileManagerSelectionType\". Using default of \"${this.opts.fileManagerSelectionType}\".`);\n      }\n\n      return DashboardUI({\n        state,\n        isHidden: pluginState.isHidden,\n        files,\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused,\n        totalFileCount: Object.keys(files).length,\n        totalProgress: state.totalProgress,\n        allowNewUpload,\n        acquirers,\n        theme,\n        disabled: this.opts.disabled,\n        disableLocalFiles: this.opts.disableLocalFiles,\n        direction: this.opts.direction,\n        activePickerPanel: pluginState.activePickerPanel,\n        showFileEditor: pluginState.showFileEditor,\n        saveFileEditor: this.saveFileEditor,\n        disableAllFocusableElements: this.disableAllFocusableElements,\n        animateOpenClose: this.opts.animateOpenClose,\n        isClosing: pluginState.isClosing,\n        progressindicators,\n        editors,\n        autoProceed: this.uppy.opts.autoProceed,\n        id: this.id,\n        closeModal: this.requestCloseModal,\n        handleClickOutside: this.handleClickOutside,\n        handleInputChange: this.handleInputChange,\n        handlePaste: this.handlePaste,\n        inline: this.opts.inline,\n        showPanel: this.showPanel,\n        hideAllPanels: this.hideAllPanels,\n        i18n: this.i18n,\n        i18nArray: this.i18nArray,\n        uppy: this.uppy,\n        note: this.opts.note,\n        recoveredState: state.recoveredState,\n        metaFields: pluginState.metaFields,\n        resumableUploads: capabilities.resumableUploads || false,\n        individualCancellation: capabilities.individualCancellation,\n        isMobileDevice: capabilities.isMobileDevice,\n        fileCardFor: pluginState.fileCardFor,\n        toggleFileCard: this.toggleFileCard,\n        toggleAddFilesPanel: this.toggleAddFilesPanel,\n        showAddFilesPanel: pluginState.showAddFilesPanel,\n        saveFileCard: this.saveFileCard,\n        openFileEditor: this.openFileEditor,\n        canEditFile: this.canEditFile,\n        width: this.opts.width,\n        height: this.opts.height,\n        showLinkToFileUploadResult: this.opts.showLinkToFileUploadResult,\n        fileManagerSelectionType: this.opts.fileManagerSelectionType,\n        proudlyDisplayPoweredByUppy: this.opts.proudlyDisplayPoweredByUppy,\n        hideCancelButton: this.opts.hideCancelButton,\n        hideRetryButton: this.opts.hideRetryButton,\n        hidePauseResumeButton: this.opts.hidePauseResumeButton,\n        showRemoveButtonAfterComplete: this.opts.showRemoveButtonAfterComplete,\n        containerWidth: pluginState.containerWidth,\n        containerHeight: pluginState.containerHeight,\n        areInsidesReadyToBeVisible: pluginState.areInsidesReadyToBeVisible,\n        isTargetDOMEl: this.isTargetDOMEl,\n        parentElement: this.el,\n        allowedFileTypes: this.uppy.opts.restrictions.allowedFileTypes,\n        maxNumberOfFiles: this.uppy.opts.restrictions.maxNumberOfFiles,\n        requiredMetaFields: this.uppy.opts.restrictions.requiredMetaFields,\n        showSelectedFiles: this.opts.showSelectedFiles,\n        handleCancelRestore: this.handleCancelRestore,\n        handleRequestThumbnail: this.handleRequestThumbnail,\n        handleCancelThumbnail: this.handleCancelThumbnail,\n        // drag props\n        isDraggingOver: pluginState.isDraggingOver,\n        handleDragOver: this.handleDragOver,\n        handleDragLeave: this.handleDragLeave,\n        handleDrop: this.handleDrop\n      });\n    };\n\n    this.discoverProviderPlugins = () => {\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin && !plugin.target && plugin.opts && plugin.opts.target === this.constructor) {\n          this.addTarget(plugin);\n        }\n      });\n    };\n\n    this.install = () => {\n      // Set default state for Dashboard\n      this.setPluginState({\n        isHidden: true,\n        fileCardFor: null,\n        activeOverlayType: null,\n        showAddFilesPanel: false,\n        activePickerPanel: false,\n        showFileEditor: false,\n        metaFields: this.opts.metaFields,\n        targets: [],\n        // We'll make them visible once .containerWidth is determined\n        areInsidesReadyToBeVisible: false,\n        isDraggingOver: false\n      });\n      const {\n        inline,\n        closeAfterFinish\n      } = this.opts;\n\n      if (inline && closeAfterFinish) {\n        throw new Error('[Dashboard] `closeAfterFinish: true` cannot be used on an inline Dashboard, because an inline Dashboard cannot be closed at all. Either set `inline: false`, or disable the `closeAfterFinish` option.');\n      }\n\n      const {\n        allowMultipleUploads,\n        allowMultipleUploadBatches\n      } = this.uppy.opts;\n\n      if ((allowMultipleUploads || allowMultipleUploadBatches) && closeAfterFinish) {\n        this.uppy.log('[Dashboard] When using `closeAfterFinish`, we recommended setting the `allowMultipleUploadBatches` option to `false` in the Uppy constructor. See https://uppy.io/docs/uppy/#allowMultipleUploads-true', 'warning');\n      }\n\n      const {\n        target\n      } = this.opts;\n\n      if (target) {\n        this.mount(target, this);\n      }\n\n      const plugins = this.opts.plugins || [];\n      plugins.forEach(pluginID => {\n        const plugin = this.uppy.getPlugin(pluginID);\n\n        if (plugin) {\n          plugin.mount(this, plugin);\n        }\n      });\n\n      if (!this.opts.disableStatusBar) {\n        this.uppy.use(StatusBar, {\n          id: `${this.id}:StatusBar`,\n          target: this,\n          hideUploadButton: this.opts.hideUploadButton,\n          hideRetryButton: this.opts.hideRetryButton,\n          hidePauseResumeButton: this.opts.hidePauseResumeButton,\n          hideCancelButton: this.opts.hideCancelButton,\n          showProgressDetails: this.opts.showProgressDetails,\n          hideAfterFinish: this.opts.hideProgressAfterFinish,\n          locale: this.opts.locale,\n          doneButtonHandler: this.opts.doneButtonHandler\n        });\n      }\n\n      if (!this.opts.disableInformer) {\n        this.uppy.use(Informer, {\n          id: `${this.id}:Informer`,\n          target: this\n        });\n      }\n\n      if (!this.opts.disableThumbnailGenerator) {\n        this.uppy.use(ThumbnailGenerator, {\n          id: `${this.id}:ThumbnailGenerator`,\n          thumbnailWidth: this.opts.thumbnailWidth,\n          thumbnailType: this.opts.thumbnailType,\n          waitForThumbnailsBeforeUpload: this.opts.waitForThumbnailsBeforeUpload,\n          // If we don't block on thumbnails, we can lazily generate them\n          lazy: !this.opts.waitForThumbnailsBeforeUpload\n        });\n      } // Dark Mode / theme\n\n\n      this.darkModeMediaQuery = typeof window !== 'undefined' && window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null;\n      const isDarkModeOnFromTheStart = this.darkModeMediaQuery ? this.darkModeMediaQuery.matches : false;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnFromTheStart ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnFromTheStart);\n\n      if (this.opts.theme === 'auto') {\n        this.darkModeMediaQuery.addListener(this.handleSystemDarkModeChange);\n      }\n\n      this.discoverProviderPlugins();\n      this.initEvents();\n    };\n\n    this.uninstall = () => {\n      if (!this.opts.disableInformer) {\n        const informer = this.uppy.getPlugin(`${this.id}:Informer`); // Checking if this plugin exists, in case it was removed by uppy-core\n        // before the Dashboard was.\n\n        if (informer) this.uppy.removePlugin(informer);\n      }\n\n      if (!this.opts.disableStatusBar) {\n        const statusBar = this.uppy.getPlugin(`${this.id}:StatusBar`);\n        if (statusBar) this.uppy.removePlugin(statusBar);\n      }\n\n      if (!this.opts.disableThumbnailGenerator) {\n        const thumbnail = this.uppy.getPlugin(`${this.id}:ThumbnailGenerator`);\n        if (thumbnail) this.uppy.removePlugin(thumbnail);\n      }\n\n      const plugins = this.opts.plugins || [];\n      plugins.forEach(pluginID => {\n        const plugin = this.uppy.getPlugin(pluginID);\n        if (plugin) plugin.unmount();\n      });\n\n      if (this.opts.theme === 'auto') {\n        this.darkModeMediaQuery.removeListener(this.handleSystemDarkModeChange);\n      }\n\n      this.unmount();\n      this.removeEvents();\n    };\n\n    this.id = this.opts.id || 'Dashboard';\n    this.title = 'Dashboard';\n    this.type = 'orchestrator';\n    this.modalName = `uppy-Dashboard-${nanoid()}`;\n    this.defaultLocale = {\n      strings: {\n        closeModal: 'Close Modal',\n        importFrom: 'Import from %{name}',\n        addingMoreFiles: 'Adding more files',\n        addMoreFiles: 'Add more files',\n        dashboardWindowTitle: 'File Uploader Window (Press escape to close)',\n        dashboardTitle: 'File Uploader',\n        copyLinkToClipboardSuccess: 'Link copied to clipboard',\n        copyLinkToClipboardFallback: 'Copy the URL below',\n        copyLink: 'Copy link',\n        back: 'Back',\n        addMore: 'Add more',\n        removeFile: 'Remove file %{file}',\n        editFile: 'Edit file',\n        editFileWithFilename: 'Edit file %{file}',\n        editing: 'Editing %{file}',\n        finishEditingFile: 'Finish editing file',\n        save: 'Save',\n        saveChanges: 'Save changes',\n        cancel: 'Cancel',\n        myDevice: 'My Device',\n        dropPasteFiles: 'Drop files here or %{browseFiles}',\n        dropPasteFolders: 'Drop files here or %{browseFolders}',\n        dropPasteBoth: 'Drop files here, %{browseFiles} or %{browseFolders}',\n        dropPasteImportFiles: 'Drop files here, %{browseFiles} or import from:',\n        dropPasteImportFolders: 'Drop files here, %{browseFolders} or import from:',\n        dropPasteImportBoth: 'Drop files here, %{browseFiles}, %{browseFolders} or import from:',\n        importFiles: 'Import files from:',\n        dropHint: 'Drop your files here',\n        browseFiles: 'browse files',\n        browseFolders: 'browse folders',\n        uploadComplete: 'Upload complete',\n        uploadPaused: 'Upload paused',\n        resumeUpload: 'Resume upload',\n        pauseUpload: 'Pause upload',\n        retryUpload: 'Retry upload',\n        cancelUpload: 'Cancel upload',\n        xFilesSelected: {\n          0: '%{smart_count} file selected',\n          1: '%{smart_count} files selected'\n        },\n        uploadingXFiles: {\n          0: 'Uploading %{smart_count} file',\n          1: 'Uploading %{smart_count} files'\n        },\n        processingXFiles: {\n          0: 'Processing %{smart_count} file',\n          1: 'Processing %{smart_count} files'\n        },\n        recoveredXFiles: {\n          0: 'We could not fully recover 1 file. Please re-select it and resume the upload.',\n          1: 'We could not fully recover %{smart_count} files. Please re-select them and resume the upload.'\n        },\n        recoveredAllFiles: 'We restored all files. You can now resume the upload.',\n        sessionRestored: 'Session restored',\n        reSelect: 'Re-select',\n        poweredBy: 'Powered by %{uppy}'\n      }\n    }; // set default options\n\n    const defaultOptions = {\n      target: 'body',\n      metaFields: [],\n      trigger: null,\n      inline: false,\n      width: 750,\n      height: 550,\n      thumbnailWidth: 280,\n      thumbnailType: 'image/jpeg',\n      waitForThumbnailsBeforeUpload: false,\n      defaultPickerIcon,\n      showLinkToFileUploadResult: false,\n      showProgressDetails: false,\n      hideUploadButton: false,\n      hideCancelButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideProgressAfterFinish: false,\n      doneButtonHandler: () => {\n        this.uppy.reset();\n        this.requestCloseModal();\n      },\n      note: null,\n      closeModalOnClickOutside: false,\n      closeAfterFinish: false,\n      disableStatusBar: false,\n      disableInformer: false,\n      disableThumbnailGenerator: false,\n      disablePageScrollWhenModalOpen: true,\n      animateOpenClose: true,\n      fileManagerSelectionType: 'files',\n      proudlyDisplayPoweredByUppy: true,\n      onRequestCloseModal: () => this.closeModal(),\n      showSelectedFiles: true,\n      showRemoveButtonAfterComplete: false,\n      browserBackButtonClose: false,\n      theme: 'light',\n      autoOpenFileEditor: false,\n      disabled: false,\n      disableLocalFiles: false\n    }; // merge default options with the ones set by user\n\n    this.opts = { ...defaultOptions,\n      ..._opts\n    };\n    this.i18nInit();\n    this.superFocus = createSuperFocus();\n    this.ifFocusedOnUppyRecently = false; // Timeouts\n\n    this.makeDashboardInsidesVisibleAnywayTimeout = null;\n    this.removeDragOverClassTimeout = null;\n  }\n\n  onMount() {\n    // Set the text direction if the page has not defined one.\n    const element = this.el;\n    const direction = getTextDirection(element);\n\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  }\n\n}), _class.VERSION = \"2.1.1\", _temp);","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/dashboard/lib/index.js"],"names":["_class","_openFileEditorWhenFilesAdded","_attachRenderFunctionToTarget","_isTargetSupported","_getAcquirers","_getProgressIndicators","_getEditors","_temp","_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","h","require","UIPlugin","StatusBar","Informer","ThumbnailGenerator","findAllDOMElements","toArray","getDroppedFiles","getTextDirection","nanoid","trapFocus","createSuperFocus","memoize","default","FOCUSABLE_ELEMENTS","DashboardUI","TAB_KEY","ESC_KEY","createPromise","o","promise","Promise","resolve","reject","defaultPickerIcon","focusable","width","height","viewBox","d","module","exports","Dashboard","constructor","uppy","_opts","removeTarget","plugin","pluginState","getPluginState","newTargets","targets","filter","target","setPluginState","addTarget","callerPluginId","callerPluginName","title","callerPluginType","type","msg","log","state","slice","push","el","hideAllPanels","update","activePickerPanel","showAddFilesPanel","activeOverlayType","fileCardFor","showFileEditor","showPanel","canEditFile","file","editors","some","getPlugin","openFileEditor","forEach","editor","selectFile","saveFileEditor","save","openModal","savedScrollPosition","window","pageYOffset","savedActiveElement","document","activeElement","opts","disablePageScrollWhenModalOpen","body","classList","add","animateOpenClose","isClosing","handler","isHidden","removeEventListener","addEventListener","browserBackButtonClose","updateBrowserHistory","handleKeyDownInModal","emit","closeModal","manualClose","remove","superFocus","cancel","focus","_history$state","history","modalName","back","isModalOpen","requestCloseModal","onRequestCloseModal","setDarkModeCapability","isDarkModeOn","capabilities","getState","setState","darkMode","handleSystemDarkModeChange","event","isDarkModeOnNow","matches","toggleFileCard","show","fileID","getFile","toggleAddFilesPanel","addFiles","files","descriptors","map","source","data","meta","relativePath","err","startListeningToResize","resizeObserver","ResizeObserver","entries","uppyDashboardInnerEl","contentRect","containerWidth","containerHeight","areInsidesReadyToBeVisible","observe","querySelector","makeDashboardInsidesVisibleAnywayTimeout","setTimeout","isModalAndClosed","inline","stopListeningToResize","disconnect","clearTimeout","recordIfFocusedOnUppyRecently","contains","ifFocusedOnUppyRecently","disableAllFocusableElements","disable","focusableNodes","querySelectorAll","node","currentTabIndex","getAttribute","dataset","inertTabindex","setAttribute","removeAttribute","dashboardIsDisabled","_history$state2","pushState","handlePopState","_event$state","keyCode","forModal","handleClickOutside","closeModalOnClickOutside","handlePaste","iteratePlugins","handleRootPaste","clipboardData","handleInputChange","preventDefault","handleDragOver","stopPropagation","disabled","disableLocalFiles","allowNewUpload","dataTransfer","dropEffect","removeDragOverClassTimeout","isDraggingOver","handleDragLeave","handleDrop","handleRootDrop","executedDropErrorOnce","logDropError","error","info","message","then","length","handleRequestThumbnail","waitForThumbnailsBeforeUpload","handleCancelThumbnail","handleKeyDownInInline","forInline","handlePasteOnBody","isFocusInOverlay","handleComplete","failed","closeAfterFinish","handleCancelRestore","defineProperty","writable","value","firstFile","initEvents","trigger","showModalTrigger","on","autoOpenFileEditor","removeEvents","off","superFocusOnEachUpdate","isFocusInUppy","isFocusNowhere","isInformerHidden","isModal","afterUpdate","saveFileCard","setFileMeta","icon","render","isSupported","newFiles","uploadStartedFiles","completeFiles","erroredFiles","inProgressFiles","inProgressNotPausedFiles","processingFiles","isUploadStarted","isAllComplete","isAllErrored","isAllPaused","getObjectOfFilesPerState","acquirers","progressindicators","theme","indexOf","fileManagerSelectionType","console","warn","totalFileCount","keys","totalProgress","direction","autoProceed","i18n","i18nArray","note","recoveredState","metaFields","resumableUploads","individualCancellation","isMobileDevice","showLinkToFileUploadResult","proudlyDisplayPoweredByUppy","hideCancelButton","hideRetryButton","hidePauseResumeButton","showRemoveButtonAfterComplete","isTargetDOMEl","parentElement","allowedFileTypes","restrictions","maxNumberOfFiles","requiredMetaFields","showSelectedFiles","discoverProviderPlugins","install","Error","allowMultipleUploads","allowMultipleUploadBatches","mount","plugins","pluginID","disableStatusBar","use","hideUploadButton","showProgressDetails","hideAfterFinish","hideProgressAfterFinish","locale","doneButtonHandler","disableInformer","disableThumbnailGenerator","thumbnailWidth","thumbnailType","lazy","darkModeMediaQuery","matchMedia","isDarkModeOnFromTheStart","addListener","uninstall","informer","removePlugin","statusBar","thumbnail","unmount","removeListener","defaultLocale","strings","importFrom","addingMoreFiles","addMoreFiles","dashboardWindowTitle","dashboardTitle","copyLinkToClipboardSuccess","copyLinkToClipboardFallback","copyLink","addMore","removeFile","editFile","editFileWithFilename","editing","finishEditingFile","saveChanges","myDevice","dropPasteFiles","dropPasteFolders","dropPasteBoth","dropPasteImportFiles","dropPasteImportFolders","dropPasteImportBoth","importFiles","dropHint","browseFiles","browseFolders","uploadComplete","uploadPaused","resumeUpload","pauseUpload","retryUpload","cancelUpload","xFilesSelected","uploadingXFiles","processingXFiles","recoveredXFiles","recoveredAllFiles","sessionRestored","reSelect","poweredBy","defaultOptions","reset","i18nInit","onMount","element","dir","VERSION"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _class, _openFileEditorWhenFilesAdded, _attachRenderFunctionToTarget, _isTargetSupported, _getAcquirers, _getProgressIndicators, _getEditors, _temp;\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\n\nconst {\n  h\n} = require('preact');\n\nconst {\n  UIPlugin\n} = require('@uppy/core');\n\nconst StatusBar = require('@uppy/status-bar');\n\nconst Informer = require('@uppy/informer');\n\nconst ThumbnailGenerator = require('@uppy/thumbnail-generator');\n\nconst findAllDOMElements = require('@uppy/utils/lib/findAllDOMElements');\n\nconst toArray = require('@uppy/utils/lib/toArray');\n\nconst getDroppedFiles = require('@uppy/utils/lib/getDroppedFiles');\n\nconst getTextDirection = require('@uppy/utils/lib/getTextDirection');\n\nconst {\n  nanoid\n} = require('nanoid');\n\nconst trapFocus = require('./utils/trapFocus');\n\nconst createSuperFocus = require('./utils/createSuperFocus');\n\nconst memoize = require('memoize-one').default || require('memoize-one');\n\nconst FOCUSABLE_ELEMENTS = require('@uppy/utils/lib/FOCUSABLE_ELEMENTS');\n\nconst DashboardUI = require('./components/Dashboard');\n\nconst TAB_KEY = 9;\nconst ESC_KEY = 27;\n\nfunction createPromise() {\n  const o = {};\n  o.promise = new Promise((resolve, reject) => {\n    o.resolve = resolve;\n    o.reject = reject;\n  });\n  return o;\n}\n\nfunction defaultPickerIcon() {\n  return h(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    width: \"30\",\n    height: \"30\",\n    viewBox: \"0 0 30 30\"\n  }, h(\"path\", {\n    d: \"M15 30c8.284 0 15-6.716 15-15 0-8.284-6.716-15-15-15C6.716 0 0 6.716 0 15c0 8.284 6.716 15 15 15zm4.258-12.676v6.846h-8.426v-6.846H5.204l9.82-12.364 9.82 12.364H19.26z\"\n  }));\n}\n/**\n * Dashboard UI with previews, metadata editing, tabs for various services and more\n */\n\n\nmodule.exports = (_temp = (_openFileEditorWhenFilesAdded = /*#__PURE__*/_classPrivateFieldLooseKey(\"openFileEditorWhenFilesAdded\"), _attachRenderFunctionToTarget = /*#__PURE__*/_classPrivateFieldLooseKey(\"attachRenderFunctionToTarget\"), _isTargetSupported = /*#__PURE__*/_classPrivateFieldLooseKey(\"isTargetSupported\"), _getAcquirers = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAcquirers\"), _getProgressIndicators = /*#__PURE__*/_classPrivateFieldLooseKey(\"getProgressIndicators\"), _getEditors = /*#__PURE__*/_classPrivateFieldLooseKey(\"getEditors\"), _class = class Dashboard extends UIPlugin {\n  constructor(uppy, _opts) {\n    super(uppy, _opts);\n\n    this.removeTarget = plugin => {\n      const pluginState = this.getPluginState(); // filter out the one we want to remove\n\n      const newTargets = pluginState.targets.filter(target => target.id !== plugin.id);\n      this.setPluginState({\n        targets: newTargets\n      });\n    };\n\n    this.addTarget = plugin => {\n      const callerPluginId = plugin.id || plugin.constructor.name;\n      const callerPluginName = plugin.title || callerPluginId;\n      const callerPluginType = plugin.type;\n\n      if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'editor') {\n        const msg = 'Dashboard: can only be targeted by plugins of types: acquirer, progressindicator, editor';\n        this.uppy.log(msg, 'error');\n        return;\n      }\n\n      const target = {\n        id: callerPluginId,\n        name: callerPluginName,\n        type: callerPluginType\n      };\n      const state = this.getPluginState();\n      const newTargets = state.targets.slice();\n      newTargets.push(target);\n      this.setPluginState({\n        targets: newTargets\n      });\n      return this.el;\n    };\n\n    this.hideAllPanels = () => {\n      const state = this.getPluginState();\n      const update = {\n        activePickerPanel: false,\n        showAddFilesPanel: false,\n        activeOverlayType: null,\n        fileCardFor: null,\n        showFileEditor: false\n      };\n\n      if (state.activePickerPanel === update.activePickerPanel && state.showAddFilesPanel === update.showAddFilesPanel && state.showFileEditor === update.showFileEditor && state.activeOverlayType === update.activeOverlayType) {\n        // avoid doing a state update if nothing changed\n        return;\n      }\n\n      this.setPluginState(update);\n    };\n\n    this.showPanel = id => {\n      const {\n        targets\n      } = this.getPluginState();\n      const activePickerPanel = targets.filter(target => {\n        return target.type === 'acquirer' && target.id === id;\n      })[0];\n      this.setPluginState({\n        activePickerPanel,\n        activeOverlayType: 'PickerPanel'\n      });\n    };\n\n    this.canEditFile = file => {\n      const {\n        targets\n      } = this.getPluginState();\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n\n      return editors.some(target => this.uppy.getPlugin(target.id).canEditFile(file));\n    };\n\n    this.openFileEditor = file => {\n      const {\n        targets\n      } = this.getPluginState();\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n\n      this.setPluginState({\n        showFileEditor: true,\n        fileCardFor: file.id || null,\n        activeOverlayType: 'FileEditor'\n      });\n      editors.forEach(editor => {\n        this.uppy.getPlugin(editor.id).selectFile(file);\n      });\n    };\n\n    this.saveFileEditor = () => {\n      const {\n        targets\n      } = this.getPluginState();\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n\n      editors.forEach(editor => {\n        this.uppy.getPlugin(editor.id).save();\n      });\n      this.hideAllPanels();\n    };\n\n    this.openModal = () => {\n      const {\n        promise,\n        resolve\n      } = createPromise(); // save scroll position\n\n      this.savedScrollPosition = window.pageYOffset; // save active element, so we can restore focus when modal is closed\n\n      this.savedActiveElement = document.activeElement;\n\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.add('uppy-Dashboard-isFixed');\n      }\n\n      if (this.opts.animateOpenClose && this.getPluginState().isClosing) {\n        const handler = () => {\n          this.setPluginState({\n            isHidden: false\n          });\n          this.el.removeEventListener('animationend', handler, false);\n          resolve();\n        };\n\n        this.el.addEventListener('animationend', handler, false);\n      } else {\n        this.setPluginState({\n          isHidden: false\n        });\n        resolve();\n      }\n\n      if (this.opts.browserBackButtonClose) {\n        this.updateBrowserHistory();\n      } // handle ESC and TAB keys in modal dialog\n\n\n      document.addEventListener('keydown', this.handleKeyDownInModal);\n      this.uppy.emit('dashboard:modal-open');\n      return promise;\n    };\n\n    this.closeModal = (opts = {}) => {\n      const {\n        // Whether the modal is being closed by the user (`true`) or by other means (e.g. browser back button)\n        manualClose = true\n      } = opts;\n      const {\n        isHidden,\n        isClosing\n      } = this.getPluginState();\n\n      if (isHidden || isClosing) {\n        // short-circuit if animation is ongoing\n        return;\n      }\n\n      const {\n        promise,\n        resolve\n      } = createPromise();\n\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.remove('uppy-Dashboard-isFixed');\n      }\n\n      if (this.opts.animateOpenClose) {\n        this.setPluginState({\n          isClosing: true\n        });\n\n        const handler = () => {\n          this.setPluginState({\n            isHidden: true,\n            isClosing: false\n          });\n          this.superFocus.cancel();\n          this.savedActiveElement.focus();\n          this.el.removeEventListener('animationend', handler, false);\n          resolve();\n        };\n\n        this.el.addEventListener('animationend', handler, false);\n      } else {\n        this.setPluginState({\n          isHidden: true\n        });\n        this.superFocus.cancel();\n        this.savedActiveElement.focus();\n        resolve();\n      } // handle ESC and TAB keys in modal dialog\n\n\n      document.removeEventListener('keydown', this.handleKeyDownInModal);\n\n      if (manualClose) {\n        if (this.opts.browserBackButtonClose) {\n          var _history$state;\n\n          // Make sure that the latest entry in the history state is our modal name\n          // eslint-disable-next-line no-restricted-globals\n          if ((_history$state = history.state) != null && _history$state[this.modalName]) {\n            // Go back in history to clear out the entry we created (ultimately closing the modal)\n            // eslint-disable-next-line no-restricted-globals\n            history.back();\n          }\n        }\n      }\n\n      this.uppy.emit('dashboard:modal-closed');\n      return promise;\n    };\n\n    this.isModalOpen = () => {\n      return !this.getPluginState().isHidden || false;\n    };\n\n    this.requestCloseModal = () => {\n      if (this.opts.onRequestCloseModal) {\n        return this.opts.onRequestCloseModal();\n      }\n\n      return this.closeModal();\n    };\n\n    this.setDarkModeCapability = isDarkModeOn => {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: { ...capabilities,\n          darkMode: isDarkModeOn\n        }\n      });\n    };\n\n    this.handleSystemDarkModeChange = event => {\n      const isDarkModeOnNow = event.matches;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnNow ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnNow);\n    };\n\n    this.toggleFileCard = (show, fileID) => {\n      const file = this.uppy.getFile(fileID);\n\n      if (show) {\n        this.uppy.emit('dashboard:file-edit-start', file);\n      } else {\n        this.uppy.emit('dashboard:file-edit-complete', file);\n      }\n\n      this.setPluginState({\n        fileCardFor: show ? fileID : null,\n        activeOverlayType: show ? 'FileCard' : null\n      });\n    };\n\n    this.toggleAddFilesPanel = show => {\n      this.setPluginState({\n        showAddFilesPanel: show,\n        activeOverlayType: show ? 'AddFiles' : null\n      });\n    };\n\n    this.addFiles = files => {\n      const descriptors = files.map(file => ({\n        source: this.id,\n        name: file.name,\n        type: file.type,\n        data: file,\n        meta: {\n          // path of the file relative to the ancestor directory the user selected.\n          // e.g. 'docs/Old Prague/airbnb.pdf'\n          relativePath: file.relativePath || null\n        }\n      }));\n\n      try {\n        this.uppy.addFiles(descriptors);\n      } catch (err) {\n        this.uppy.log(err);\n      }\n    };\n\n    this.startListeningToResize = () => {\n      // Watch for Dashboard container (`.uppy-Dashboard-inner`) resize\n      // and update containerWidth/containerHeight in plugin state accordingly.\n      // Emits first event on initialization.\n      this.resizeObserver = new ResizeObserver(entries => {\n        const uppyDashboardInnerEl = entries[0];\n        const {\n          width,\n          height\n        } = uppyDashboardInnerEl.contentRect;\n        this.uppy.log(`[Dashboard] resized: ${width} / ${height}`, 'debug');\n        this.setPluginState({\n          containerWidth: width,\n          containerHeight: height,\n          areInsidesReadyToBeVisible: true\n        });\n      });\n      this.resizeObserver.observe(this.el.querySelector('.uppy-Dashboard-inner')); // If ResizeObserver fails to emit an event telling us what size to use - default to the mobile view\n\n      this.makeDashboardInsidesVisibleAnywayTimeout = setTimeout(() => {\n        const pluginState = this.getPluginState();\n        const isModalAndClosed = !this.opts.inline && pluginState.isHidden;\n\n        if ( // if ResizeObserver hasn't yet fired,\n        !pluginState.areInsidesReadyToBeVisible // and it's not due to the modal being closed\n        && !isModalAndClosed) {\n          this.uppy.log(\"[Dashboard] resize event didn't fire on time: defaulted to mobile layout\", 'debug');\n          this.setPluginState({\n            areInsidesReadyToBeVisible: true\n          });\n        }\n      }, 1000);\n    };\n\n    this.stopListeningToResize = () => {\n      this.resizeObserver.disconnect();\n      clearTimeout(this.makeDashboardInsidesVisibleAnywayTimeout);\n    };\n\n    this.recordIfFocusedOnUppyRecently = event => {\n      if (this.el.contains(event.target)) {\n        this.ifFocusedOnUppyRecently = true;\n      } else {\n        this.ifFocusedOnUppyRecently = false; // ___Why run this.superFocus.cancel here when it already runs in superFocusOnEachUpdate?\n        //    Because superFocus is debounced, when we move from Uppy to some other element on the page,\n        //    previously run superFocus sometimes hits and moves focus back to Uppy.\n\n        this.superFocus.cancel();\n      }\n    };\n\n    this.disableAllFocusableElements = disable => {\n      const focusableNodes = toArray(this.el.querySelectorAll(FOCUSABLE_ELEMENTS));\n\n      if (disable) {\n        focusableNodes.forEach(node => {\n          // save previous tabindex in a data-attribute, to restore when enabling\n          const currentTabIndex = node.getAttribute('tabindex');\n\n          if (currentTabIndex) {\n            node.dataset.inertTabindex = currentTabIndex;\n          }\n\n          node.setAttribute('tabindex', '-1');\n        });\n      } else {\n        focusableNodes.forEach(node => {\n          if ('inertTabindex' in node.dataset) {\n            node.setAttribute('tabindex', node.dataset.inertTabindex);\n          } else {\n            node.removeAttribute('tabindex');\n          }\n        });\n      }\n\n      this.dashboardIsDisabled = disable;\n    };\n\n    this.updateBrowserHistory = () => {\n      var _history$state2;\n\n      // Ensure history state does not already contain our modal name to avoid double-pushing\n      // eslint-disable-next-line no-restricted-globals\n      if (!((_history$state2 = history.state) != null && _history$state2[this.modalName])) {\n        // Push to history so that the page is not lost on browser back button press\n        // eslint-disable-next-line no-restricted-globals\n        history.pushState({ // eslint-disable-next-line no-restricted-globals\n          ...history.state,\n          [this.modalName]: true\n        }, '');\n      } // Listen for back button presses\n\n\n      window.addEventListener('popstate', this.handlePopState, false);\n    };\n\n    this.handlePopState = event => {\n      var _event$state;\n\n      // Close the modal if the history state no longer contains our modal name\n      if (this.isModalOpen() && (!event.state || !event.state[this.modalName])) {\n        this.closeModal({\n          manualClose: false\n        });\n      } // When the browser back button is pressed and uppy is now the latest entry\n      // in the history but the modal is closed, fix the history by removing the\n      // uppy history entry.\n      // This occurs when another entry is added into the history state while the\n      // modal is open, and then the modal gets manually closed.\n      // Solves PR #575 (https://github.com/transloadit/uppy/pull/575)\n\n\n      if (!this.isModalOpen() && (_event$state = event.state) != null && _event$state[this.modalName]) {\n        // eslint-disable-next-line no-restricted-globals\n        history.back();\n      }\n    };\n\n    this.handleKeyDownInModal = event => {\n      // close modal on esc key press\n      if (event.keyCode === ESC_KEY) this.requestCloseModal(event); // trap focus on tab key press\n\n      if (event.keyCode === TAB_KEY) trapFocus.forModal(event, this.getPluginState().activeOverlayType, this.el);\n    };\n\n    this.handleClickOutside = () => {\n      if (this.opts.closeModalOnClickOutside) this.requestCloseModal();\n    };\n\n    this.handlePaste = event => {\n      // 1. Let any acquirer plugin (Url/Webcam/etc.) handle pastes to the root\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootPaste(event)\n          plugin.handleRootPaste == null ? void 0 : plugin.handleRootPaste(event);\n        }\n      }); // 2. Add all dropped files\n\n      const files = toArray(event.clipboardData.files);\n      this.addFiles(files);\n    };\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const files = toArray(event.target.files);\n      this.addFiles(files);\n    };\n\n    this.handleDragOver = event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (this.opts.disabled || this.opts.disableLocalFiles || !this.uppy.getState().allowNewUpload) {\n        return;\n      } // 1. Add a small (+) icon on drop\n      // (and prevent browsers from interpreting this as files being _moved_ into the\n      // browser, https://github.com/transloadit/uppy/issues/1978).\n\n\n      event.dataTransfer.dropEffect = 'copy';\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: true\n      });\n    };\n\n    this.handleDragLeave = event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (this.opts.disabled || this.opts.disableLocalFiles || !this.uppy.getState().allowNewUpload) {\n        return;\n      }\n\n      clearTimeout(this.removeDragOverClassTimeout); // Timeout against flickering, this solution is taken from drag-drop library.\n      // Solution with 'pointer-events: none' didn't work across browsers.\n\n      this.removeDragOverClassTimeout = setTimeout(() => {\n        this.setPluginState({\n          isDraggingOver: false\n        });\n      }, 50);\n    };\n\n    this.handleDrop = event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (this.opts.disabled || this.opts.disableLocalFiles || !this.uppy.getState().allowNewUpload) {\n        return;\n      }\n\n      clearTimeout(this.removeDragOverClassTimeout); // 2. Remove dragover class\n\n      this.setPluginState({\n        isDraggingOver: false\n      }); // 3. Let any acquirer plugin (Url/Webcam/etc.) handle drops to the root\n\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootDrop(event)\n          plugin.handleRootDrop == null ? void 0 : plugin.handleRootDrop(event);\n        }\n      }); // 4. Add all dropped files\n\n      let executedDropErrorOnce = false;\n\n      const logDropError = error => {\n        this.uppy.log(error, 'error'); // In practice all drop errors are most likely the same, so let's just show one to avoid overwhelming the user\n\n        if (!executedDropErrorOnce) {\n          this.uppy.info(error.message, 'error');\n          executedDropErrorOnce = true;\n        }\n      };\n\n      getDroppedFiles(event.dataTransfer, {\n        logDropError\n      }).then(files => {\n        if (files.length > 0) {\n          this.uppy.log('[Dashboard] Files were dropped');\n          this.addFiles(files);\n        }\n      });\n    };\n\n    this.handleRequestThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:request', file);\n      }\n    };\n\n    this.handleCancelThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:cancel', file);\n      }\n    };\n\n    this.handleKeyDownInInline = event => {\n      // Trap focus on tab key press.\n      if (event.keyCode === TAB_KEY) trapFocus.forInline(event, this.getPluginState().activeOverlayType, this.el);\n    };\n\n    this.handlePasteOnBody = event => {\n      const isFocusInOverlay = this.el.contains(document.activeElement);\n\n      if (isFocusInOverlay) {\n        this.handlePaste(event);\n      }\n    };\n\n    this.handleComplete = ({\n      failed\n    }) => {\n      if (this.opts.closeAfterFinish && failed.length === 0) {\n        // All uploads are done\n        this.requestCloseModal();\n      }\n    };\n\n    this.handleCancelRestore = () => {\n      this.uppy.emit('restore-canceled');\n    };\n\n    Object.defineProperty(this, _openFileEditorWhenFilesAdded, {\n      writable: true,\n      value: files => {\n        const firstFile = files[0];\n\n        if (this.canEditFile(firstFile)) {\n          this.openFileEditor(firstFile);\n        }\n      }\n    });\n\n    this.initEvents = () => {\n      // Modal open button\n      if (this.opts.trigger && !this.opts.inline) {\n        const showModalTrigger = findAllDOMElements(this.opts.trigger);\n\n        if (showModalTrigger) {\n          showModalTrigger.forEach(trigger => trigger.addEventListener('click', this.openModal));\n        } else {\n          this.uppy.log('Dashboard modal trigger not found. Make sure `trigger` is set in Dashboard options, unless you are planning to call `dashboard.openModal()` method yourself', 'warning');\n        }\n      }\n\n      this.startListeningToResize();\n      document.addEventListener('paste', this.handlePasteOnBody);\n      this.uppy.on('plugin-remove', this.removeTarget);\n      this.uppy.on('file-added', this.hideAllPanels);\n      this.uppy.on('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.on('file-editor:complete', this.hideAllPanels);\n      this.uppy.on('complete', this.handleComplete); // ___Why fire on capture?\n      //    Because this.ifFocusedOnUppyRecently needs to change before onUpdate() fires.\n\n      document.addEventListener('focus', this.recordIfFocusedOnUppyRecently, true);\n      document.addEventListener('click', this.recordIfFocusedOnUppyRecently, true);\n\n      if (this.opts.inline) {\n        this.el.addEventListener('keydown', this.handleKeyDownInInline);\n      }\n\n      if (this.opts.autoOpenFileEditor) {\n        this.uppy.on('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n\n    this.removeEvents = () => {\n      const showModalTrigger = findAllDOMElements(this.opts.trigger);\n\n      if (!this.opts.inline && showModalTrigger) {\n        showModalTrigger.forEach(trigger => trigger.removeEventListener('click', this.openModal));\n      }\n\n      this.stopListeningToResize();\n      document.removeEventListener('paste', this.handlePasteOnBody);\n      window.removeEventListener('popstate', this.handlePopState, false);\n      this.uppy.off('plugin-remove', this.removeTarget);\n      this.uppy.off('file-added', this.hideAllPanels);\n      this.uppy.off('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.off('file-editor:complete', this.hideAllPanels);\n      this.uppy.off('complete', this.handleComplete);\n      document.removeEventListener('focus', this.recordIfFocusedOnUppyRecently);\n      document.removeEventListener('click', this.recordIfFocusedOnUppyRecently);\n\n      if (this.opts.inline) {\n        this.el.removeEventListener('keydown', this.handleKeyDownInInline);\n      }\n\n      if (this.opts.autoOpenFileEditor) {\n        this.uppy.off('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n\n    this.superFocusOnEachUpdate = () => {\n      const isFocusInUppy = this.el.contains(document.activeElement); // When focus is lost on the page (== focus is on body for most browsers, or focus is null for IE11)\n\n      const isFocusNowhere = document.activeElement === document.body || document.activeElement === null;\n      const isInformerHidden = this.uppy.getState().info.isHidden;\n      const isModal = !this.opts.inline;\n\n      if ( // If update is connected to showing the Informer - let the screen reader calmly read it.\n      isInformerHidden && ( // If we are in a modal - always superfocus without concern for other elements\n      // on the page (user is unlikely to want to interact with the rest of the page)\n      isModal // If we are already inside of Uppy, or\n      || isFocusInUppy // If we are not focused on anything BUT we have already, at least once, focused on uppy\n      //   1. We focus when isFocusNowhere, because when the element we were focused\n      //      on disappears (e.g. an overlay), - focus gets lost. If user is typing\n      //      something somewhere else on the page, - focus won't be 'nowhere'.\n      //   2. We only focus when focus is nowhere AND this.ifFocusedOnUppyRecently,\n      //      to avoid focus jumps if we do something else on the page.\n      //   [Practical check] Without '&& this.ifFocusedOnUppyRecently', in Safari, in inline mode,\n      //                     when file is uploading, - navigate via tab to the checkbox,\n      //                     try to press space multiple times. Focus will jump to Uppy.\n      || isFocusNowhere && this.ifFocusedOnUppyRecently)) {\n        this.superFocus(this.el, this.getPluginState().activeOverlayType);\n      } else {\n        this.superFocus.cancel();\n      }\n    };\n\n    this.afterUpdate = () => {\n      if (this.opts.disabled && !this.dashboardIsDisabled) {\n        this.disableAllFocusableElements(true);\n        return;\n      }\n\n      if (!this.opts.disabled && this.dashboardIsDisabled) {\n        this.disableAllFocusableElements(false);\n      }\n\n      this.superFocusOnEachUpdate();\n    };\n\n    this.saveFileCard = (meta, fileID) => {\n      this.uppy.setFileMeta(fileID, meta);\n      this.toggleFileCard(false, fileID);\n    };\n\n    Object.defineProperty(this, _attachRenderFunctionToTarget, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id);\n        return { ...target,\n          icon: plugin.icon || this.opts.defaultPickerIcon,\n          render: plugin.render\n        };\n      }\n    });\n    Object.defineProperty(this, _isTargetSupported, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id); // If the plugin does not provide a `supported` check, assume the plugin works everywhere.\n\n        if (typeof plugin.isSupported !== 'function') {\n          return true;\n        }\n\n        return plugin.isSupported();\n      }\n    });\n    Object.defineProperty(this, _getAcquirers, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'acquirer' && _classPrivateFieldLooseBase(this, _isTargetSupported)[_isTargetSupported](target)).map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getProgressIndicators, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'progressindicator').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getEditors, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'editor').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n\n    this.render = state => {\n      const pluginState = this.getPluginState();\n      const {\n        files,\n        capabilities,\n        allowNewUpload\n      } = state;\n      const {\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused\n      } = this.uppy.getObjectOfFilesPerState();\n\n      const acquirers = _classPrivateFieldLooseBase(this, _getAcquirers)[_getAcquirers](pluginState.targets);\n\n      const progressindicators = _classPrivateFieldLooseBase(this, _getProgressIndicators)[_getProgressIndicators](pluginState.targets);\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](pluginState.targets);\n\n      let theme;\n\n      if (this.opts.theme === 'auto') {\n        theme = capabilities.darkMode ? 'dark' : 'light';\n      } else {\n        theme = this.opts.theme;\n      }\n\n      if (['files', 'folders', 'both'].indexOf(this.opts.fileManagerSelectionType) < 0) {\n        this.opts.fileManagerSelectionType = 'files'; // eslint-disable-next-line no-console\n\n        console.warn(`Unsupported option for \"fileManagerSelectionType\". Using default of \"${this.opts.fileManagerSelectionType}\".`);\n      }\n\n      return DashboardUI({\n        state,\n        isHidden: pluginState.isHidden,\n        files,\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused,\n        totalFileCount: Object.keys(files).length,\n        totalProgress: state.totalProgress,\n        allowNewUpload,\n        acquirers,\n        theme,\n        disabled: this.opts.disabled,\n        disableLocalFiles: this.opts.disableLocalFiles,\n        direction: this.opts.direction,\n        activePickerPanel: pluginState.activePickerPanel,\n        showFileEditor: pluginState.showFileEditor,\n        saveFileEditor: this.saveFileEditor,\n        disableAllFocusableElements: this.disableAllFocusableElements,\n        animateOpenClose: this.opts.animateOpenClose,\n        isClosing: pluginState.isClosing,\n        progressindicators,\n        editors,\n        autoProceed: this.uppy.opts.autoProceed,\n        id: this.id,\n        closeModal: this.requestCloseModal,\n        handleClickOutside: this.handleClickOutside,\n        handleInputChange: this.handleInputChange,\n        handlePaste: this.handlePaste,\n        inline: this.opts.inline,\n        showPanel: this.showPanel,\n        hideAllPanels: this.hideAllPanels,\n        i18n: this.i18n,\n        i18nArray: this.i18nArray,\n        uppy: this.uppy,\n        note: this.opts.note,\n        recoveredState: state.recoveredState,\n        metaFields: pluginState.metaFields,\n        resumableUploads: capabilities.resumableUploads || false,\n        individualCancellation: capabilities.individualCancellation,\n        isMobileDevice: capabilities.isMobileDevice,\n        fileCardFor: pluginState.fileCardFor,\n        toggleFileCard: this.toggleFileCard,\n        toggleAddFilesPanel: this.toggleAddFilesPanel,\n        showAddFilesPanel: pluginState.showAddFilesPanel,\n        saveFileCard: this.saveFileCard,\n        openFileEditor: this.openFileEditor,\n        canEditFile: this.canEditFile,\n        width: this.opts.width,\n        height: this.opts.height,\n        showLinkToFileUploadResult: this.opts.showLinkToFileUploadResult,\n        fileManagerSelectionType: this.opts.fileManagerSelectionType,\n        proudlyDisplayPoweredByUppy: this.opts.proudlyDisplayPoweredByUppy,\n        hideCancelButton: this.opts.hideCancelButton,\n        hideRetryButton: this.opts.hideRetryButton,\n        hidePauseResumeButton: this.opts.hidePauseResumeButton,\n        showRemoveButtonAfterComplete: this.opts.showRemoveButtonAfterComplete,\n        containerWidth: pluginState.containerWidth,\n        containerHeight: pluginState.containerHeight,\n        areInsidesReadyToBeVisible: pluginState.areInsidesReadyToBeVisible,\n        isTargetDOMEl: this.isTargetDOMEl,\n        parentElement: this.el,\n        allowedFileTypes: this.uppy.opts.restrictions.allowedFileTypes,\n        maxNumberOfFiles: this.uppy.opts.restrictions.maxNumberOfFiles,\n        requiredMetaFields: this.uppy.opts.restrictions.requiredMetaFields,\n        showSelectedFiles: this.opts.showSelectedFiles,\n        handleCancelRestore: this.handleCancelRestore,\n        handleRequestThumbnail: this.handleRequestThumbnail,\n        handleCancelThumbnail: this.handleCancelThumbnail,\n        // drag props\n        isDraggingOver: pluginState.isDraggingOver,\n        handleDragOver: this.handleDragOver,\n        handleDragLeave: this.handleDragLeave,\n        handleDrop: this.handleDrop\n      });\n    };\n\n    this.discoverProviderPlugins = () => {\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin && !plugin.target && plugin.opts && plugin.opts.target === this.constructor) {\n          this.addTarget(plugin);\n        }\n      });\n    };\n\n    this.install = () => {\n      // Set default state for Dashboard\n      this.setPluginState({\n        isHidden: true,\n        fileCardFor: null,\n        activeOverlayType: null,\n        showAddFilesPanel: false,\n        activePickerPanel: false,\n        showFileEditor: false,\n        metaFields: this.opts.metaFields,\n        targets: [],\n        // We'll make them visible once .containerWidth is determined\n        areInsidesReadyToBeVisible: false,\n        isDraggingOver: false\n      });\n      const {\n        inline,\n        closeAfterFinish\n      } = this.opts;\n\n      if (inline && closeAfterFinish) {\n        throw new Error('[Dashboard] `closeAfterFinish: true` cannot be used on an inline Dashboard, because an inline Dashboard cannot be closed at all. Either set `inline: false`, or disable the `closeAfterFinish` option.');\n      }\n\n      const {\n        allowMultipleUploads,\n        allowMultipleUploadBatches\n      } = this.uppy.opts;\n\n      if ((allowMultipleUploads || allowMultipleUploadBatches) && closeAfterFinish) {\n        this.uppy.log('[Dashboard] When using `closeAfterFinish`, we recommended setting the `allowMultipleUploadBatches` option to `false` in the Uppy constructor. See https://uppy.io/docs/uppy/#allowMultipleUploads-true', 'warning');\n      }\n\n      const {\n        target\n      } = this.opts;\n\n      if (target) {\n        this.mount(target, this);\n      }\n\n      const plugins = this.opts.plugins || [];\n      plugins.forEach(pluginID => {\n        const plugin = this.uppy.getPlugin(pluginID);\n\n        if (plugin) {\n          plugin.mount(this, plugin);\n        }\n      });\n\n      if (!this.opts.disableStatusBar) {\n        this.uppy.use(StatusBar, {\n          id: `${this.id}:StatusBar`,\n          target: this,\n          hideUploadButton: this.opts.hideUploadButton,\n          hideRetryButton: this.opts.hideRetryButton,\n          hidePauseResumeButton: this.opts.hidePauseResumeButton,\n          hideCancelButton: this.opts.hideCancelButton,\n          showProgressDetails: this.opts.showProgressDetails,\n          hideAfterFinish: this.opts.hideProgressAfterFinish,\n          locale: this.opts.locale,\n          doneButtonHandler: this.opts.doneButtonHandler\n        });\n      }\n\n      if (!this.opts.disableInformer) {\n        this.uppy.use(Informer, {\n          id: `${this.id}:Informer`,\n          target: this\n        });\n      }\n\n      if (!this.opts.disableThumbnailGenerator) {\n        this.uppy.use(ThumbnailGenerator, {\n          id: `${this.id}:ThumbnailGenerator`,\n          thumbnailWidth: this.opts.thumbnailWidth,\n          thumbnailType: this.opts.thumbnailType,\n          waitForThumbnailsBeforeUpload: this.opts.waitForThumbnailsBeforeUpload,\n          // If we don't block on thumbnails, we can lazily generate them\n          lazy: !this.opts.waitForThumbnailsBeforeUpload\n        });\n      } // Dark Mode / theme\n\n\n      this.darkModeMediaQuery = typeof window !== 'undefined' && window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null;\n      const isDarkModeOnFromTheStart = this.darkModeMediaQuery ? this.darkModeMediaQuery.matches : false;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnFromTheStart ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnFromTheStart);\n\n      if (this.opts.theme === 'auto') {\n        this.darkModeMediaQuery.addListener(this.handleSystemDarkModeChange);\n      }\n\n      this.discoverProviderPlugins();\n      this.initEvents();\n    };\n\n    this.uninstall = () => {\n      if (!this.opts.disableInformer) {\n        const informer = this.uppy.getPlugin(`${this.id}:Informer`); // Checking if this plugin exists, in case it was removed by uppy-core\n        // before the Dashboard was.\n\n        if (informer) this.uppy.removePlugin(informer);\n      }\n\n      if (!this.opts.disableStatusBar) {\n        const statusBar = this.uppy.getPlugin(`${this.id}:StatusBar`);\n        if (statusBar) this.uppy.removePlugin(statusBar);\n      }\n\n      if (!this.opts.disableThumbnailGenerator) {\n        const thumbnail = this.uppy.getPlugin(`${this.id}:ThumbnailGenerator`);\n        if (thumbnail) this.uppy.removePlugin(thumbnail);\n      }\n\n      const plugins = this.opts.plugins || [];\n      plugins.forEach(pluginID => {\n        const plugin = this.uppy.getPlugin(pluginID);\n        if (plugin) plugin.unmount();\n      });\n\n      if (this.opts.theme === 'auto') {\n        this.darkModeMediaQuery.removeListener(this.handleSystemDarkModeChange);\n      }\n\n      this.unmount();\n      this.removeEvents();\n    };\n\n    this.id = this.opts.id || 'Dashboard';\n    this.title = 'Dashboard';\n    this.type = 'orchestrator';\n    this.modalName = `uppy-Dashboard-${nanoid()}`;\n    this.defaultLocale = {\n      strings: {\n        closeModal: 'Close Modal',\n        importFrom: 'Import from %{name}',\n        addingMoreFiles: 'Adding more files',\n        addMoreFiles: 'Add more files',\n        dashboardWindowTitle: 'File Uploader Window (Press escape to close)',\n        dashboardTitle: 'File Uploader',\n        copyLinkToClipboardSuccess: 'Link copied to clipboard',\n        copyLinkToClipboardFallback: 'Copy the URL below',\n        copyLink: 'Copy link',\n        back: 'Back',\n        addMore: 'Add more',\n        removeFile: 'Remove file %{file}',\n        editFile: 'Edit file',\n        editFileWithFilename: 'Edit file %{file}',\n        editing: 'Editing %{file}',\n        finishEditingFile: 'Finish editing file',\n        save: 'Save',\n        saveChanges: 'Save changes',\n        cancel: 'Cancel',\n        myDevice: 'My Device',\n        dropPasteFiles: 'Drop files here or %{browseFiles}',\n        dropPasteFolders: 'Drop files here or %{browseFolders}',\n        dropPasteBoth: 'Drop files here, %{browseFiles} or %{browseFolders}',\n        dropPasteImportFiles: 'Drop files here, %{browseFiles} or import from:',\n        dropPasteImportFolders: 'Drop files here, %{browseFolders} or import from:',\n        dropPasteImportBoth: 'Drop files here, %{browseFiles}, %{browseFolders} or import from:',\n        importFiles: 'Import files from:',\n        dropHint: 'Drop your files here',\n        browseFiles: 'browse files',\n        browseFolders: 'browse folders',\n        uploadComplete: 'Upload complete',\n        uploadPaused: 'Upload paused',\n        resumeUpload: 'Resume upload',\n        pauseUpload: 'Pause upload',\n        retryUpload: 'Retry upload',\n        cancelUpload: 'Cancel upload',\n        xFilesSelected: {\n          0: '%{smart_count} file selected',\n          1: '%{smart_count} files selected'\n        },\n        uploadingXFiles: {\n          0: 'Uploading %{smart_count} file',\n          1: 'Uploading %{smart_count} files'\n        },\n        processingXFiles: {\n          0: 'Processing %{smart_count} file',\n          1: 'Processing %{smart_count} files'\n        },\n        recoveredXFiles: {\n          0: 'We could not fully recover 1 file. Please re-select it and resume the upload.',\n          1: 'We could not fully recover %{smart_count} files. Please re-select them and resume the upload.'\n        },\n        recoveredAllFiles: 'We restored all files. You can now resume the upload.',\n        sessionRestored: 'Session restored',\n        reSelect: 'Re-select',\n        poweredBy: 'Powered by %{uppy}'\n      }\n    }; // set default options\n\n    const defaultOptions = {\n      target: 'body',\n      metaFields: [],\n      trigger: null,\n      inline: false,\n      width: 750,\n      height: 550,\n      thumbnailWidth: 280,\n      thumbnailType: 'image/jpeg',\n      waitForThumbnailsBeforeUpload: false,\n      defaultPickerIcon,\n      showLinkToFileUploadResult: false,\n      showProgressDetails: false,\n      hideUploadButton: false,\n      hideCancelButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideProgressAfterFinish: false,\n      doneButtonHandler: () => {\n        this.uppy.reset();\n        this.requestCloseModal();\n      },\n      note: null,\n      closeModalOnClickOutside: false,\n      closeAfterFinish: false,\n      disableStatusBar: false,\n      disableInformer: false,\n      disableThumbnailGenerator: false,\n      disablePageScrollWhenModalOpen: true,\n      animateOpenClose: true,\n      fileManagerSelectionType: 'files',\n      proudlyDisplayPoweredByUppy: true,\n      onRequestCloseModal: () => this.closeModal(),\n      showSelectedFiles: true,\n      showRemoveButtonAfterComplete: false,\n      browserBackButtonClose: false,\n      theme: 'light',\n      autoOpenFileEditor: false,\n      disabled: false,\n      disableLocalFiles: false\n    }; // merge default options with the ones set by user\n\n    this.opts = { ...defaultOptions,\n      ..._opts\n    };\n    this.i18nInit();\n    this.superFocus = createSuperFocus();\n    this.ifFocusedOnUppyRecently = false; // Timeouts\n\n    this.makeDashboardInsidesVisibleAnywayTimeout = null;\n    this.removeDragOverClassTimeout = null;\n  }\n\n  onMount() {\n    // Set the text direction if the page has not defined one.\n    const element = this.el;\n    const direction = getTextDirection(element);\n\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  }\n\n}), _class.VERSION = \"2.1.1\", _temp);"]},"metadata":{},"sourceType":"script"}