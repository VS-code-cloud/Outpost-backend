{"ast":null,"code":"\"use strict\";\n\nconst React = require('react');\n\nconst DashboardPlugin = require('@uppy/dashboard');\n\nconst basePropTypes = require('./propTypes').dashboard;\n\nconst getHTMLProps = require('./getHTMLProps');\n\nconst nonHtmlPropsHaveChanged = require('./nonHtmlPropsHaveChanged');\n\nconst h = React.createElement;\n/**\n * React Component that renders a Dashboard for an Uppy instance. This component\n * renders the Dashboard inline, so you can put it anywhere you want.\n */\n\nclass Dashboard extends React.Component {\n  componentDidMount() {\n    this.installPlugin();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.uppy !== this.props.uppy) {\n      this.uninstallPlugin(prevProps);\n      this.installPlugin();\n    } else if (nonHtmlPropsHaveChanged(this, prevProps)) {\n      const options = { ...this.props,\n        target: this.container\n      };\n      delete options.uppy;\n      this.plugin.setOptions(options);\n    }\n  }\n\n  componentWillUnmount() {\n    this.uninstallPlugin();\n  }\n\n  installPlugin() {\n    const {\n      uppy\n    } = this.props;\n    const options = {\n      id: 'react:Dashboard',\n      ...this.props,\n      target: this.container\n    };\n    delete options.uppy;\n    uppy.use(DashboardPlugin, options);\n    this.plugin = uppy.getPlugin(options.id);\n  }\n\n  uninstallPlugin(props = this.props) {\n    const {\n      uppy\n    } = props;\n    uppy.removePlugin(this.plugin);\n  }\n\n  render() {\n    // TODO: stop exposing `validProps` as a public property and rename it to `htmlProps`\n    this.validProps = getHTMLProps(this.props);\n    return h('div', {\n      ref: container => {\n        this.container = container;\n      },\n      ...this.validProps\n    });\n  }\n\n}\n\nDashboard.propTypes = basePropTypes;\nDashboard.defaultProps = {\n  inline: true\n};\nmodule.exports = Dashboard;","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/react/lib/Dashboard.js"],"names":["React","require","DashboardPlugin","basePropTypes","dashboard","getHTMLProps","nonHtmlPropsHaveChanged","h","createElement","Dashboard","Component","componentDidMount","installPlugin","componentDidUpdate","prevProps","uppy","props","uninstallPlugin","options","target","container","plugin","setOptions","componentWillUnmount","id","use","getPlugin","removePlugin","render","validProps","ref","propTypes","defaultProps","inline","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,eAAe,GAAGD,OAAO,CAAC,iBAAD,CAA/B;;AAEA,MAAME,aAAa,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBG,SAA7C;;AAEA,MAAMC,YAAY,GAAGJ,OAAO,CAAC,gBAAD,CAA5B;;AAEA,MAAMK,uBAAuB,GAAGL,OAAO,CAAC,2BAAD,CAAvC;;AAEA,MAAMM,CAAC,GAAGP,KAAK,CAACQ,aAAhB;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAN,SAAwBT,KAAK,CAACU,SAA9B,CAAwC;AACtCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,aAAL;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAIA,SAAS,CAACC,IAAV,KAAmB,KAAKC,KAAL,CAAWD,IAAlC,EAAwC;AACtC,WAAKE,eAAL,CAAqBH,SAArB;AACA,WAAKF,aAAL;AACD,KAHD,MAGO,IAAIN,uBAAuB,CAAC,IAAD,EAAOQ,SAAP,CAA3B,EAA8C;AACnD,YAAMI,OAAO,GAAG,EAAE,GAAG,KAAKF,KAAV;AACdG,QAAAA,MAAM,EAAE,KAAKC;AADC,OAAhB;AAGA,aAAOF,OAAO,CAACH,IAAf;AACA,WAAKM,MAAL,CAAYC,UAAZ,CAAuBJ,OAAvB;AACD;AACF;;AAEDK,EAAAA,oBAAoB,GAAG;AACrB,SAAKN,eAAL;AACD;;AAEDL,EAAAA,aAAa,GAAG;AACd,UAAM;AACJG,MAAAA;AADI,QAEF,KAAKC,KAFT;AAGA,UAAME,OAAO,GAAG;AACdM,MAAAA,EAAE,EAAE,iBADU;AAEd,SAAG,KAAKR,KAFM;AAGdG,MAAAA,MAAM,EAAE,KAAKC;AAHC,KAAhB;AAKA,WAAOF,OAAO,CAACH,IAAf;AACAA,IAAAA,IAAI,CAACU,GAAL,CAASvB,eAAT,EAA0BgB,OAA1B;AACA,SAAKG,MAAL,GAAcN,IAAI,CAACW,SAAL,CAAeR,OAAO,CAACM,EAAvB,CAAd;AACD;;AAEDP,EAAAA,eAAe,CAACD,KAAK,GAAG,KAAKA,KAAd,EAAqB;AAClC,UAAM;AACJD,MAAAA;AADI,QAEFC,KAFJ;AAGAD,IAAAA,IAAI,CAACY,YAAL,CAAkB,KAAKN,MAAvB;AACD;;AAEDO,EAAAA,MAAM,GAAG;AACP;AACA,SAAKC,UAAL,GAAkBxB,YAAY,CAAC,KAAKW,KAAN,CAA9B;AACA,WAAOT,CAAC,CAAC,KAAD,EAAQ;AACduB,MAAAA,GAAG,EAAEV,SAAS,IAAI;AAChB,aAAKA,SAAL,GAAiBA,SAAjB;AACD,OAHa;AAId,SAAG,KAAKS;AAJM,KAAR,CAAR;AAMD;;AApDqC;;AAwDxCpB,SAAS,CAACsB,SAAV,GAAsB5B,aAAtB;AACAM,SAAS,CAACuB,YAAV,GAAyB;AACvBC,EAAAA,MAAM,EAAE;AADe,CAAzB;AAGAC,MAAM,CAACC,OAAP,GAAiB1B,SAAjB","sourcesContent":["\"use strict\";\n\nconst React = require('react');\n\nconst DashboardPlugin = require('@uppy/dashboard');\n\nconst basePropTypes = require('./propTypes').dashboard;\n\nconst getHTMLProps = require('./getHTMLProps');\n\nconst nonHtmlPropsHaveChanged = require('./nonHtmlPropsHaveChanged');\n\nconst h = React.createElement;\n/**\n * React Component that renders a Dashboard for an Uppy instance. This component\n * renders the Dashboard inline, so you can put it anywhere you want.\n */\n\nclass Dashboard extends React.Component {\n  componentDidMount() {\n    this.installPlugin();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.uppy !== this.props.uppy) {\n      this.uninstallPlugin(prevProps);\n      this.installPlugin();\n    } else if (nonHtmlPropsHaveChanged(this, prevProps)) {\n      const options = { ...this.props,\n        target: this.container\n      };\n      delete options.uppy;\n      this.plugin.setOptions(options);\n    }\n  }\n\n  componentWillUnmount() {\n    this.uninstallPlugin();\n  }\n\n  installPlugin() {\n    const {\n      uppy\n    } = this.props;\n    const options = {\n      id: 'react:Dashboard',\n      ...this.props,\n      target: this.container\n    };\n    delete options.uppy;\n    uppy.use(DashboardPlugin, options);\n    this.plugin = uppy.getPlugin(options.id);\n  }\n\n  uninstallPlugin(props = this.props) {\n    const {\n      uppy\n    } = props;\n    uppy.removePlugin(this.plugin);\n  }\n\n  render() {\n    // TODO: stop exposing `validProps` as a public property and rename it to `htmlProps`\n    this.validProps = getHTMLProps(this.props);\n    return h('div', {\n      ref: container => {\n        this.container = container;\n      },\n      ...this.validProps\n    });\n  }\n\n}\n\nDashboard.propTypes = basePropTypes;\nDashboard.defaultProps = {\n  inline: true\n};\nmodule.exports = Dashboard;"]},"metadata":{},"sourceType":"script"}