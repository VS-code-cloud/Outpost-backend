{"ast":null,"code":"\"use strict\";\n\nconst {\n  cloneElement,\n  Component,\n  toChildArray\n} = require('preact');\n\nconst classNames = require('classnames');\n\nconst transitionName = 'uppy-transition-slideDownUp';\nconst duration = 250;\n/**\n * Vertical slide transition.\n *\n * This can take a _single_ child component, which _must_ accept a `className` prop.\n *\n * Currently this is specific to the `uppy-transition-slideDownUp` transition,\n * but it should be simple to extend this for any type of single-element\n * transition by setting the CSS name and duration as props.\n */\n\nclass Slide extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cachedChildren: null,\n      className: ''\n    };\n  } // TODO: refactor to stable lifecycle method\n  // eslint-disable-next-line\n\n\n  componentWillUpdate(nextProps) {\n    const {\n      cachedChildren\n    } = this.state;\n    const child = toChildArray(nextProps.children)[0];\n    if (cachedChildren === child) return null;\n    const patch = {\n      cachedChildren: child\n    }; // Enter transition\n\n    if (child && !cachedChildren) {\n      patch.className = `${transitionName}-enter`;\n      cancelAnimationFrame(this.animationFrame);\n      clearTimeout(this.leaveTimeout);\n      this.leaveTimeout = undefined;\n      this.animationFrame = requestAnimationFrame(() => {\n        // Force it to render before we add the active class\n        // this.base.getBoundingClientRect()\n        this.setState({\n          className: `${transitionName}-enter ${transitionName}-enter-active`\n        });\n        this.enterTimeout = setTimeout(() => {\n          this.setState({\n            className: ''\n          });\n        }, duration);\n      });\n    } // Leave transition\n\n\n    if (cachedChildren && !child && this.leaveTimeout === undefined) {\n      patch.cachedChildren = cachedChildren;\n      patch.className = `${transitionName}-leave`;\n      cancelAnimationFrame(this.animationFrame);\n      clearTimeout(this.enterTimeout);\n      this.enterTimeout = undefined;\n      this.animationFrame = requestAnimationFrame(() => {\n        this.setState({\n          className: `${transitionName}-leave ${transitionName}-leave-active`\n        });\n        this.leaveTimeout = setTimeout(() => {\n          this.setState({\n            cachedChildren: null,\n            className: ''\n          });\n        }, duration);\n      });\n    } // eslint-disable-next-line\n\n\n    this.setState(patch);\n  }\n\n  render() {\n    const {\n      cachedChildren,\n      className\n    } = this.state;\n\n    if (!cachedChildren) {\n      return null;\n    }\n\n    return cloneElement(cachedChildren, {\n      className: classNames(className, cachedChildren.props.className)\n    });\n  }\n\n}\n\nmodule.exports = Slide;","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/dashboard/lib/components/Slide.js"],"names":["cloneElement","Component","toChildArray","require","classNames","transitionName","duration","Slide","constructor","props","state","cachedChildren","className","componentWillUpdate","nextProps","child","children","patch","cancelAnimationFrame","animationFrame","clearTimeout","leaveTimeout","undefined","requestAnimationFrame","setState","enterTimeout","setTimeout","render","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst {\n  cloneElement,\n  Component,\n  toChildArray\n} = require('preact');\n\nconst classNames = require('classnames');\n\nconst transitionName = 'uppy-transition-slideDownUp';\nconst duration = 250;\n/**\n * Vertical slide transition.\n *\n * This can take a _single_ child component, which _must_ accept a `className` prop.\n *\n * Currently this is specific to the `uppy-transition-slideDownUp` transition,\n * but it should be simple to extend this for any type of single-element\n * transition by setting the CSS name and duration as props.\n */\n\nclass Slide extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cachedChildren: null,\n      className: ''\n    };\n  } // TODO: refactor to stable lifecycle method\n  // eslint-disable-next-line\n\n\n  componentWillUpdate(nextProps) {\n    const {\n      cachedChildren\n    } = this.state;\n    const child = toChildArray(nextProps.children)[0];\n    if (cachedChildren === child) return null;\n    const patch = {\n      cachedChildren: child\n    }; // Enter transition\n\n    if (child && !cachedChildren) {\n      patch.className = `${transitionName}-enter`;\n      cancelAnimationFrame(this.animationFrame);\n      clearTimeout(this.leaveTimeout);\n      this.leaveTimeout = undefined;\n      this.animationFrame = requestAnimationFrame(() => {\n        // Force it to render before we add the active class\n        // this.base.getBoundingClientRect()\n        this.setState({\n          className: `${transitionName}-enter ${transitionName}-enter-active`\n        });\n        this.enterTimeout = setTimeout(() => {\n          this.setState({\n            className: ''\n          });\n        }, duration);\n      });\n    } // Leave transition\n\n\n    if (cachedChildren && !child && this.leaveTimeout === undefined) {\n      patch.cachedChildren = cachedChildren;\n      patch.className = `${transitionName}-leave`;\n      cancelAnimationFrame(this.animationFrame);\n      clearTimeout(this.enterTimeout);\n      this.enterTimeout = undefined;\n      this.animationFrame = requestAnimationFrame(() => {\n        this.setState({\n          className: `${transitionName}-leave ${transitionName}-leave-active`\n        });\n        this.leaveTimeout = setTimeout(() => {\n          this.setState({\n            cachedChildren: null,\n            className: ''\n          });\n        }, duration);\n      });\n    } // eslint-disable-next-line\n\n\n    this.setState(patch);\n  }\n\n  render() {\n    const {\n      cachedChildren,\n      className\n    } = this.state;\n\n    if (!cachedChildren) {\n      return null;\n    }\n\n    return cloneElement(cachedChildren, {\n      className: classNames(className, cachedChildren.props.className)\n    });\n  }\n\n}\n\nmodule.exports = Slide;"]},"metadata":{},"sourceType":"script"}