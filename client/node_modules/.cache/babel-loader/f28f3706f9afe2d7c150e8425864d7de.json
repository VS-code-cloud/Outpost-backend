{"ast":null,"code":"/* global AggregateError */\n'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _toConsumableArray = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _objectSpread = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _createClass = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/Users/albertshay/Desktop/silkroad/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _Symbol$for, _Symbol$for2;\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n\n  return receiver;\n}\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\n\nvar Translator = require('@uppy/utils/lib/Translator');\n\nvar ee = require('namespace-emitter');\n\nvar _require = require('nanoid'),\n    nanoid = _require.nanoid;\n\nvar throttle = require('lodash.throttle');\n\nvar prettierBytes = require('@transloadit/prettier-bytes');\n\nvar match = require('mime-match');\n\nvar DefaultStore = require('@uppy/store-default');\n\nvar getFileType = require('@uppy/utils/lib/getFileType');\n\nvar getFileNameAndExtension = require('@uppy/utils/lib/getFileNameAndExtension');\n\nvar generateFileID = require('@uppy/utils/lib/generateFileID');\n\nvar supportsUploadProgress = require('./supportsUploadProgress');\n\nvar getFileName = require('./getFileName');\n\nvar _require2 = require('./loggers'),\n    justErrorsLogger = _require2.justErrorsLogger,\n    debugLogger = _require2.debugLogger; // Exported from here.\n\n\nvar RestrictionError = /*#__PURE__*/function (_Error) {\n  _inherits(RestrictionError, _Error);\n\n  var _super = _createSuper(RestrictionError);\n\n  function RestrictionError() {\n    var _this;\n\n    _classCallCheck(this, RestrictionError);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isRestriction = true;\n    return _this;\n  }\n\n  return RestrictionError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nif (typeof AggregateError === 'undefined') {\n  // eslint-disable-next-line no-global-assign\n  globalThis.AggregateError = /*#__PURE__*/function (_Error2) {\n    _inherits(AggregateError, _Error2);\n\n    var _super2 = _createSuper(AggregateError);\n\n    function AggregateError(message, errors) {\n      var _this2;\n\n      _classCallCheck(this, AggregateError);\n\n      _this2 = _super2.call(this, message);\n      _this2.errors = errors;\n      return _this2;\n    }\n\n    return AggregateError;\n  }( /*#__PURE__*/_wrapNativeSuper(Error));\n}\n\nvar AggregateRestrictionError = /*#__PURE__*/function (_AggregateError) {\n  _inherits(AggregateRestrictionError, _AggregateError);\n\n  var _super3 = _createSuper(AggregateRestrictionError);\n\n  function AggregateRestrictionError() {\n    var _this3;\n\n    _classCallCheck(this, AggregateRestrictionError);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this3 = _super3.call.apply(_super3, [this].concat(args));\n    _this3.isRestriction = true;\n    return _this3;\n  }\n\n  return AggregateRestrictionError;\n}(AggregateError);\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\n\n\nvar _plugins = /*#__PURE__*/_classPrivateFieldLooseKey(\"plugins\");\n\nvar _storeUnsubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"storeUnsubscribe\");\n\nvar _emitter = /*#__PURE__*/_classPrivateFieldLooseKey(\"emitter\");\n\nvar _preProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"preProcessors\");\n\nvar _uploaders = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploaders\");\n\nvar _postProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"postProcessors\");\n\nvar _checkRestrictions = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRestrictions\");\n\nvar _checkMinNumberOfFiles = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkMinNumberOfFiles\");\n\nvar _checkRequiredMetaFields = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRequiredMetaFields\");\n\nvar _showOrLogErrorAndThrow = /*#__PURE__*/_classPrivateFieldLooseKey(\"showOrLogErrorAndThrow\");\n\nvar _assertNewUploadAllowed = /*#__PURE__*/_classPrivateFieldLooseKey(\"assertNewUploadAllowed\");\n\nvar _checkAndCreateFileStateObject = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkAndCreateFileStateObject\");\n\nvar _startIfAutoProceed = /*#__PURE__*/_classPrivateFieldLooseKey(\"startIfAutoProceed\");\n\nvar _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"addListeners\");\n\nvar _updateOnlineStatus = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateOnlineStatus\");\n\nvar _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"createUpload\");\n\nvar _getUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"getUpload\");\n\nvar _removeUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"removeUpload\");\n\nvar _runUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"runUpload\");\n\n_Symbol$for = Symbol.for('uppy test: getPlugins');\n_Symbol$for2 = Symbol.for('uppy test: createUpload');\n\nvar Uppy = /*#__PURE__*/function (_Symbol$for3, _Symbol$for4) {\n  // eslint-disable-next-line global-require\n\n  /** @type {Record<string, BasePlugin[]>} */\n\n  /**\n   * Instantiate Uppy\n   *\n   * @param {object} opts â€” Uppy options\n   */\n  function Uppy(_opts) {\n    var _this4 = this;\n\n    _classCallCheck(this, Uppy);\n\n    Object.defineProperty(this, _runUpload, {\n      value: _runUpload2\n    });\n    Object.defineProperty(this, _removeUpload, {\n      value: _removeUpload2\n    });\n    Object.defineProperty(this, _getUpload, {\n      value: _getUpload2\n    });\n    Object.defineProperty(this, _createUpload, {\n      value: _createUpload2\n    });\n    Object.defineProperty(this, _addListeners, {\n      value: _addListeners2\n    });\n    Object.defineProperty(this, _startIfAutoProceed, {\n      value: _startIfAutoProceed2\n    });\n    Object.defineProperty(this, _checkAndCreateFileStateObject, {\n      value: _checkAndCreateFileStateObject2\n    });\n    Object.defineProperty(this, _assertNewUploadAllowed, {\n      value: _assertNewUploadAllowed2\n    });\n    Object.defineProperty(this, _showOrLogErrorAndThrow, {\n      value: _showOrLogErrorAndThrow2\n    });\n    Object.defineProperty(this, _checkRequiredMetaFields, {\n      value: _checkRequiredMetaFields2\n    });\n    Object.defineProperty(this, _checkMinNumberOfFiles, {\n      value: _checkMinNumberOfFiles2\n    });\n    Object.defineProperty(this, _checkRestrictions, {\n      value: _checkRestrictions2\n    });\n    Object.defineProperty(this, _plugins, {\n      writable: true,\n      value: Object.create(null)\n    });\n    Object.defineProperty(this, _storeUnsubscribe, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _emitter, {\n      writable: true,\n      value: ee()\n    });\n    Object.defineProperty(this, _preProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _uploaders, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _postProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _updateOnlineStatus, {\n      writable: true,\n      value: this.updateOnlineStatus.bind(this)\n    });\n    this.defaultLocale = {\n      strings: {\n        addBulkFilesFailed: {\n          0: 'Failed to add %{smart_count} file due to an internal error',\n          1: 'Failed to add %{smart_count} files due to internal errors'\n        },\n        youCanOnlyUploadX: {\n          0: 'You can only upload %{smart_count} file',\n          1: 'You can only upload %{smart_count} files'\n        },\n        youHaveToAtLeastSelectX: {\n          0: 'You have to select at least %{smart_count} file',\n          1: 'You have to select at least %{smart_count} files'\n        },\n        exceedsSize: '%{file} exceeds maximum allowed size of %{size}',\n        missingRequiredMetaField: 'Missing required meta fields',\n        missingRequiredMetaFieldOnFile: 'Missing required meta fields in %{fileName}',\n        inferiorSize: 'This file is smaller than the allowed size of %{size}',\n        youCanOnlyUploadFileTypes: 'You can only upload: %{types}',\n        noMoreFilesAllowed: 'Cannot add more files',\n        noDuplicates: 'Cannot add the duplicate file \\'%{fileName}\\', it already exists',\n        companionError: 'Connection with Companion failed',\n        authAborted: 'Authentication aborted',\n        companionUnauthorizeHint: 'To unauthorize to your %{provider} account, please go to %{url}',\n        failedToUpload: 'Failed to upload %{file}',\n        noInternetConnection: 'No Internet connection',\n        connectedToInternet: 'Connected to the Internet',\n        // Strings for remote providers\n        noFilesFound: 'You have no files or folders here',\n        selectX: {\n          0: 'Select %{smart_count}',\n          1: 'Select %{smart_count}'\n        },\n        allFilesFromFolderNamed: 'All files from folder %{name}',\n        openFolderNamed: 'Open folder %{name}',\n        cancel: 'Cancel',\n        logOut: 'Log out',\n        filter: 'Filter',\n        resetFilter: 'Reset filter',\n        loading: 'Loading...',\n        authenticateWithTitle: 'Please authenticate with %{pluginName} to select files',\n        authenticateWith: 'Connect to %{pluginName}',\n        signInWithGoogle: 'Sign in with Google',\n        searchImages: 'Search for images',\n        enterTextToSearch: 'Enter text to search for images',\n        backToSearch: 'Back to Search',\n        emptyFolderAdded: 'No files were added from empty folder',\n        folderAlreadyAdded: 'The folder \"%{folder}\" was already added',\n        folderAdded: {\n          0: 'Added %{smart_count} file from %{folder}',\n          1: 'Added %{smart_count} files from %{folder}'\n        }\n      }\n    };\n    var defaultOptions = {\n      id: 'uppy',\n      autoProceed: false,\n\n      /**\n       * @deprecated The method should not be used\n       */\n      allowMultipleUploads: true,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: {\n        maxFileSize: null,\n        minFileSize: null,\n        maxTotalFileSize: null,\n        maxNumberOfFiles: null,\n        minNumberOfFiles: null,\n        allowedFileTypes: null,\n        requiredMetaFields: []\n      },\n      meta: {},\n      onBeforeFileAdded: function onBeforeFileAdded(currentFile) {\n        return currentFile;\n      },\n      onBeforeUpload: function onBeforeUpload(files) {\n        return files;\n      },\n      store: DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000\n    }; // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n\n    this.opts = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions), _opts), {}, {\n      restrictions: _objectSpread(_objectSpread({}, defaultOptions.restrictions), _opts && _opts.restrictions)\n    }); // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects â€” we set logger: justErrorsLogger in defaultOptions\n\n    if (_opts && _opts.logger && _opts.debug) {\n      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');\n    } else if (_opts && _opts.debug) {\n      this.opts.logger = debugLogger;\n    }\n\n    this.log(\"Using Core v\".concat(this.constructor.VERSION));\n\n    if (this.opts.restrictions.allowedFileTypes && this.opts.restrictions.allowedFileTypes !== null && !Array.isArray(this.opts.restrictions.allowedFileTypes)) {\n      throw new TypeError('`restrictions.allowedFileTypes` must be an array');\n    }\n\n    this.i18nInit(); // ___Why throttle at 500ms?\n    //    - We must throttle at >250ms for superfocus in Dashboard to work well\n    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n    //    - We must throttle at around >500ms to avoid performance lags.\n    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n\n    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, {\n      leading: true,\n      trailing: true\n    });\n    this.store = this.opts.store;\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      allowNewUpload: true,\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: _objectSpread({}, this.opts.meta),\n      info: [],\n      recoveredState: null\n    });\n    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe] = this.store.subscribe(function (prevState, nextState, patch) {\n      _this4.emit('state-update', prevState, nextState, patch);\n\n      _this4.updateAll(nextState);\n    }); // Exposing uppy object on window for debugging and testing\n\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window[this.opts.id] = this;\n    }\n\n    _classPrivateFieldLooseBase(this, _addListeners)[_addListeners]();\n  }\n\n  _createClass(Uppy, [{\n    key: \"emit\",\n    value: function emit(event) {\n      var _classPrivateFieldLoo2;\n\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(this, _emitter)[_emitter]).emit.apply(_classPrivateFieldLoo2, [event].concat(args));\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, callback);\n\n      return this;\n    }\n  }, {\n    key: \"once\",\n    value: function once(event, callback) {\n      _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(event, callback);\n\n      return this;\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, callback) {\n      _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, callback);\n\n      return this;\n    }\n    /**\n     * Iterate on all plugins and run `update` on them.\n     * Called each time state changes.\n     *\n     */\n\n  }, {\n    key: \"updateAll\",\n    value: function updateAll(state) {\n      this.iteratePlugins(function (plugin) {\n        plugin.update(state);\n      });\n    }\n    /**\n     * Updates state with a patch\n     *\n     * @param {object} patch {foo: 'bar'}\n     */\n\n  }, {\n    key: \"setState\",\n    value: function setState(patch) {\n      this.store.setState(patch);\n    }\n    /**\n     * Returns current state.\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this.store.getState();\n    }\n    /**\n     * Back compat for when uppy.state is used instead of uppy.getState().\n     *\n     * @deprecated\n     */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      // Here, state is a non-enumerable property.\n      return this.getState();\n    }\n    /**\n     * Shorthand to set state for a specific file.\n     */\n\n  }, {\n    key: \"setFileState\",\n    value: function setFileState(fileID, state) {\n      if (!this.getState().files[fileID]) {\n        throw new Error(\"Can\\u2019t set state for \".concat(fileID, \" (the file could have been removed)\"));\n      }\n\n      this.setState({\n        files: _objectSpread(_objectSpread({}, this.getState().files), {}, _defineProperty({}, fileID, _objectSpread(_objectSpread({}, this.getState().files[fileID]), state)))\n      });\n    }\n  }, {\n    key: \"i18nInit\",\n    value: function i18nInit() {\n      var translator = new Translator([this.defaultLocale, this.opts.locale]);\n      this.i18n = translator.translate.bind(translator);\n      this.i18nArray = translator.translateArray.bind(translator);\n      this.locale = translator.locale;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(newOpts) {\n      this.opts = _objectSpread(_objectSpread(_objectSpread({}, this.opts), newOpts), {}, {\n        restrictions: _objectSpread(_objectSpread({}, this.opts.restrictions), newOpts && newOpts.restrictions)\n      });\n\n      if (newOpts.meta) {\n        this.setMeta(newOpts.meta);\n      }\n\n      this.i18nInit();\n\n      if (newOpts.locale) {\n        this.iteratePlugins(function (plugin) {\n          plugin.setOptions();\n        });\n      } // Note: this is not the preact `setState`, it's an internal function that has the same name.\n\n\n      this.setState(); // so that UI re-renders with new options\n    }\n  }, {\n    key: \"resetProgress\",\n    value: function resetProgress() {\n      var defaultProgress = {\n        percentage: 0,\n        bytesUploaded: 0,\n        uploadComplete: false,\n        uploadStarted: null\n      };\n\n      var files = _objectSpread({}, this.getState().files);\n\n      var updatedFiles = {};\n      Object.keys(files).forEach(function (fileID) {\n        var updatedFile = _objectSpread({}, files[fileID]);\n\n        updatedFile.progress = _objectSpread(_objectSpread({}, updatedFile.progress), defaultProgress);\n        updatedFiles[fileID] = updatedFile;\n      });\n      this.setState({\n        files: updatedFiles,\n        totalProgress: 0\n      });\n      this.emit('reset-progress');\n    }\n  }, {\n    key: \"addPreProcessor\",\n    value: function addPreProcessor(fn) {\n      _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].add(fn);\n    }\n  }, {\n    key: \"removePreProcessor\",\n    value: function removePreProcessor(fn) {\n      return _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].delete(fn);\n    }\n  }, {\n    key: \"addPostProcessor\",\n    value: function addPostProcessor(fn) {\n      _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].add(fn);\n    }\n  }, {\n    key: \"removePostProcessor\",\n    value: function removePostProcessor(fn) {\n      return _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].delete(fn);\n    }\n  }, {\n    key: \"addUploader\",\n    value: function addUploader(fn) {\n      _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].add(fn);\n    }\n  }, {\n    key: \"removeUploader\",\n    value: function removeUploader(fn) {\n      return _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].delete(fn);\n    }\n  }, {\n    key: \"setMeta\",\n    value: function setMeta(data) {\n      var updatedMeta = _objectSpread(_objectSpread({}, this.getState().meta), data);\n\n      var updatedFiles = _objectSpread({}, this.getState().files);\n\n      Object.keys(updatedFiles).forEach(function (fileID) {\n        updatedFiles[fileID] = _objectSpread(_objectSpread({}, updatedFiles[fileID]), {}, {\n          meta: _objectSpread(_objectSpread({}, updatedFiles[fileID].meta), data)\n        });\n      });\n      this.log('Adding metadata:');\n      this.log(data);\n      this.setState({\n        meta: updatedMeta,\n        files: updatedFiles\n      });\n    }\n  }, {\n    key: \"setFileMeta\",\n    value: function setFileMeta(fileID, data) {\n      var updatedFiles = _objectSpread({}, this.getState().files);\n\n      if (!updatedFiles[fileID]) {\n        this.log('Was trying to set metadata for a file that has been removed: ', fileID);\n        return;\n      }\n\n      var newMeta = _objectSpread(_objectSpread({}, updatedFiles[fileID].meta), data);\n\n      updatedFiles[fileID] = _objectSpread(_objectSpread({}, updatedFiles[fileID]), {}, {\n        meta: newMeta\n      });\n      this.setState({\n        files: updatedFiles\n      });\n    }\n    /**\n     * Get a file object.\n     *\n     * @param {string} fileID The ID of the file object to return.\n     */\n\n  }, {\n    key: \"getFile\",\n    value: function getFile(fileID) {\n      return this.getState().files[fileID];\n    }\n    /**\n     * Get all files in an array.\n     */\n\n  }, {\n    key: \"getFiles\",\n    value: function getFiles() {\n      var _this$getState = this.getState(),\n          files = _this$getState.files;\n\n      return Object.values(files);\n    }\n  }, {\n    key: \"getObjectOfFilesPerState\",\n    value: function getObjectOfFilesPerState() {\n      var _this$getState2 = this.getState(),\n          filesObject = _this$getState2.files,\n          totalProgress = _this$getState2.totalProgress,\n          error = _this$getState2.error;\n\n      var files = Object.values(filesObject);\n      var inProgressFiles = files.filter(function (_ref) {\n        var progress = _ref.progress;\n        return !progress.uploadComplete && progress.uploadStarted;\n      });\n      var newFiles = files.filter(function (file) {\n        return !file.progress.uploadStarted;\n      });\n      var startedFiles = files.filter(function (file) {\n        return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n      });\n      var uploadStartedFiles = files.filter(function (file) {\n        return file.progress.uploadStarted;\n      });\n      var pausedFiles = files.filter(function (file) {\n        return file.isPaused;\n      });\n      var completeFiles = files.filter(function (file) {\n        return file.progress.uploadComplete;\n      });\n      var erroredFiles = files.filter(function (file) {\n        return file.error;\n      });\n      var inProgressNotPausedFiles = inProgressFiles.filter(function (file) {\n        return !file.isPaused;\n      });\n      var processingFiles = files.filter(function (file) {\n        return file.progress.preprocess || file.progress.postprocess;\n      });\n      return {\n        newFiles: newFiles,\n        startedFiles: startedFiles,\n        uploadStartedFiles: uploadStartedFiles,\n        pausedFiles: pausedFiles,\n        completeFiles: completeFiles,\n        erroredFiles: erroredFiles,\n        inProgressFiles: inProgressFiles,\n        inProgressNotPausedFiles: inProgressNotPausedFiles,\n        processingFiles: processingFiles,\n        isUploadStarted: uploadStartedFiles.length > 0,\n        isAllComplete: totalProgress === 100 && completeFiles.length === files.length && processingFiles.length === 0,\n        isAllErrored: !!error && erroredFiles.length === files.length,\n        isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,\n        isUploadInProgress: inProgressFiles.length > 0,\n        isSomeGhost: files.some(function (file) {\n          return file.isGhost;\n        })\n      };\n    }\n    /**\n     * A public wrapper for _checkRestrictions â€” checks if a file passes a set of restrictions.\n     * For use in UI pluigins (like Providers), to disallow selecting files that wonâ€™t pass restrictions.\n     *\n     * @param {object} file object to check\n     * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n     * @returns {object} { result: true/false, reason: why file didnâ€™t pass restrictions }\n     */\n\n  }, {\n    key: \"validateRestrictions\",\n    value: function validateRestrictions(file, files) {\n      try {\n        _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](file, files);\n\n        return {\n          result: true\n        };\n      } catch (err) {\n        return {\n          result: false,\n          reason: err.message\n        };\n      }\n    }\n    /**\n     * Check if file passes a set of restrictions set in options: maxFileSize, minFileSize,\n     * maxNumberOfFiles and allowedFileTypes.\n     *\n     * @param {object} file object to check\n     * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n     * @private\n     */\n\n  }, {\n    key: \"checkIfFileAlreadyExists\",\n    value: function checkIfFileAlreadyExists(fileID) {\n      var _this$getState3 = this.getState(),\n          files = _this$getState3.files;\n\n      if (files[fileID] && !files[fileID].isGhost) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Create a file state object based on user-provided `addFile()` options.\n     *\n     * Note this is extremely side-effectful and should only be done when a file state object\n     * will be added to state immediately afterward!\n     *\n     * The `files` value is passed in because it may be updated by the caller without updating the store.\n     */\n\n    /**\n     * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n     * try to guess file type in a clever way, check file against restrictions,\n     * and start an upload if `autoProceed === true`.\n     *\n     * @param {object} file object to add\n     * @returns {string} id for the added file\n     */\n\n  }, {\n    key: \"addFile\",\n    value: function addFile(file) {\n      _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](file);\n\n      var _this$getState4 = this.getState(),\n          files = _this$getState4.files;\n\n      var newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, file); // Users are asked to re-select recovered files without data,\n      // and to keep the progress, meta and everthing else, we only replace said data\n\n\n      if (files[newFile.id] && files[newFile.id].isGhost) {\n        newFile = _objectSpread(_objectSpread({}, files[newFile.id]), {}, {\n          data: file.data,\n          isGhost: false\n        });\n        this.log(\"Replaced the blob in the restored ghost file: \".concat(newFile.name, \", \").concat(newFile.id));\n      }\n\n      this.setState({\n        files: _objectSpread(_objectSpread({}, files), {}, _defineProperty({}, newFile.id, newFile))\n      });\n      this.emit('file-added', newFile);\n      this.emit('files-added', [newFile]);\n      this.log(\"Added file: \".concat(newFile.name, \", \").concat(newFile.id, \", mime type: \").concat(newFile.type));\n\n      _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n\n      return newFile.id;\n    }\n    /**\n     * Add multiple files to `state.files`. See the `addFile()` documentation.\n     *\n     * If an error occurs while adding a file, it is logged and the user is notified.\n     * This is good for UI plugins, but not for programmatic use.\n     * Programmatic users should usually still use `addFile()` on individual files.\n     */\n\n  }, {\n    key: \"addFiles\",\n    value: function addFiles(fileDescriptors) {\n      var _this5 = this;\n\n      _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](); // create a copy of the files object only once\n\n\n      var files = _objectSpread({}, this.getState().files);\n\n      var newFiles = [];\n      var errors = [];\n\n      for (var i = 0; i < fileDescriptors.length; i++) {\n        try {\n          var newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, fileDescriptors[i]); // Users are asked to re-select recovered files without data,\n          // and to keep the progress, meta and everthing else, we only replace said data\n\n\n          if (files[newFile.id] && files[newFile.id].isGhost) {\n            newFile = _objectSpread(_objectSpread({}, files[newFile.id]), {}, {\n              data: fileDescriptors[i].data,\n              isGhost: false\n            });\n            this.log(\"Replaced blob in a ghost file: \".concat(newFile.name, \", \").concat(newFile.id));\n          }\n\n          files[newFile.id] = newFile;\n          newFiles.push(newFile);\n        } catch (err) {\n          if (!err.isRestriction) {\n            errors.push(err);\n          }\n        }\n      }\n\n      this.setState({\n        files: files\n      });\n      newFiles.forEach(function (newFile) {\n        _this5.emit('file-added', newFile);\n      });\n      this.emit('files-added', newFiles);\n\n      if (newFiles.length > 5) {\n        this.log(\"Added batch of \".concat(newFiles.length, \" files\"));\n      } else {\n        Object.keys(newFiles).forEach(function (fileID) {\n          _this5.log(\"Added file: \".concat(newFiles[fileID].name, \"\\n id: \").concat(newFiles[fileID].id, \"\\n type: \").concat(newFiles[fileID].type));\n        });\n      }\n\n      if (newFiles.length > 0) {\n        _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n      }\n\n      if (errors.length > 0) {\n        var message = 'Multiple errors occurred while adding files:\\n';\n        errors.forEach(function (subError) {\n          message += \"\\n * \".concat(subError.message);\n        });\n        this.info({\n          message: this.i18n('addBulkFilesFailed', {\n            smart_count: errors.length\n          }),\n          details: message\n        }, 'error', this.opts.infoTimeout);\n\n        if (typeof AggregateError === 'function') {\n          throw new AggregateError(errors, message);\n        } else {\n          var err = new Error(message);\n          err.errors = errors;\n          throw err;\n        }\n      }\n    }\n  }, {\n    key: \"removeFiles\",\n    value: function removeFiles(fileIDs, reason) {\n      var _this6 = this;\n\n      var _this$getState5 = this.getState(),\n          files = _this$getState5.files,\n          currentUploads = _this$getState5.currentUploads;\n\n      var updatedFiles = _objectSpread({}, files);\n\n      var updatedUploads = _objectSpread({}, currentUploads);\n\n      var removedFiles = Object.create(null);\n      fileIDs.forEach(function (fileID) {\n        if (files[fileID]) {\n          removedFiles[fileID] = files[fileID];\n          delete updatedFiles[fileID];\n        }\n      }); // Remove files from the `fileIDs` list in each upload.\n\n      function fileIsNotRemoved(uploadFileID) {\n        return removedFiles[uploadFileID] === undefined;\n      }\n\n      Object.keys(updatedUploads).forEach(function (uploadID) {\n        var newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved); // Remove the upload if no files are associated with it anymore.\n\n        if (newFileIDs.length === 0) {\n          delete updatedUploads[uploadID];\n          return;\n        }\n\n        updatedUploads[uploadID] = _objectSpread(_objectSpread({}, currentUploads[uploadID]), {}, {\n          fileIDs: newFileIDs\n        });\n      });\n      var stateUpdate = {\n        currentUploads: updatedUploads,\n        files: updatedFiles\n      }; // If all files were removed - allow new uploads,\n      // and clear recoveredState\n\n      if (Object.keys(updatedFiles).length === 0) {\n        stateUpdate.allowNewUpload = true;\n        stateUpdate.error = null;\n        stateUpdate.recoveredState = null;\n      }\n\n      this.setState(stateUpdate);\n      this.calculateTotalProgress();\n      var removedFileIDs = Object.keys(removedFiles);\n      removedFileIDs.forEach(function (fileID) {\n        _this6.emit('file-removed', removedFiles[fileID], reason);\n      });\n\n      if (removedFileIDs.length > 5) {\n        this.log(\"Removed \".concat(removedFileIDs.length, \" files\"));\n      } else {\n        this.log(\"Removed files: \".concat(removedFileIDs.join(', ')));\n      }\n    }\n  }, {\n    key: \"removeFile\",\n    value: function removeFile(fileID) {\n      var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      this.removeFiles([fileID], reason);\n    }\n  }, {\n    key: \"pauseResume\",\n    value: function pauseResume(fileID) {\n      if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {\n        return undefined;\n      }\n\n      var wasPaused = this.getFile(fileID).isPaused || false;\n      var isPaused = !wasPaused;\n      this.setFileState(fileID, {\n        isPaused: isPaused\n      });\n      this.emit('upload-pause', fileID, isPaused);\n      return isPaused;\n    }\n  }, {\n    key: \"pauseAll\",\n    value: function pauseAll() {\n      var updatedFiles = _objectSpread({}, this.getState().files);\n\n      var inProgressUpdatedFiles = Object.keys(updatedFiles).filter(function (file) {\n        return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n      });\n      inProgressUpdatedFiles.forEach(function (file) {\n        var updatedFile = _objectSpread(_objectSpread({}, updatedFiles[file]), {}, {\n          isPaused: true\n        });\n\n        updatedFiles[file] = updatedFile;\n      });\n      this.setState({\n        files: updatedFiles\n      });\n      this.emit('pause-all');\n    }\n  }, {\n    key: \"resumeAll\",\n    value: function resumeAll() {\n      var updatedFiles = _objectSpread({}, this.getState().files);\n\n      var inProgressUpdatedFiles = Object.keys(updatedFiles).filter(function (file) {\n        return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n      });\n      inProgressUpdatedFiles.forEach(function (file) {\n        var updatedFile = _objectSpread(_objectSpread({}, updatedFiles[file]), {}, {\n          isPaused: false,\n          error: null\n        });\n\n        updatedFiles[file] = updatedFile;\n      });\n      this.setState({\n        files: updatedFiles\n      });\n      this.emit('resume-all');\n    }\n  }, {\n    key: \"retryAll\",\n    value: function retryAll() {\n      var updatedFiles = _objectSpread({}, this.getState().files);\n\n      var filesToRetry = Object.keys(updatedFiles).filter(function (file) {\n        return updatedFiles[file].error;\n      });\n      filesToRetry.forEach(function (file) {\n        var updatedFile = _objectSpread(_objectSpread({}, updatedFiles[file]), {}, {\n          isPaused: false,\n          error: null\n        });\n\n        updatedFiles[file] = updatedFile;\n      });\n      this.setState({\n        files: updatedFiles,\n        error: null\n      });\n      this.emit('retry-all', filesToRetry);\n\n      if (filesToRetry.length === 0) {\n        return Promise.resolve({\n          successful: [],\n          failed: []\n        });\n      }\n\n      var uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](filesToRetry, {\n        forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n      });\n\n      return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n    }\n  }, {\n    key: \"cancelAll\",\n    value: function cancelAll() {\n      this.emit('cancel-all');\n\n      var _this$getState6 = this.getState(),\n          files = _this$getState6.files;\n\n      var fileIDs = Object.keys(files);\n\n      if (fileIDs.length) {\n        this.removeFiles(fileIDs, 'cancel-all');\n      }\n\n      this.setState({\n        totalProgress: 0,\n        error: null,\n        recoveredState: null\n      });\n    }\n  }, {\n    key: \"retryUpload\",\n    value: function retryUpload(fileID) {\n      this.setFileState(fileID, {\n        error: null,\n        isPaused: false\n      });\n      this.emit('upload-retry', fileID);\n\n      var uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]([fileID], {\n        forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n      });\n\n      return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.cancelAll();\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      this.iteratePlugins(function (plugin) {\n        if (plugin.provider && plugin.provider.logout) {\n          plugin.provider.logout();\n        }\n      });\n    }\n  }, {\n    key: \"calculateProgress\",\n    value: function calculateProgress(file, data) {\n      if (!this.getFile(file.id)) {\n        this.log(\"Not setting progress for a file that has been removed: \".concat(file.id));\n        return;\n      } // bytesTotal may be null or zero; in that case we can't divide by it\n\n\n      var canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0;\n      this.setFileState(file.id, {\n        progress: _objectSpread(_objectSpread({}, this.getFile(file.id).progress), {}, {\n          bytesUploaded: data.bytesUploaded,\n          bytesTotal: data.bytesTotal,\n          percentage: canHavePercentage ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0\n        })\n      });\n      this.calculateTotalProgress();\n    }\n  }, {\n    key: \"calculateTotalProgress\",\n    value: function calculateTotalProgress() {\n      // calculate total progress, using the number of files currently uploading,\n      // multiplied by 100 and the summ of individual progress of each file\n      var files = this.getFiles();\n      var inProgress = files.filter(function (file) {\n        return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n      });\n\n      if (inProgress.length === 0) {\n        this.emit('progress', 0);\n        this.setState({\n          totalProgress: 0\n        });\n        return;\n      }\n\n      var sizedFiles = inProgress.filter(function (file) {\n        return file.progress.bytesTotal != null;\n      });\n      var unsizedFiles = inProgress.filter(function (file) {\n        return file.progress.bytesTotal == null;\n      });\n\n      if (sizedFiles.length === 0) {\n        var progressMax = inProgress.length * 100;\n        var currentProgress = unsizedFiles.reduce(function (acc, file) {\n          return acc + file.progress.percentage;\n        }, 0);\n\n        var _totalProgress = Math.round(currentProgress / progressMax * 100);\n\n        this.setState({\n          totalProgress: _totalProgress\n        });\n        return;\n      }\n\n      var totalSize = sizedFiles.reduce(function (acc, file) {\n        return acc + file.progress.bytesTotal;\n      }, 0);\n      var averageSize = totalSize / sizedFiles.length;\n      totalSize += averageSize * unsizedFiles.length;\n      var uploadedSize = 0;\n      sizedFiles.forEach(function (file) {\n        uploadedSize += file.progress.bytesUploaded;\n      });\n      unsizedFiles.forEach(function (file) {\n        uploadedSize += averageSize * (file.progress.percentage || 0) / 100;\n      });\n      var totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100); // hot fix, because:\n      // uploadedSize ended up larger than totalSize, resulting in 1325% total\n\n      if (totalProgress > 100) {\n        totalProgress = 100;\n      }\n\n      this.setState({\n        totalProgress: totalProgress\n      });\n      this.emit('progress', totalProgress);\n    }\n    /**\n     * Registers listeners for all global actions, like:\n     * `error`, `file-removed`, `upload-progress`\n     */\n\n  }, {\n    key: \"updateOnlineStatus\",\n    value: function updateOnlineStatus() {\n      var online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;\n\n      if (!online) {\n        this.emit('is-offline');\n        this.info(this.i18n('noInternetConnection'), 'error', 0);\n        this.wasOffline = true;\n      } else {\n        this.emit('is-online');\n\n        if (this.wasOffline) {\n          this.emit('back-online');\n          this.info(this.i18n('connectedToInternet'), 'success', 3000);\n          this.wasOffline = false;\n        }\n      }\n    }\n  }, {\n    key: \"getID\",\n    value: function getID() {\n      return this.opts.id;\n    }\n    /**\n     * Registers a plugin with Core.\n     *\n     * @param {object} Plugin object\n     * @param {object} [opts] object with options to be passed to Plugin\n     * @returns {object} self for chaining\n     */\n    // eslint-disable-next-line no-shadow\n\n  }, {\n    key: \"use\",\n    value: function use(Plugin, opts) {\n      if (typeof Plugin !== 'function') {\n        var msg = \"Expected a plugin class, but got \".concat(Plugin === null ? 'null' : typeof Plugin, \".\") + ' Please verify that the plugin was imported and spelled correctly.';\n        throw new TypeError(msg);\n      } // Instantiate\n\n\n      var plugin = new Plugin(this, opts);\n      var pluginId = plugin.id;\n\n      if (!pluginId) {\n        throw new Error('Your plugin must have an id');\n      }\n\n      if (!plugin.type) {\n        throw new Error('Your plugin must have a type');\n      }\n\n      var existsPluginAlready = this.getPlugin(pluginId);\n\n      if (existsPluginAlready) {\n        var _msg = \"Already found a plugin named '\".concat(existsPluginAlready.id, \"'. \") + \"Tried to use: '\".concat(pluginId, \"'.\\n\") + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';\n\n        throw new Error(_msg);\n      }\n\n      if (Plugin.VERSION) {\n        this.log(\"Using \".concat(pluginId, \" v\").concat(Plugin.VERSION));\n      }\n\n      if (plugin.type in _classPrivateFieldLooseBase(this, _plugins)[_plugins]) {\n        _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type].push(plugin);\n      } else {\n        _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type] = [plugin];\n      }\n\n      plugin.install();\n      return this;\n    }\n    /**\n     * Find one Plugin by name.\n     *\n     * @param {string} id plugin id\n     * @returns {BasePlugin|undefined}\n     */\n\n  }, {\n    key: \"getPlugin\",\n    value: function getPlugin(id) {\n      for (var _i = 0, _Object$values = Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins]); _i < _Object$values.length; _i++) {\n        var plugins = _Object$values[_i];\n        var foundPlugin = plugins.find(function (plugin) {\n          return plugin.id === id;\n        });\n        if (foundPlugin != null) return foundPlugin;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: _Symbol$for3,\n    value: function value(type) {\n      return _classPrivateFieldLooseBase(this, _plugins)[_plugins][type];\n    }\n    /**\n     * Iterate through all `use`d plugins.\n     *\n     * @param {Function} method that will be run on each plugin\n     */\n\n  }, {\n    key: \"iteratePlugins\",\n    value: function iteratePlugins(method) {\n      Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins]).flat(1).forEach(method);\n    }\n    /**\n     * Uninstall and remove a plugin.\n     *\n     * @param {object} instance The plugin instance to remove.\n     */\n\n  }, {\n    key: \"removePlugin\",\n    value: function removePlugin(instance) {\n      this.log(\"Removing plugin \".concat(instance.id));\n      this.emit('plugin-remove', instance);\n\n      if (instance.uninstall) {\n        instance.uninstall();\n      }\n\n      var list = _classPrivateFieldLooseBase(this, _plugins)[_plugins][instance.type]; // list.indexOf failed here, because Vue3 converted the plugin instance\n      // to a Proxy object, which failed the strict comparison test:\n      // obj !== objProxy\n\n\n      var index = list.findIndex(function (item) {\n        return item.id === instance.id;\n      });\n\n      if (index !== -1) {\n        list.splice(index, 1);\n      }\n\n      var state = this.getState();\n      var updatedState = {\n        plugins: _objectSpread(_objectSpread({}, state.plugins), {}, _defineProperty({}, instance.id, undefined))\n      };\n      this.setState(updatedState);\n    }\n    /**\n     * Uninstall all plugins and close down this Uppy instance.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this7 = this;\n\n      this.log(\"Closing Uppy instance \".concat(this.opts.id, \": removing all files and uninstalling plugins\"));\n      this.reset();\n\n      _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe]();\n\n      this.iteratePlugins(function (plugin) {\n        _this7.removePlugin(plugin);\n      });\n\n      if (typeof window !== 'undefined' && window.removeEventListener) {\n        window.removeEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n        window.removeEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n      }\n    }\n  }, {\n    key: \"hideInfo\",\n    value: function hideInfo() {\n      var _this$getState7 = this.getState(),\n          info = _this$getState7.info;\n\n      this.setState({\n        info: info.slice(1)\n      });\n      this.emit('info-hidden');\n    }\n    /**\n     * Set info message in `state.info`, so that UI plugins like `Informer`\n     * can display the message.\n     *\n     * @param {string | object} message Message to be displayed by the informer\n     * @param {string} [type]\n     * @param {number} [duration]\n     */\n\n  }, {\n    key: \"info\",\n    value: function info(message) {\n      var _this8 = this;\n\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';\n      var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3000;\n      var isComplexMessage = typeof message === 'object';\n      this.setState({\n        info: [].concat(_toConsumableArray(this.getState().info), [{\n          type: type,\n          message: isComplexMessage ? message.message : message,\n          details: isComplexMessage ? message.details : null\n        }])\n      });\n      setTimeout(function () {\n        return _this8.hideInfo();\n      }, duration);\n      this.emit('info-visible');\n    }\n    /**\n     * Passes messages to a function, provided in `opts.logger`.\n     * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n     *\n     * @param {string|object} message to log\n     * @param {string} [type] optional `error` or `warning`\n     */\n\n  }, {\n    key: \"log\",\n    value: function log(message, type) {\n      var logger = this.opts.logger;\n\n      switch (type) {\n        case 'error':\n          logger.error(message);\n          break;\n\n        case 'warning':\n          logger.warn(message);\n          break;\n\n        default:\n          logger.debug(message);\n          break;\n      }\n    }\n    /**\n     * Restore an upload by its ID.\n     */\n\n  }, {\n    key: \"restore\",\n    value: function restore(uploadID) {\n      this.log(\"Core: attempting to restore upload \\\"\".concat(uploadID, \"\\\"\"));\n\n      if (!this.getState().currentUploads[uploadID]) {\n        _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n\n        return Promise.reject(new Error('Nonexistent upload'));\n      }\n\n      return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n    }\n    /**\n     * Create an upload for a bunch of files.\n     *\n     * @param {Array<string>} fileIDs File IDs to include in this upload.\n     * @returns {string} ID of this upload.\n     */\n\n  }, {\n    key: _Symbol$for4,\n    value: function value() {\n      var _classPrivateFieldLoo3;\n\n      return (_classPrivateFieldLoo3 = _classPrivateFieldLooseBase(this, _createUpload))[_createUpload].apply(_classPrivateFieldLoo3, arguments);\n    }\n    /**\n     * Add data to an upload's result object.\n     *\n     * @param {string} uploadID The ID of the upload.\n     * @param {object} data Data properties to add to the result object.\n     */\n\n  }, {\n    key: \"addResultData\",\n    value: function addResultData(uploadID, data) {\n      if (!_classPrivateFieldLooseBase(this, _getUpload)[_getUpload](uploadID)) {\n        this.log(\"Not setting result for an upload that has been removed: \".concat(uploadID));\n        return;\n      }\n\n      var _this$getState8 = this.getState(),\n          currentUploads = _this$getState8.currentUploads;\n\n      var currentUpload = _objectSpread(_objectSpread({}, currentUploads[uploadID]), {}, {\n        result: _objectSpread(_objectSpread({}, currentUploads[uploadID].result), data)\n      });\n\n      this.setState({\n        currentUploads: _objectSpread(_objectSpread({}, currentUploads), {}, _defineProperty({}, uploadID, currentUpload))\n      });\n    }\n    /**\n     * Remove an upload, eg. if it has been canceled or completed.\n     *\n     * @param {string} uploadID The ID of the upload.\n     */\n\n    /**\n     * Start an upload for all the files that are not currently being uploaded.\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"upload\",\n    value: function upload() {\n      var _this9 = this;\n\n      var _classPrivateFieldLoo;\n\n      if (!((_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _plugins)[_plugins].uploader) != null && _classPrivateFieldLoo.length)) {\n        this.log('No uploader type plugins are used', 'warning');\n      }\n\n      var _this$getState9 = this.getState(),\n          files = _this$getState9.files;\n\n      var onBeforeUploadResult = this.opts.onBeforeUpload(files);\n\n      if (onBeforeUploadResult === false) {\n        return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));\n      }\n\n      if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n        files = onBeforeUploadResult; // Updating files in state, because uploader plugins receive file IDs,\n        // and then fetch the actual file object from state\n\n        this.setState({\n          files: files\n        });\n      }\n\n      return Promise.resolve().then(function () {\n        _classPrivateFieldLooseBase(_this9, _checkMinNumberOfFiles)[_checkMinNumberOfFiles](files);\n\n        _classPrivateFieldLooseBase(_this9, _checkRequiredMetaFields)[_checkRequiredMetaFields](files);\n      }).catch(function (err) {\n        _classPrivateFieldLooseBase(_this9, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err);\n      }).then(function () {\n        var _this9$getState = _this9.getState(),\n            currentUploads = _this9$getState.currentUploads; // get a list of files that are currently assigned to uploads\n\n\n        var currentlyUploadingFiles = Object.values(currentUploads).flatMap(function (curr) {\n          return curr.fileIDs;\n        });\n        var waitingFileIDs = [];\n        Object.keys(files).forEach(function (fileID) {\n          var file = _this9.getFile(fileID); // if the file hasn't started uploading and hasn't already been assigned to an upload..\n\n\n          if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {\n            waitingFileIDs.push(file.id);\n          }\n        });\n\n        var uploadID = _classPrivateFieldLooseBase(_this9, _createUpload)[_createUpload](waitingFileIDs);\n\n        return _classPrivateFieldLooseBase(_this9, _runUpload)[_runUpload](uploadID);\n      }).catch(function (err) {\n        _classPrivateFieldLooseBase(_this9, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n          showInformer: false\n        });\n      });\n    }\n  }]);\n\n  return Uppy;\n}(_Symbol$for, _Symbol$for2);\n\nfunction _checkRestrictions2(file) {\n  var files = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getFiles();\n  var _this$opts$restrictio = this.opts.restrictions,\n      maxFileSize = _this$opts$restrictio.maxFileSize,\n      minFileSize = _this$opts$restrictio.minFileSize,\n      maxTotalFileSize = _this$opts$restrictio.maxTotalFileSize,\n      maxNumberOfFiles = _this$opts$restrictio.maxNumberOfFiles,\n      allowedFileTypes = _this$opts$restrictio.allowedFileTypes;\n\n  if (maxNumberOfFiles) {\n    if (files.length + 1 > maxNumberOfFiles) {\n      throw new RestrictionError(\"\".concat(this.i18n('youCanOnlyUploadX', {\n        smart_count: maxNumberOfFiles\n      })));\n    }\n  }\n\n  if (allowedFileTypes) {\n    var isCorrectFileType = allowedFileTypes.some(function (type) {\n      // check if this is a mime-type\n      if (type.indexOf('/') > -1) {\n        if (!file.type) return false;\n        return match(file.type.replace(/;.*?$/, ''), type);\n      } // otherwise this is likely an extension\n\n\n      if (type[0] === '.' && file.extension) {\n        return file.extension.toLowerCase() === type.substr(1).toLowerCase();\n      }\n\n      return false;\n    });\n\n    if (!isCorrectFileType) {\n      var allowedFileTypesString = allowedFileTypes.join(', ');\n      throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {\n        types: allowedFileTypesString\n      }));\n    }\n  } // We can't check maxTotalFileSize if the size is unknown.\n\n\n  if (maxTotalFileSize && file.size != null) {\n    var totalFilesSize = 0;\n    totalFilesSize += file.size;\n    files.forEach(function (f) {\n      totalFilesSize += f.size;\n    });\n\n    if (totalFilesSize > maxTotalFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxTotalFileSize),\n        file: file.name\n      }));\n    }\n  } // We can't check maxFileSize if the size is unknown.\n\n\n  if (maxFileSize && file.size != null) {\n    if (file.size > maxFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxFileSize),\n        file: file.name\n      }));\n    }\n  } // We can't check minFileSize if the size is unknown.\n\n\n  if (minFileSize && file.size != null) {\n    if (file.size < minFileSize) {\n      throw new RestrictionError(this.i18n('inferiorSize', {\n        size: prettierBytes(minFileSize)\n      }));\n    }\n  }\n}\n\nfunction _checkMinNumberOfFiles2(files) {\n  var minNumberOfFiles = this.opts.restrictions.minNumberOfFiles;\n\n  if (Object.keys(files).length < minNumberOfFiles) {\n    throw new RestrictionError(\"\".concat(this.i18n('youHaveToAtLeastSelectX', {\n      smart_count: minNumberOfFiles\n    })));\n  }\n}\n\nfunction _checkRequiredMetaFields2(files) {\n  var requiredMetaFields = this.opts.restrictions.requiredMetaFields;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var errors = [];\n\n  for (var _i2 = 0, _Object$keys = Object.keys(files); _i2 < _Object$keys.length; _i2++) {\n    var fileID = _Object$keys[_i2];\n    var file = this.getFile(fileID);\n\n    for (var i = 0; i < requiredMetaFields.length; i++) {\n      if (!hasOwnProperty.call(file.meta, requiredMetaFields[i]) || file.meta[requiredMetaFields[i]] === '') {\n        var err = new RestrictionError(\"\".concat(this.i18n('missingRequiredMetaFieldOnFile', {\n          fileName: file.name\n        })));\n        errors.push(err);\n\n        _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n          file: file,\n          showInformer: false,\n          throwErr: false\n        });\n      }\n    }\n  }\n\n  if (errors.length) {\n    throw new AggregateRestrictionError(\"\".concat(this.i18n('missingRequiredMetaField')), errors);\n  }\n}\n\nfunction _showOrLogErrorAndThrow2(err) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$showInformer = _ref2.showInformer,\n      showInformer = _ref2$showInformer === void 0 ? true : _ref2$showInformer,\n      _ref2$file = _ref2.file,\n      file = _ref2$file === void 0 ? null : _ref2$file,\n      _ref2$throwErr = _ref2.throwErr,\n      throwErr = _ref2$throwErr === void 0 ? true : _ref2$throwErr;\n\n  var message = typeof err === 'object' ? err.message : err;\n  var details = typeof err === 'object' && err.details ? err.details : ''; // Restriction errors should be logged, but not as errors,\n  // as they are expected and shown in the UI.\n\n  var logMessageWithDetails = message;\n\n  if (details) {\n    logMessageWithDetails += \" \".concat(details);\n  }\n\n  if (err.isRestriction) {\n    this.log(logMessageWithDetails);\n    this.emit('restriction-failed', file, err);\n  } else {\n    this.log(logMessageWithDetails, 'error');\n  } // Sometimes informer has to be shown manually by the developer,\n  // for example, in `onBeforeFileAdded`.\n\n\n  if (showInformer) {\n    this.info({\n      message: message,\n      details: details\n    }, 'error', this.opts.infoTimeout);\n  }\n\n  if (throwErr) {\n    throw typeof err === 'object' ? err : new Error(err);\n  }\n}\n\nfunction _assertNewUploadAllowed2(file) {\n  var _this$getState10 = this.getState(),\n      allowNewUpload = _this$getState10.allowNewUpload;\n\n  if (allowNewUpload === false) {\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError(this.i18n('noMoreFilesAllowed')), {\n      file: file\n    });\n  }\n}\n\nfunction _checkAndCreateFileStateObject2(files, fileDescriptor) {\n  var fileType = getFileType(fileDescriptor);\n  var fileName = getFileName(fileType, fileDescriptor);\n  var fileExtension = getFileNameAndExtension(fileName).extension;\n  var isRemote = Boolean(fileDescriptor.isRemote);\n  var fileID = generateFileID(_objectSpread(_objectSpread({}, fileDescriptor), {}, {\n    type: fileType\n  }));\n\n  if (this.checkIfFileAlreadyExists(fileID)) {\n    var error = new RestrictionError(this.i18n('noDuplicates', {\n      fileName: fileName\n    }));\n\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {\n      file: fileDescriptor\n    });\n  }\n\n  var meta = fileDescriptor.meta || {};\n  meta.name = fileName;\n  meta.type = fileType; // `null` means the size is unknown.\n\n  var size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null;\n  var newFile = {\n    source: fileDescriptor.source || '',\n    id: fileID,\n    name: fileName,\n    extension: fileExtension || '',\n    meta: _objectSpread(_objectSpread({}, this.getState().meta), meta),\n    type: fileType,\n    data: fileDescriptor.data,\n    progress: {\n      percentage: 0,\n      bytesUploaded: 0,\n      bytesTotal: size,\n      uploadComplete: false,\n      uploadStarted: null\n    },\n    size: size,\n    isRemote: isRemote,\n    remote: fileDescriptor.remote || '',\n    preview: fileDescriptor.preview\n  };\n  var onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files);\n\n  if (onBeforeFileAddedResult === false) {\n    // Donâ€™t show UI info for this error, as it should be done by the developer\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.'), {\n      showInformer: false,\n      fileDescriptor: fileDescriptor\n    });\n  } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {\n    newFile = onBeforeFileAddedResult;\n  }\n\n  try {\n    var filesArray = Object.keys(files).map(function (i) {\n      return files[i];\n    });\n\n    _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](newFile, filesArray);\n  } catch (err) {\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n      file: newFile\n    });\n  }\n\n  return newFile;\n}\n\nfunction _startIfAutoProceed2() {\n  var _this10 = this;\n\n  if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n    this.scheduledAutoProceed = setTimeout(function () {\n      _this10.scheduledAutoProceed = null;\n\n      _this10.upload().catch(function (err) {\n        if (!err.isRestriction) {\n          _this10.log(err.stack || err.message || err);\n        }\n      });\n    }, 4);\n  }\n}\n\nfunction _addListeners2() {\n  var _this11 = this;\n\n  /**\n   * @param {Error} error\n   * @param {object} [file]\n   * @param {object} [response]\n   */\n  var errorHandler = function errorHandler(error, file, response) {\n    var errorMsg = error.message || 'Unknown error';\n\n    if (error.details) {\n      errorMsg += \" \".concat(error.details);\n    }\n\n    _this11.setState({\n      error: errorMsg\n    });\n\n    if (file != null && file.id in _this11.getState().files) {\n      _this11.setFileState(file.id, {\n        error: errorMsg,\n        response: response\n      });\n    }\n  };\n\n  this.on('error', errorHandler);\n  this.on('upload-error', function (file, error, response) {\n    errorHandler(error, file, response);\n\n    if (typeof error === 'object' && error.message) {\n      var newError = new Error(error.message);\n      newError.details = error.message;\n\n      if (error.details) {\n        newError.details += \" \".concat(error.details);\n      }\n\n      newError.message = _this11.i18n('failedToUpload', {\n        file: file.name\n      });\n\n      _classPrivateFieldLooseBase(_this11, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](newError, {\n        throwErr: false\n      });\n    } else {\n      _classPrivateFieldLooseBase(_this11, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {\n        throwErr: false\n      });\n    }\n  });\n  this.on('upload', function () {\n    _this11.setState({\n      error: null\n    });\n  });\n  this.on('upload-started', function (file) {\n    if (!_this11.getFile(file.id)) {\n      _this11.log(\"Not setting progress for a file that has been removed: \".concat(file.id));\n\n      return;\n    }\n\n    _this11.setFileState(file.id, {\n      progress: {\n        uploadStarted: Date.now(),\n        uploadComplete: false,\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: file.size\n      }\n    });\n  });\n  this.on('upload-progress', this.calculateProgress);\n  this.on('upload-success', function (file, uploadResp) {\n    if (!_this11.getFile(file.id)) {\n      _this11.log(\"Not setting progress for a file that has been removed: \".concat(file.id));\n\n      return;\n    }\n\n    var currentProgress = _this11.getFile(file.id).progress;\n\n    _this11.setFileState(file.id, {\n      progress: _objectSpread(_objectSpread({}, currentProgress), {}, {\n        postprocess: _classPrivateFieldLooseBase(_this11, _postProcessors)[_postProcessors].size > 0 ? {\n          mode: 'indeterminate'\n        } : null,\n        uploadComplete: true,\n        percentage: 100,\n        bytesUploaded: currentProgress.bytesTotal\n      }),\n      response: uploadResp,\n      uploadURL: uploadResp.uploadURL,\n      isPaused: false\n    }); // Remote providers sometimes don't tell us the file size,\n    // but we can know how many bytes we uploaded once the upload is complete.\n\n\n    if (file.size == null) {\n      _this11.setFileState(file.id, {\n        size: uploadResp.bytesUploaded || currentProgress.bytesTotal\n      });\n    }\n\n    _this11.calculateTotalProgress();\n  });\n  this.on('preprocess-progress', function (file, progress) {\n    if (!_this11.getFile(file.id)) {\n      _this11.log(\"Not setting progress for a file that has been removed: \".concat(file.id));\n\n      return;\n    }\n\n    _this11.setFileState(file.id, {\n      progress: _objectSpread(_objectSpread({}, _this11.getFile(file.id).progress), {}, {\n        preprocess: progress\n      })\n    });\n  });\n  this.on('preprocess-complete', function (file) {\n    if (!_this11.getFile(file.id)) {\n      _this11.log(\"Not setting progress for a file that has been removed: \".concat(file.id));\n\n      return;\n    }\n\n    var files = _objectSpread({}, _this11.getState().files);\n\n    files[file.id] = _objectSpread(_objectSpread({}, files[file.id]), {}, {\n      progress: _objectSpread({}, files[file.id].progress)\n    });\n    delete files[file.id].progress.preprocess;\n\n    _this11.setState({\n      files: files\n    });\n  });\n  this.on('postprocess-progress', function (file, progress) {\n    if (!_this11.getFile(file.id)) {\n      _this11.log(\"Not setting progress for a file that has been removed: \".concat(file.id));\n\n      return;\n    }\n\n    _this11.setFileState(file.id, {\n      progress: _objectSpread(_objectSpread({}, _this11.getState().files[file.id].progress), {}, {\n        postprocess: progress\n      })\n    });\n  });\n  this.on('postprocess-complete', function (file) {\n    if (!_this11.getFile(file.id)) {\n      _this11.log(\"Not setting progress for a file that has been removed: \".concat(file.id));\n\n      return;\n    }\n\n    var files = _objectSpread({}, _this11.getState().files);\n\n    files[file.id] = _objectSpread(_objectSpread({}, files[file.id]), {}, {\n      progress: _objectSpread({}, files[file.id].progress)\n    });\n    delete files[file.id].progress.postprocess;\n\n    _this11.setState({\n      files: files\n    });\n  });\n  this.on('restored', function () {\n    // Files may have changed--ensure progress is still accurate.\n    _this11.calculateTotalProgress();\n  }); // show informer if offline\n\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    window.addEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    setTimeout(_classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus], 3000);\n  }\n}\n\nfunction _createUpload2(fileIDs) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // uppy.retryAll sets this to true â€” when retrying we want to ignore `allowNewUpload: false`\n  var _opts$forceAllowNewUp = opts.forceAllowNewUpload,\n      forceAllowNewUpload = _opts$forceAllowNewUp === void 0 ? false : _opts$forceAllowNewUp;\n\n  var _this$getState11 = this.getState(),\n      allowNewUpload = _this$getState11.allowNewUpload,\n      currentUploads = _this$getState11.currentUploads;\n\n  if (!allowNewUpload && !forceAllowNewUpload) {\n    throw new Error('Cannot create a new upload: already uploading.');\n  }\n\n  var uploadID = nanoid();\n  this.emit('upload', {\n    id: uploadID,\n    fileIDs: fileIDs\n  });\n  this.setState({\n    allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,\n    currentUploads: _objectSpread(_objectSpread({}, currentUploads), {}, _defineProperty({}, uploadID, {\n      fileIDs: fileIDs,\n      step: 0,\n      result: {}\n    }))\n  });\n  return uploadID;\n}\n\nfunction _getUpload2(uploadID) {\n  var _this$getState12 = this.getState(),\n      currentUploads = _this$getState12.currentUploads;\n\n  return currentUploads[uploadID];\n}\n\nfunction _removeUpload2(uploadID) {\n  var currentUploads = _objectSpread({}, this.getState().currentUploads);\n\n  delete currentUploads[uploadID];\n  this.setState({\n    currentUploads: currentUploads\n  });\n}\n\nfunction _runUpload2(_x) {\n  return _runUpload3.apply(this, arguments);\n}\n\nfunction _runUpload3() {\n  _runUpload3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(uploadID) {\n    var _this12 = this;\n\n    var _this$getState13, currentUploads, currentUpload, restoreStep, steps, step, fn, updatedUpload, files, successful, failed, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _this$getState13 = this.getState(), currentUploads = _this$getState13.currentUploads;\n            currentUpload = currentUploads[uploadID];\n            restoreStep = currentUpload.step || 0;\n            steps = [].concat(_toConsumableArray(_classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors]), _toConsumableArray(_classPrivateFieldLooseBase(this, _uploaders)[_uploaders]), _toConsumableArray(_classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors]));\n            _context.prev = 4;\n            step = restoreStep;\n\n          case 6:\n            if (!(step < steps.length)) {\n              _context.next = 19;\n              break;\n            }\n\n            if (currentUpload) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 19);\n\n          case 9:\n            fn = steps[step];\n            updatedUpload = _objectSpread(_objectSpread({}, currentUpload), {}, {\n              step: step\n            });\n            this.setState({\n              currentUploads: _objectSpread(_objectSpread({}, currentUploads), {}, _defineProperty({}, uploadID, updatedUpload))\n            }); // TODO give this the `updatedUpload` object as its only parameter maybe?\n            // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n\n            _context.next = 14;\n            return fn(updatedUpload.fileIDs, uploadID);\n\n          case 14:\n            // Update currentUpload value in case it was modified asynchronously.\n            currentUploads = this.getState().currentUploads;\n            currentUpload = currentUploads[uploadID];\n\n          case 16:\n            step++;\n            _context.next = 6;\n            break;\n\n          case 19:\n            _context.next = 26;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](4);\n            this.emit('error', _context.t0);\n\n            _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n\n            throw _context.t0;\n\n          case 26:\n            if (!currentUpload) {\n              _context.next = 35;\n              break;\n            }\n\n            // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n            // stuck in the postprocessing UI while the upload is fully complete.\n            // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n            // all, and never mark the postprocessing as complete. This is fine on its own but we\n            // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n            // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n            // before the postprocessing plugins can emit events.\n            //\n            // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n            // postprocessing completion, we do it instead.\n            currentUpload.fileIDs.forEach(function (fileID) {\n              var file = _this12.getFile(fileID);\n\n              if (file && file.progress.postprocess) {\n                _this12.emit('postprocess-complete', file);\n              }\n            });\n            files = currentUpload.fileIDs.map(function (fileID) {\n              return _this12.getFile(fileID);\n            });\n            successful = files.filter(function (file) {\n              return !file.error;\n            });\n            failed = files.filter(function (file) {\n              return file.error;\n            });\n            _context.next = 33;\n            return this.addResultData(uploadID, {\n              successful: successful,\n              failed: failed,\n              uploadID: uploadID\n            });\n\n          case 33:\n            // Update currentUpload value in case it was modified asynchronously.\n            currentUploads = this.getState().currentUploads;\n            currentUpload = currentUploads[uploadID];\n\n          case 35:\n            if (currentUpload) {\n              result = currentUpload.result;\n              this.emit('complete', result);\n\n              _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n            }\n\n            if (result == null) {\n              this.log(\"Not setting result for an upload that has been removed: \".concat(uploadID));\n            }\n\n            return _context.abrupt(\"return\", result);\n\n          case 38:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[4, 21]]);\n  }));\n  return _runUpload3.apply(this, arguments);\n}\n\nUppy.VERSION = \"2.1.1\";\nmodule.exports = Uppy;","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/core/lib/Uppy.js"],"names":["_Symbol$for","_Symbol$for2","_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","Translator","require","ee","nanoid","throttle","prettierBytes","match","DefaultStore","getFileType","getFileNameAndExtension","generateFileID","supportsUploadProgress","getFileName","justErrorsLogger","debugLogger","RestrictionError","args","isRestriction","Error","AggregateError","globalThis","message","errors","AggregateRestrictionError","_plugins","_storeUnsubscribe","_emitter","_preProcessors","_uploaders","_postProcessors","_checkRestrictions","_checkMinNumberOfFiles","_checkRequiredMetaFields","_showOrLogErrorAndThrow","_assertNewUploadAllowed","_checkAndCreateFileStateObject","_startIfAutoProceed","_addListeners","_updateOnlineStatus","_createUpload","_getUpload","_removeUpload","_runUpload","Symbol","for","Uppy","_opts","defineProperty","value","_runUpload2","_removeUpload2","_getUpload2","_createUpload2","_addListeners2","_startIfAutoProceed2","_checkAndCreateFileStateObject2","_assertNewUploadAllowed2","_showOrLogErrorAndThrow2","_checkRequiredMetaFields2","_checkMinNumberOfFiles2","_checkRestrictions2","writable","create","Set","updateOnlineStatus","bind","defaultLocale","strings","addBulkFilesFailed","youCanOnlyUploadX","youHaveToAtLeastSelectX","exceedsSize","missingRequiredMetaField","missingRequiredMetaFieldOnFile","inferiorSize","youCanOnlyUploadFileTypes","noMoreFilesAllowed","noDuplicates","companionError","authAborted","companionUnauthorizeHint","failedToUpload","noInternetConnection","connectedToInternet","noFilesFound","selectX","allFilesFromFolderNamed","openFolderNamed","cancel","logOut","filter","resetFilter","loading","authenticateWithTitle","authenticateWith","signInWithGoogle","searchImages","enterTextToSearch","backToSearch","emptyFolderAdded","folderAlreadyAdded","folderAdded","defaultOptions","autoProceed","allowMultipleUploads","allowMultipleUploadBatches","debug","restrictions","maxFileSize","minFileSize","maxTotalFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","requiredMetaFields","meta","onBeforeFileAdded","currentFile","onBeforeUpload","files","store","logger","infoTimeout","opts","log","constructor","VERSION","Array","isArray","i18nInit","calculateProgress","leading","trailing","setState","plugins","currentUploads","allowNewUpload","capabilities","uploadProgress","individualCancellation","resumableUploads","totalProgress","info","recoveredState","subscribe","prevState","nextState","patch","emit","updateAll","window","event","callback","on","once","off","state","iteratePlugins","plugin","update","getState","fileID","translator","locale","i18n","translate","i18nArray","translateArray","newOpts","setMeta","setOptions","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","keys","forEach","updatedFile","progress","fn","add","delete","data","updatedMeta","newMeta","values","filesObject","error","inProgressFiles","newFiles","file","startedFiles","preprocess","postprocess","uploadStartedFiles","pausedFiles","isPaused","completeFiles","erroredFiles","inProgressNotPausedFiles","processingFiles","isUploadStarted","length","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","some","isGhost","result","err","reason","newFile","type","fileDescriptors","i","push","subError","smart_count","details","fileIDs","updatedUploads","removedFiles","fileIsNotRemoved","uploadFileID","undefined","uploadID","newFileIDs","stateUpdate","calculateTotalProgress","removedFileIDs","join","removeFiles","getFile","wasPaused","setFileState","inProgressUpdatedFiles","filesToRetry","Promise","resolve","successful","failed","forceAllowNewUpload","cancelAll","provider","logout","canHavePercentage","Number","isFinite","bytesTotal","Math","round","getFiles","inProgress","sizedFiles","unsizedFiles","progressMax","currentProgress","reduce","acc","totalSize","averageSize","uploadedSize","online","navigator","onLine","wasOffline","Plugin","msg","pluginId","existsPluginAlready","getPlugin","install","foundPlugin","find","method","flat","instance","uninstall","list","index","findIndex","item","splice","updatedState","reset","removePlugin","removeEventListener","slice","duration","isComplexMessage","setTimeout","hideInfo","warn","reject","currentUpload","_classPrivateFieldLoo","uploader","onBeforeUploadResult","then","catch","currentlyUploadingFiles","flatMap","curr","waitingFileIDs","indexOf","showInformer","isCorrectFileType","replace","extension","toLowerCase","substr","allowedFileTypesString","types","size","totalFilesSize","f","fileName","throwErr","logMessageWithDetails","fileDescriptor","fileType","fileExtension","isRemote","Boolean","checkIfFileAlreadyExists","source","remote","preview","onBeforeFileAddedResult","filesArray","map","scheduledAutoProceed","upload","stack","errorHandler","response","errorMsg","newError","Date","now","uploadResp","mode","uploadURL","addEventListener","step","restoreStep","steps","updatedUpload","addResultData","module","exports"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,WAAJ,EAAiBC,YAAjB;;AAEA,SAASC,2BAAT,CAAqCC,QAArC,EAA+CC,UAA/C,EAA2D;AAAE,MAAI,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,QAArC,EAA+CC,UAA/C,CAAL,EAAiE;AAAE,UAAM,IAAIK,SAAJ,CAAc,gDAAd,CAAN;AAAwE;;AAAC,SAAON,QAAP;AAAkB;;AAE3N,IAAIO,EAAE,GAAG,CAAT;;AAEA,SAASC,0BAAT,CAAoCC,IAApC,EAA0C;AAAE,SAAO,eAAeF,EAAE,EAAjB,GAAsB,GAAtB,GAA4BE,IAAnC;AAA0C;;AAEtF,IAAMC,UAAU,GAAGC,OAAO,CAAC,4BAAD,CAA1B;;AAEA,IAAMC,EAAE,GAAGD,OAAO,CAAC,mBAAD,CAAlB;;AAEA,eAEIA,OAAO,CAAC,QAAD,CAFX;AAAA,IACEE,MADF,YACEA,MADF;;AAIA,IAAMC,QAAQ,GAAGH,OAAO,CAAC,iBAAD,CAAxB;;AAEA,IAAMI,aAAa,GAAGJ,OAAO,CAAC,6BAAD,CAA7B;;AAEA,IAAMK,KAAK,GAAGL,OAAO,CAAC,YAAD,CAArB;;AAEA,IAAMM,YAAY,GAAGN,OAAO,CAAC,qBAAD,CAA5B;;AAEA,IAAMO,WAAW,GAAGP,OAAO,CAAC,6BAAD,CAA3B;;AAEA,IAAMQ,uBAAuB,GAAGR,OAAO,CAAC,yCAAD,CAAvC;;AAEA,IAAMS,cAAc,GAAGT,OAAO,CAAC,gCAAD,CAA9B;;AAEA,IAAMU,sBAAsB,GAAGV,OAAO,CAAC,0BAAD,CAAtC;;AAEA,IAAMW,WAAW,GAAGX,OAAO,CAAC,eAAD,CAA3B;;AAEA,gBAGIA,OAAO,CAAC,WAAD,CAHX;AAAA,IACEY,gBADF,aACEA,gBADF;AAAA,IAEEC,WAFF,aAEEA,WAFF,C,CAG0B;;;IAGpBC,gB;;;;;AACJ,8BAAqB;AAAA;;AAAA;;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACnB,oDAASA,IAAT;AACA,UAAKC,aAAL,GAAqB,IAArB;AAFmB;AAGpB;;;iCAJ4BC,K;;AAQ/B,IAAI,OAAOC,cAAP,KAA0B,WAA9B,EAA2C;AACzC;AACAC,EAAAA,UAAU,CAACD,cAAX;AAAA;;AAAA;;AACE,4BAAYE,OAAZ,EAAqBC,MAArB,EAA6B;AAAA;;AAAA;;AAC3B,kCAAMD,OAAN;AACA,aAAKC,MAAL,GAAcA,MAAd;AAF2B;AAG5B;;AAJH;AAAA,mCAAyDJ,KAAzD;AAOD;;IAEKK,yB;;;;;AACJ,uCAAqB;AAAA;;AAAA;;AAAA,uCAANP,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACnB,uDAASA,IAAT;AACA,WAAKC,aAAL,GAAqB,IAArB;AAFmB;AAGpB;;;EAJqCE,c;AAOxC;AACA;AACA;AACA;AACA;;;AAGA,IAAIK,QAAQ,GAAG,aAAa1B,0BAA0B,CAAC,SAAD,CAAtD;;AAEA,IAAI2B,iBAAiB,GAAG,aAAa3B,0BAA0B,CAAC,kBAAD,CAA/D;;AAEA,IAAI4B,QAAQ,GAAG,aAAa5B,0BAA0B,CAAC,SAAD,CAAtD;;AAEA,IAAI6B,cAAc,GAAG,aAAa7B,0BAA0B,CAAC,eAAD,CAA5D;;AAEA,IAAI8B,UAAU,GAAG,aAAa9B,0BAA0B,CAAC,WAAD,CAAxD;;AAEA,IAAI+B,eAAe,GAAG,aAAa/B,0BAA0B,CAAC,gBAAD,CAA7D;;AAEA,IAAIgC,kBAAkB,GAAG,aAAahC,0BAA0B,CAAC,mBAAD,CAAhE;;AAEA,IAAIiC,sBAAsB,GAAG,aAAajC,0BAA0B,CAAC,uBAAD,CAApE;;AAEA,IAAIkC,wBAAwB,GAAG,aAAalC,0BAA0B,CAAC,yBAAD,CAAtE;;AAEA,IAAImC,uBAAuB,GAAG,aAAanC,0BAA0B,CAAC,wBAAD,CAArE;;AAEA,IAAIoC,uBAAuB,GAAG,aAAapC,0BAA0B,CAAC,wBAAD,CAArE;;AAEA,IAAIqC,8BAA8B,GAAG,aAAarC,0BAA0B,CAAC,+BAAD,CAA5E;;AAEA,IAAIsC,mBAAmB,GAAG,aAAatC,0BAA0B,CAAC,oBAAD,CAAjE;;AAEA,IAAIuC,aAAa,GAAG,aAAavC,0BAA0B,CAAC,cAAD,CAA3D;;AAEA,IAAIwC,mBAAmB,GAAG,aAAaxC,0BAA0B,CAAC,oBAAD,CAAjE;;AAEA,IAAIyC,aAAa,GAAG,aAAazC,0BAA0B,CAAC,cAAD,CAA3D;;AAEA,IAAI0C,UAAU,GAAG,aAAa1C,0BAA0B,CAAC,WAAD,CAAxD;;AAEA,IAAI2C,aAAa,GAAG,aAAa3C,0BAA0B,CAAC,cAAD,CAA3D;;AAEA,IAAI4C,UAAU,GAAG,aAAa5C,0BAA0B,CAAC,WAAD,CAAxD;;AAEAX,WAAW,GAAGwD,MAAM,CAACC,GAAP,CAAW,uBAAX,CAAd;AACAxD,YAAY,GAAGuD,MAAM,CAACC,GAAP,CAAW,yBAAX,CAAf;;IAEMC,I;AACJ;;AAEA;;AAEA;AACF;AACA;AACA;AACA;AACE,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjBtD,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BL,UAA5B,EAAwC;AACtCM,MAAAA,KAAK,EAAEC;AAD+B,KAAxC;AAGAzD,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BN,aAA5B,EAA2C;AACzCO,MAAAA,KAAK,EAAEE;AADkC,KAA3C;AAGA1D,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BP,UAA5B,EAAwC;AACtCQ,MAAAA,KAAK,EAAEG;AAD+B,KAAxC;AAGA3D,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BR,aAA5B,EAA2C;AACzCS,MAAAA,KAAK,EAAEI;AADkC,KAA3C;AAGA5D,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BV,aAA5B,EAA2C;AACzCW,MAAAA,KAAK,EAAEK;AADkC,KAA3C;AAGA7D,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BX,mBAA5B,EAAiD;AAC/CY,MAAAA,KAAK,EAAEM;AADwC,KAAjD;AAGA9D,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BZ,8BAA5B,EAA4D;AAC1Da,MAAAA,KAAK,EAAEO;AADmD,KAA5D;AAGA/D,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4Bb,uBAA5B,EAAqD;AACnDc,MAAAA,KAAK,EAAEQ;AAD4C,KAArD;AAGAhE,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4Bd,uBAA5B,EAAqD;AACnDe,MAAAA,KAAK,EAAES;AAD4C,KAArD;AAGAjE,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4Bf,wBAA5B,EAAsD;AACpDgB,MAAAA,KAAK,EAAEU;AAD6C,KAAtD;AAGAlE,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BhB,sBAA5B,EAAoD;AAClDiB,MAAAA,KAAK,EAAEW;AAD2C,KAApD;AAGAnE,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BjB,kBAA5B,EAAgD;AAC9CkB,MAAAA,KAAK,EAAEY;AADuC,KAAhD;AAGApE,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BvB,QAA5B,EAAsC;AACpCqC,MAAAA,QAAQ,EAAE,IAD0B;AAEpCb,MAAAA,KAAK,EAAExD,MAAM,CAACsE,MAAP,CAAc,IAAd;AAF6B,KAAtC;AAIAtE,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BtB,iBAA5B,EAA+C;AAC7CoC,MAAAA,QAAQ,EAAE,IADmC;AAE7Cb,MAAAA,KAAK,EAAE,KAAK;AAFiC,KAA/C;AAIAxD,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BrB,QAA5B,EAAsC;AACpCmC,MAAAA,QAAQ,EAAE,IAD0B;AAEpCb,MAAAA,KAAK,EAAE9C,EAAE;AAF2B,KAAtC;AAIAV,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BpB,cAA5B,EAA4C;AAC1CkC,MAAAA,QAAQ,EAAE,IADgC;AAE1Cb,MAAAA,KAAK,EAAE,IAAIe,GAAJ;AAFmC,KAA5C;AAIAvE,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BnB,UAA5B,EAAwC;AACtCiC,MAAAA,QAAQ,EAAE,IAD4B;AAEtCb,MAAAA,KAAK,EAAE,IAAIe,GAAJ;AAF+B,KAAxC;AAIAvE,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BlB,eAA5B,EAA6C;AAC3CgC,MAAAA,QAAQ,EAAE,IADiC;AAE3Cb,MAAAA,KAAK,EAAE,IAAIe,GAAJ;AAFoC,KAA7C;AAIAvE,IAAAA,MAAM,CAACuD,cAAP,CAAsB,IAAtB,EAA4BT,mBAA5B,EAAiD;AAC/CuB,MAAAA,QAAQ,EAAE,IADqC;AAE/Cb,MAAAA,KAAK,EAAE,KAAKgB,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B;AAFwC,KAAjD;AAIA,SAAKC,aAAL,GAAqB;AACnBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,kBAAkB,EAAE;AAClB,aAAG,4DADe;AAElB,aAAG;AAFe,SADb;AAKPC,QAAAA,iBAAiB,EAAE;AACjB,aAAG,yCADc;AAEjB,aAAG;AAFc,SALZ;AASPC,QAAAA,uBAAuB,EAAE;AACvB,aAAG,iDADoB;AAEvB,aAAG;AAFoB,SATlB;AAaPC,QAAAA,WAAW,EAAE,iDAbN;AAcPC,QAAAA,wBAAwB,EAAE,8BAdnB;AAePC,QAAAA,8BAA8B,EAAE,6CAfzB;AAgBPC,QAAAA,YAAY,EAAE,uDAhBP;AAiBPC,QAAAA,yBAAyB,EAAE,+BAjBpB;AAkBPC,QAAAA,kBAAkB,EAAE,uBAlBb;AAmBPC,QAAAA,YAAY,EAAE,kEAnBP;AAoBPC,QAAAA,cAAc,EAAE,kCApBT;AAqBPC,QAAAA,WAAW,EAAE,wBArBN;AAsBPC,QAAAA,wBAAwB,EAAE,iEAtBnB;AAuBPC,QAAAA,cAAc,EAAE,0BAvBT;AAwBPC,QAAAA,oBAAoB,EAAE,wBAxBf;AAyBPC,QAAAA,mBAAmB,EAAE,2BAzBd;AA0BP;AACAC,QAAAA,YAAY,EAAE,mCA3BP;AA4BPC,QAAAA,OAAO,EAAE;AACP,aAAG,uBADI;AAEP,aAAG;AAFI,SA5BF;AAgCPC,QAAAA,uBAAuB,EAAE,+BAhClB;AAiCPC,QAAAA,eAAe,EAAE,qBAjCV;AAkCPC,QAAAA,MAAM,EAAE,QAlCD;AAmCPC,QAAAA,MAAM,EAAE,SAnCD;AAoCPC,QAAAA,MAAM,EAAE,QApCD;AAqCPC,QAAAA,WAAW,EAAE,cArCN;AAsCPC,QAAAA,OAAO,EAAE,YAtCF;AAuCPC,QAAAA,qBAAqB,EAAE,wDAvChB;AAwCPC,QAAAA,gBAAgB,EAAE,0BAxCX;AAyCPC,QAAAA,gBAAgB,EAAE,qBAzCX;AA0CPC,QAAAA,YAAY,EAAE,mBA1CP;AA2CPC,QAAAA,iBAAiB,EAAE,iCA3CZ;AA4CPC,QAAAA,YAAY,EAAE,gBA5CP;AA6CPC,QAAAA,gBAAgB,EAAE,uCA7CX;AA8CPC,QAAAA,kBAAkB,EAAE,0CA9Cb;AA+CPC,QAAAA,WAAW,EAAE;AACX,aAAG,0CADQ;AAEX,aAAG;AAFQ;AA/CN;AADU,KAArB;AAsDA,QAAMC,cAAc,GAAG;AACrBzG,MAAAA,EAAE,EAAE,MADiB;AAErB0G,MAAAA,WAAW,EAAE,KAFQ;;AAIrB;AACN;AACA;AACMC,MAAAA,oBAAoB,EAAE,IAPD;AAQrBC,MAAAA,0BAA0B,EAAE,IARP;AASrBC,MAAAA,KAAK,EAAE,KATc;AAUrBC,MAAAA,YAAY,EAAE;AACZC,QAAAA,WAAW,EAAE,IADD;AAEZC,QAAAA,WAAW,EAAE,IAFD;AAGZC,QAAAA,gBAAgB,EAAE,IAHN;AAIZC,QAAAA,gBAAgB,EAAE,IAJN;AAKZC,QAAAA,gBAAgB,EAAE,IALN;AAMZC,QAAAA,gBAAgB,EAAE,IANN;AAOZC,QAAAA,kBAAkB,EAAE;AAPR,OAVO;AAmBrBC,MAAAA,IAAI,EAAE,EAnBe;AAoBrBC,MAAAA,iBAAiB,EAAE,2BAAAC,WAAW;AAAA,eAAIA,WAAJ;AAAA,OApBT;AAqBrBC,MAAAA,cAAc,EAAE,wBAAAC,KAAK;AAAA,eAAIA,KAAJ;AAAA,OArBA;AAsBrBC,MAAAA,KAAK,EAAEjH,YAAY,EAtBE;AAuBrBkH,MAAAA,MAAM,EAAE5G,gBAvBa;AAwBrB6G,MAAAA,WAAW,EAAE;AAxBQ,KAAvB,CAvHiB,CAgJd;AACH;;AAEA,SAAKC,IAAL,iDAAiBrB,cAAjB,GACKxD,KADL;AAEE6D,MAAAA,YAAY,kCAAOL,cAAc,CAACK,YAAtB,GACN7D,KAAK,IAAIA,KAAK,CAAC6D,YADT;AAFd,OAnJiB,CAwJd;AACH;;AAEA,QAAI7D,KAAK,IAAIA,KAAK,CAAC2E,MAAf,IAAyB3E,KAAK,CAAC4D,KAAnC,EAA0C;AACxC,WAAKkB,GAAL,CAAS,2KAAT,EAAsL,SAAtL;AACD,KAFD,MAEO,IAAI9E,KAAK,IAAIA,KAAK,CAAC4D,KAAnB,EAA0B;AAC/B,WAAKiB,IAAL,CAAUF,MAAV,GAAmB3G,WAAnB;AACD;;AAED,SAAK8G,GAAL,uBAAwB,KAAKC,WAAL,CAAiBC,OAAzC;;AAEA,QAAI,KAAKH,IAAL,CAAUhB,YAAV,CAAuBM,gBAAvB,IAA2C,KAAKU,IAAL,CAAUhB,YAAV,CAAuBM,gBAAvB,KAA4C,IAAvF,IAA+F,CAACc,KAAK,CAACC,OAAN,CAAc,KAAKL,IAAL,CAAUhB,YAAV,CAAuBM,gBAArC,CAApG,EAA4J;AAC1J,YAAM,IAAIrH,SAAJ,CAAc,kDAAd,CAAN;AACD;;AAED,SAAKqI,QAAL,GAvKiB,CAuKA;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAKC,iBAAL,GAAyB9H,QAAQ,CAAC,KAAK8H,iBAAL,CAAuBjE,IAAvB,CAA4B,IAA5B,CAAD,EAAoC,GAApC,EAAyC;AACxEkE,MAAAA,OAAO,EAAE,IAD+D;AAExEC,MAAAA,QAAQ,EAAE;AAF8D,KAAzC,CAAjC;AAIA,SAAKZ,KAAL,GAAa,KAAKG,IAAL,CAAUH,KAAvB;AACA,SAAKa,QAAL,CAAc;AACZC,MAAAA,OAAO,EAAE,EADG;AAEZf,MAAAA,KAAK,EAAE,EAFK;AAGZgB,MAAAA,cAAc,EAAE,EAHJ;AAIZC,MAAAA,cAAc,EAAE,IAJJ;AAKZC,MAAAA,YAAY,EAAE;AACZC,QAAAA,cAAc,EAAE/H,sBAAsB,EAD1B;AAEZgI,QAAAA,sBAAsB,EAAE,IAFZ;AAGZC,QAAAA,gBAAgB,EAAE;AAHN,OALF;AAUZC,MAAAA,aAAa,EAAE,CAVH;AAWZ1B,MAAAA,IAAI,oBAAO,KAAKQ,IAAL,CAAUR,IAAjB,CAXQ;AAaZ2B,MAAAA,IAAI,EAAE,EAbM;AAcZC,MAAAA,cAAc,EAAE;AAdJ,KAAd;AAgBA1J,IAAAA,2BAA2B,CAAC,IAAD,EAAOoC,iBAAP,CAA3B,CAAqDA,iBAArD,IAA0E,KAAK+F,KAAL,CAAWwB,SAAX,CAAqB,UAACC,SAAD,EAAYC,SAAZ,EAAuBC,KAAvB,EAAiC;AAC9H,MAAA,MAAI,CAACC,IAAL,CAAU,cAAV,EAA0BH,SAA1B,EAAqCC,SAArC,EAAgDC,KAAhD;;AACA,MAAA,MAAI,CAACE,SAAL,CAAeH,SAAf;AACD,KAHyE,CAA1E,CApMiB,CAuMb;;AAEJ,QAAI,KAAKvB,IAAL,CAAUjB,KAAV,IAAmB,OAAO4C,MAAP,KAAkB,WAAzC,EAAsD;AACpDA,MAAAA,MAAM,CAAC,KAAK3B,IAAL,CAAU9H,EAAX,CAAN,GAAuB,IAAvB;AACD;;AAEDR,IAAAA,2BAA2B,CAAC,IAAD,EAAOgD,aAAP,CAA3B,CAAiDA,aAAjD;AACD;;;;WAED,cAAKkH,KAAL,EAAqB;AAAA;;AAAA,yCAANvI,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACnB,gCAAA3B,2BAA2B,CAAC,IAAD,EAAOqC,QAAP,CAA3B,CAA4CA,QAA5C,GAAsD0H,IAAtD,gCAA2DG,KAA3D,SAAqEvI,IAArE;AACD;;;WAED,YAAGuI,KAAH,EAAUC,QAAV,EAAoB;AAClBnK,MAAAA,2BAA2B,CAAC,IAAD,EAAOqC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsD+H,EAAtD,CAAyDF,KAAzD,EAAgEC,QAAhE;;AAEA,aAAO,IAAP;AACD;;;WAED,cAAKD,KAAL,EAAYC,QAAZ,EAAsB;AACpBnK,MAAAA,2BAA2B,CAAC,IAAD,EAAOqC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDgI,IAAtD,CAA2DH,KAA3D,EAAkEC,QAAlE;;AAEA,aAAO,IAAP;AACD;;;WAED,aAAID,KAAJ,EAAWC,QAAX,EAAqB;AACnBnK,MAAAA,2BAA2B,CAAC,IAAD,EAAOqC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDiI,GAAtD,CAA0DJ,KAA1D,EAAiEC,QAAjE;;AAEA,aAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;;WAGE,mBAAUI,KAAV,EAAiB;AACf,WAAKC,cAAL,CAAoB,UAAAC,MAAM,EAAI;AAC5BA,QAAAA,MAAM,CAACC,MAAP,CAAcH,KAAd;AACD,OAFD;AAGD;AACD;AACF;AACA;AACA;AACA;;;;WAGE,kBAAST,KAAT,EAAgB;AACd,WAAK3B,KAAL,CAAWa,QAAX,CAAoBc,KAApB;AACD;AACD;AACF;AACA;AACA;AACA;;;;WAGE,oBAAW;AACT,aAAO,KAAK3B,KAAL,CAAWwC,QAAX,EAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;;SAGE,eAAY;AACV;AACA,aAAO,KAAKA,QAAL,EAAP;AACD;AACD;AACF;AACA;;;;WAGE,sBAAaC,MAAb,EAAqBL,KAArB,EAA4B;AAC1B,UAAI,CAAC,KAAKI,QAAL,GAAgBzC,KAAhB,CAAsB0C,MAAtB,CAAL,EAAoC;AAClC,cAAM,IAAI/I,KAAJ,oCAAiC+I,MAAjC,yCAAN;AACD;;AAED,WAAK5B,QAAL,CAAc;AACZd,QAAAA,KAAK,kCAAO,KAAKyC,QAAL,GAAgBzC,KAAvB,2BACF0C,MADE,kCACY,KAAKD,QAAL,GAAgBzC,KAAhB,CAAsB0C,MAAtB,CADZ,GAEEL,KAFF;AADO,OAAd;AAOD;;;WAED,oBAAW;AACT,UAAMM,UAAU,GAAG,IAAIlK,UAAJ,CAAe,CAAC,KAAKkE,aAAN,EAAqB,KAAKyD,IAAL,CAAUwC,MAA/B,CAAf,CAAnB;AACA,WAAKC,IAAL,GAAYF,UAAU,CAACG,SAAX,CAAqBpG,IAArB,CAA0BiG,UAA1B,CAAZ;AACA,WAAKI,SAAL,GAAiBJ,UAAU,CAACK,cAAX,CAA0BtG,IAA1B,CAA+BiG,UAA/B,CAAjB;AACA,WAAKC,MAAL,GAAcD,UAAU,CAACC,MAAzB;AACD;;;WAED,oBAAWK,OAAX,EAAoB;AAClB,WAAK7C,IAAL,iDAAiB,KAAKA,IAAtB,GACK6C,OADL;AAEE7D,QAAAA,YAAY,kCAAO,KAAKgB,IAAL,CAAUhB,YAAjB,GACN6D,OAAO,IAAIA,OAAO,CAAC7D,YADb;AAFd;;AAOA,UAAI6D,OAAO,CAACrD,IAAZ,EAAkB;AAChB,aAAKsD,OAAL,CAAaD,OAAO,CAACrD,IAArB;AACD;;AAED,WAAKc,QAAL;;AAEA,UAAIuC,OAAO,CAACL,MAAZ,EAAoB;AAClB,aAAKN,cAAL,CAAoB,UAAAC,MAAM,EAAI;AAC5BA,UAAAA,MAAM,CAACY,UAAP;AACD,SAFD;AAGD,OAlBiB,CAkBhB;;;AAGF,WAAKrC,QAAL,GArBkB,CAqBD;AAClB;;;WAED,yBAAgB;AACd,UAAMsC,eAAe,GAAG;AACtBC,QAAAA,UAAU,EAAE,CADU;AAEtBC,QAAAA,aAAa,EAAE,CAFO;AAGtBC,QAAAA,cAAc,EAAE,KAHM;AAItBC,QAAAA,aAAa,EAAE;AAJO,OAAxB;;AAMA,UAAMxD,KAAK,qBAAQ,KAAKyC,QAAL,GAAgBzC,KAAxB,CAAX;;AAEA,UAAMyD,YAAY,GAAG,EAArB;AACAxL,MAAAA,MAAM,CAACyL,IAAP,CAAY1D,KAAZ,EAAmB2D,OAAnB,CAA2B,UAAAjB,MAAM,EAAI;AACnC,YAAMkB,WAAW,qBAAQ5D,KAAK,CAAC0C,MAAD,CAAb,CAAjB;;AAEAkB,QAAAA,WAAW,CAACC,QAAZ,mCAA4BD,WAAW,CAACC,QAAxC,GACKT,eADL;AAGAK,QAAAA,YAAY,CAACf,MAAD,CAAZ,GAAuBkB,WAAvB;AACD,OAPD;AAQA,WAAK9C,QAAL,CAAc;AACZd,QAAAA,KAAK,EAAEyD,YADK;AAEZnC,QAAAA,aAAa,EAAE;AAFH,OAAd;AAIA,WAAKO,IAAL,CAAU,gBAAV;AACD;;;WAED,yBAAgBiC,EAAhB,EAAoB;AAClBhM,MAAAA,2BAA2B,CAAC,IAAD,EAAOsC,cAAP,CAA3B,CAAkDA,cAAlD,EAAkE2J,GAAlE,CAAsED,EAAtE;AACD;;;WAED,4BAAmBA,EAAnB,EAAuB;AACrB,aAAOhM,2BAA2B,CAAC,IAAD,EAAOsC,cAAP,CAA3B,CAAkDA,cAAlD,EAAkE4J,MAAlE,CAAyEF,EAAzE,CAAP;AACD;;;WAED,0BAAiBA,EAAjB,EAAqB;AACnBhM,MAAAA,2BAA2B,CAAC,IAAD,EAAOwC,eAAP,CAA3B,CAAmDA,eAAnD,EAAoEyJ,GAApE,CAAwED,EAAxE;AACD;;;WAED,6BAAoBA,EAApB,EAAwB;AACtB,aAAOhM,2BAA2B,CAAC,IAAD,EAAOwC,eAAP,CAA3B,CAAmDA,eAAnD,EAAoE0J,MAApE,CAA2EF,EAA3E,CAAP;AACD;;;WAED,qBAAYA,EAAZ,EAAgB;AACdhM,MAAAA,2BAA2B,CAAC,IAAD,EAAOuC,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D0J,GAA1D,CAA8DD,EAA9D;AACD;;;WAED,wBAAeA,EAAf,EAAmB;AACjB,aAAOhM,2BAA2B,CAAC,IAAD,EAAOuC,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D2J,MAA1D,CAAiEF,EAAjE,CAAP;AACD;;;WAED,iBAAQG,IAAR,EAAc;AACZ,UAAMC,WAAW,mCAAQ,KAAKzB,QAAL,GAAgB7C,IAAxB,GACZqE,IADY,CAAjB;;AAGA,UAAMR,YAAY,qBAAQ,KAAKhB,QAAL,GAAgBzC,KAAxB,CAAlB;;AAEA/H,MAAAA,MAAM,CAACyL,IAAP,CAAYD,YAAZ,EAA0BE,OAA1B,CAAkC,UAAAjB,MAAM,EAAI;AAC1Ce,QAAAA,YAAY,CAACf,MAAD,CAAZ,mCAA4Be,YAAY,CAACf,MAAD,CAAxC;AACE9C,UAAAA,IAAI,kCAAO6D,YAAY,CAACf,MAAD,CAAZ,CAAqB9C,IAA5B,GACCqE,IADD;AADN;AAKD,OAND;AAOA,WAAK5D,GAAL,CAAS,kBAAT;AACA,WAAKA,GAAL,CAAS4D,IAAT;AACA,WAAKnD,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAEsE,WADM;AAEZlE,QAAAA,KAAK,EAAEyD;AAFK,OAAd;AAID;;;WAED,qBAAYf,MAAZ,EAAoBuB,IAApB,EAA0B;AACxB,UAAMR,YAAY,qBAAQ,KAAKhB,QAAL,GAAgBzC,KAAxB,CAAlB;;AAGA,UAAI,CAACyD,YAAY,CAACf,MAAD,CAAjB,EAA2B;AACzB,aAAKrC,GAAL,CAAS,+DAAT,EAA0EqC,MAA1E;AACA;AACD;;AAED,UAAMyB,OAAO,mCAAQV,YAAY,CAACf,MAAD,CAAZ,CAAqB9C,IAA7B,GACRqE,IADQ,CAAb;;AAGAR,MAAAA,YAAY,CAACf,MAAD,CAAZ,mCAA4Be,YAAY,CAACf,MAAD,CAAxC;AACE9C,QAAAA,IAAI,EAAEuE;AADR;AAGA,WAAKrD,QAAL,CAAc;AACZd,QAAAA,KAAK,EAAEyD;AADK,OAAd;AAGD;AACD;AACF;AACA;AACA;AACA;;;;WAGE,iBAAQf,MAAR,EAAgB;AACd,aAAO,KAAKD,QAAL,GAAgBzC,KAAhB,CAAsB0C,MAAtB,CAAP;AACD;AACD;AACF;AACA;;;;WAGE,oBAAW;AACT,2BAEI,KAAKD,QAAL,EAFJ;AAAA,UACEzC,KADF,kBACEA,KADF;;AAGA,aAAO/H,MAAM,CAACmM,MAAP,CAAcpE,KAAd,CAAP;AACD;;;WAED,oCAA2B;AACzB,4BAII,KAAKyC,QAAL,EAJJ;AAAA,UACS4B,WADT,mBACErE,KADF;AAAA,UAEEsB,aAFF,mBAEEA,aAFF;AAAA,UAGEgD,KAHF,mBAGEA,KAHF;;AAKA,UAAMtE,KAAK,GAAG/H,MAAM,CAACmM,MAAP,CAAcC,WAAd,CAAd;AACA,UAAME,eAAe,GAAGvE,KAAK,CAAC7B,MAAN,CAAa;AAAA,YACnC0F,QADmC,QACnCA,QADmC;AAAA,eAE/B,CAACA,QAAQ,CAACN,cAAV,IAA4BM,QAAQ,CAACL,aAFN;AAAA,OAAb,CAAxB;AAGA,UAAMgB,QAAQ,GAAGxE,KAAK,CAAC7B,MAAN,CAAa,UAAAsG,IAAI;AAAA,eAAI,CAACA,IAAI,CAACZ,QAAL,CAAcL,aAAnB;AAAA,OAAjB,CAAjB;AACA,UAAMkB,YAAY,GAAG1E,KAAK,CAAC7B,MAAN,CAAa,UAAAsG,IAAI;AAAA,eAAIA,IAAI,CAACZ,QAAL,CAAcL,aAAd,IAA+BiB,IAAI,CAACZ,QAAL,CAAcc,UAA7C,IAA2DF,IAAI,CAACZ,QAAL,CAAce,WAA7E;AAAA,OAAjB,CAArB;AACA,UAAMC,kBAAkB,GAAG7E,KAAK,CAAC7B,MAAN,CAAa,UAAAsG,IAAI;AAAA,eAAIA,IAAI,CAACZ,QAAL,CAAcL,aAAlB;AAAA,OAAjB,CAA3B;AACA,UAAMsB,WAAW,GAAG9E,KAAK,CAAC7B,MAAN,CAAa,UAAAsG,IAAI;AAAA,eAAIA,IAAI,CAACM,QAAT;AAAA,OAAjB,CAApB;AACA,UAAMC,aAAa,GAAGhF,KAAK,CAAC7B,MAAN,CAAa,UAAAsG,IAAI;AAAA,eAAIA,IAAI,CAACZ,QAAL,CAAcN,cAAlB;AAAA,OAAjB,CAAtB;AACA,UAAM0B,YAAY,GAAGjF,KAAK,CAAC7B,MAAN,CAAa,UAAAsG,IAAI;AAAA,eAAIA,IAAI,CAACH,KAAT;AAAA,OAAjB,CAArB;AACA,UAAMY,wBAAwB,GAAGX,eAAe,CAACpG,MAAhB,CAAuB,UAAAsG,IAAI;AAAA,eAAI,CAACA,IAAI,CAACM,QAAV;AAAA,OAA3B,CAAjC;AACA,UAAMI,eAAe,GAAGnF,KAAK,CAAC7B,MAAN,CAAa,UAAAsG,IAAI;AAAA,eAAIA,IAAI,CAACZ,QAAL,CAAcc,UAAd,IAA4BF,IAAI,CAACZ,QAAL,CAAce,WAA9C;AAAA,OAAjB,CAAxB;AACA,aAAO;AACLJ,QAAAA,QAAQ,EAARA,QADK;AAELE,QAAAA,YAAY,EAAZA,YAFK;AAGLG,QAAAA,kBAAkB,EAAlBA,kBAHK;AAILC,QAAAA,WAAW,EAAXA,WAJK;AAKLE,QAAAA,aAAa,EAAbA,aALK;AAMLC,QAAAA,YAAY,EAAZA,YANK;AAOLV,QAAAA,eAAe,EAAfA,eAPK;AAQLW,QAAAA,wBAAwB,EAAxBA,wBARK;AASLC,QAAAA,eAAe,EAAfA,eATK;AAULC,QAAAA,eAAe,EAAEP,kBAAkB,CAACQ,MAAnB,GAA4B,CAVxC;AAWLC,QAAAA,aAAa,EAAEhE,aAAa,KAAK,GAAlB,IAAyB0D,aAAa,CAACK,MAAd,KAAyBrF,KAAK,CAACqF,MAAxD,IAAkEF,eAAe,CAACE,MAAhB,KAA2B,CAXvG;AAYLE,QAAAA,YAAY,EAAE,CAAC,CAACjB,KAAF,IAAWW,YAAY,CAACI,MAAb,KAAwBrF,KAAK,CAACqF,MAZlD;AAaLG,QAAAA,WAAW,EAAEjB,eAAe,CAACc,MAAhB,KAA2B,CAA3B,IAAgCP,WAAW,CAACO,MAAZ,KAAuBd,eAAe,CAACc,MAb/E;AAcLI,QAAAA,kBAAkB,EAAElB,eAAe,CAACc,MAAhB,GAAyB,CAdxC;AAeLK,QAAAA,WAAW,EAAE1F,KAAK,CAAC2F,IAAN,CAAW,UAAAlB,IAAI;AAAA,iBAAIA,IAAI,CAACmB,OAAT;AAAA,SAAf;AAfR,OAAP;AAiBD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,8BAAqBnB,IAArB,EAA2BzE,KAA3B,EAAkC;AAChC,UAAI;AACFlI,QAAAA,2BAA2B,CAAC,IAAD,EAAOyC,kBAAP,CAA3B,CAAsDA,kBAAtD,EAA0EkK,IAA1E,EAAgFzE,KAAhF;;AAEA,eAAO;AACL6F,UAAAA,MAAM,EAAE;AADH,SAAP;AAGD,OAND,CAME,OAAOC,GAAP,EAAY;AACZ,eAAO;AACLD,UAAAA,MAAM,EAAE,KADH;AAELE,UAAAA,MAAM,EAAED,GAAG,CAAChM;AAFP,SAAP;AAID;AACF;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,kCAAyB4I,MAAzB,EAAiC;AAC/B,4BAEI,KAAKD,QAAL,EAFJ;AAAA,UACEzC,KADF,mBACEA,KADF;;AAIA,UAAIA,KAAK,CAAC0C,MAAD,CAAL,IAAiB,CAAC1C,KAAK,CAAC0C,MAAD,CAAL,CAAckD,OAApC,EAA6C;AAC3C,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,iBAAQnB,IAAR,EAAc;AACZ3M,MAAAA,2BAA2B,CAAC,IAAD,EAAO6C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoF8J,IAApF;;AAEA,4BAEI,KAAKhC,QAAL,EAFJ;AAAA,UACEzC,KADF,mBACEA,KADF;;AAIA,UAAIgG,OAAO,GAAGlO,2BAA2B,CAAC,IAAD,EAAO8C,8BAAP,CAA3B,CAAkEA,8BAAlE,EAAkGoF,KAAlG,EAAyGyE,IAAzG,CAAd,CAPY,CAOkH;AAC9H;;;AAGA,UAAIzE,KAAK,CAACgG,OAAO,CAAC1N,EAAT,CAAL,IAAqB0H,KAAK,CAACgG,OAAO,CAAC1N,EAAT,CAAL,CAAkBsN,OAA3C,EAAoD;AAClDI,QAAAA,OAAO,mCAAQhG,KAAK,CAACgG,OAAO,CAAC1N,EAAT,CAAb;AACL2L,UAAAA,IAAI,EAAEQ,IAAI,CAACR,IADN;AAEL2B,UAAAA,OAAO,EAAE;AAFJ,UAAP;AAIA,aAAKvF,GAAL,yDAA0D2F,OAAO,CAACxN,IAAlE,eAA2EwN,OAAO,CAAC1N,EAAnF;AACD;;AAED,WAAKwI,QAAL,CAAc;AACZd,QAAAA,KAAK,kCAAOA,KAAP,2BACFgG,OAAO,CAAC1N,EADN,EACW0N,OADX;AADO,OAAd;AAKA,WAAKnE,IAAL,CAAU,YAAV,EAAwBmE,OAAxB;AACA,WAAKnE,IAAL,CAAU,aAAV,EAAyB,CAACmE,OAAD,CAAzB;AACA,WAAK3F,GAAL,uBAAwB2F,OAAO,CAACxN,IAAhC,eAAyCwN,OAAO,CAAC1N,EAAjD,0BAAmE0N,OAAO,CAACC,IAA3E;;AAEAnO,MAAAA,2BAA2B,CAAC,IAAD,EAAO+C,mBAAP,CAA3B,CAAuDA,mBAAvD;;AAEA,aAAOmL,OAAO,CAAC1N,EAAf;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;;WAGE,kBAAS4N,eAAT,EAA0B;AAAA;;AACxBpO,MAAAA,2BAA2B,CAAC,IAAD,EAAO6C,uBAAP,CAA3B,CAA2DA,uBAA3D,IADwB,CAC+D;;;AAGvF,UAAMqF,KAAK,qBAAQ,KAAKyC,QAAL,GAAgBzC,KAAxB,CAAX;;AAEA,UAAMwE,QAAQ,GAAG,EAAjB;AACA,UAAMzK,MAAM,GAAG,EAAf;;AAEA,WAAK,IAAIoM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,eAAe,CAACb,MAApC,EAA4Cc,CAAC,EAA7C,EAAiD;AAC/C,YAAI;AACF,cAAIH,OAAO,GAAGlO,2BAA2B,CAAC,IAAD,EAAO8C,8BAAP,CAA3B,CAAkEA,8BAAlE,EAAkGoF,KAAlG,EAAyGkG,eAAe,CAACC,CAAD,CAAxH,CAAd,CADE,CAC0I;AAC5I;;;AAGA,cAAInG,KAAK,CAACgG,OAAO,CAAC1N,EAAT,CAAL,IAAqB0H,KAAK,CAACgG,OAAO,CAAC1N,EAAT,CAAL,CAAkBsN,OAA3C,EAAoD;AAClDI,YAAAA,OAAO,mCAAQhG,KAAK,CAACgG,OAAO,CAAC1N,EAAT,CAAb;AACL2L,cAAAA,IAAI,EAAEiC,eAAe,CAACC,CAAD,CAAf,CAAmBlC,IADpB;AAEL2B,cAAAA,OAAO,EAAE;AAFJ,cAAP;AAIA,iBAAKvF,GAAL,0CAA2C2F,OAAO,CAACxN,IAAnD,eAA4DwN,OAAO,CAAC1N,EAApE;AACD;;AAED0H,UAAAA,KAAK,CAACgG,OAAO,CAAC1N,EAAT,CAAL,GAAoB0N,OAApB;AACAxB,UAAAA,QAAQ,CAAC4B,IAAT,CAAcJ,OAAd;AACD,SAfD,CAeE,OAAOF,GAAP,EAAY;AACZ,cAAI,CAACA,GAAG,CAACpM,aAAT,EAAwB;AACtBK,YAAAA,MAAM,CAACqM,IAAP,CAAYN,GAAZ;AACD;AACF;AACF;;AAED,WAAKhF,QAAL,CAAc;AACZd,QAAAA,KAAK,EAALA;AADY,OAAd;AAGAwE,MAAAA,QAAQ,CAACb,OAAT,CAAiB,UAAAqC,OAAO,EAAI;AAC1B,QAAA,MAAI,CAACnE,IAAL,CAAU,YAAV,EAAwBmE,OAAxB;AACD,OAFD;AAGA,WAAKnE,IAAL,CAAU,aAAV,EAAyB2C,QAAzB;;AAEA,UAAIA,QAAQ,CAACa,MAAT,GAAkB,CAAtB,EAAyB;AACvB,aAAKhF,GAAL,0BAA2BmE,QAAQ,CAACa,MAApC;AACD,OAFD,MAEO;AACLpN,QAAAA,MAAM,CAACyL,IAAP,CAAYc,QAAZ,EAAsBb,OAAtB,CAA8B,UAAAjB,MAAM,EAAI;AACtC,UAAA,MAAI,CAACrC,GAAL,uBAAwBmE,QAAQ,CAAC9B,MAAD,CAAR,CAAiBlK,IAAzC,oBAAuDgM,QAAQ,CAAC9B,MAAD,CAAR,CAAiBpK,EAAxE,sBAAsFkM,QAAQ,CAAC9B,MAAD,CAAR,CAAiBuD,IAAvG;AACD,SAFD;AAGD;;AAED,UAAIzB,QAAQ,CAACa,MAAT,GAAkB,CAAtB,EAAyB;AACvBvN,QAAAA,2BAA2B,CAAC,IAAD,EAAO+C,mBAAP,CAA3B,CAAuDA,mBAAvD;AACD;;AAED,UAAId,MAAM,CAACsL,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAIvL,OAAO,GAAG,gDAAd;AACAC,QAAAA,MAAM,CAAC4J,OAAP,CAAe,UAAA0C,QAAQ,EAAI;AACzBvM,UAAAA,OAAO,mBAAYuM,QAAQ,CAACvM,OAArB,CAAP;AACD,SAFD;AAGA,aAAKyH,IAAL,CAAU;AACRzH,UAAAA,OAAO,EAAE,KAAK+I,IAAL,CAAU,oBAAV,EAAgC;AACvCyD,YAAAA,WAAW,EAAEvM,MAAM,CAACsL;AADmB,WAAhC,CADD;AAIRkB,UAAAA,OAAO,EAAEzM;AAJD,SAAV,EAKG,OALH,EAKY,KAAKsG,IAAL,CAAUD,WALtB;;AAOA,YAAI,OAAOvG,cAAP,KAA0B,UAA9B,EAA0C;AACxC,gBAAM,IAAIA,cAAJ,CAAmBG,MAAnB,EAA2BD,OAA3B,CAAN;AACD,SAFD,MAEO;AACL,cAAMgM,GAAG,GAAG,IAAInM,KAAJ,CAAUG,OAAV,CAAZ;AACAgM,UAAAA,GAAG,CAAC/L,MAAJ,GAAaA,MAAb;AACA,gBAAM+L,GAAN;AACD;AACF;AACF;;;WAED,qBAAYU,OAAZ,EAAqBT,MAArB,EAA6B;AAAA;;AAC3B,4BAGI,KAAKtD,QAAL,EAHJ;AAAA,UACEzC,KADF,mBACEA,KADF;AAAA,UAEEgB,cAFF,mBAEEA,cAFF;;AAIA,UAAMyC,YAAY,qBAAQzD,KAAR,CAAlB;;AAEA,UAAMyG,cAAc,qBAAQzF,cAAR,CAApB;;AAEA,UAAM0F,YAAY,GAAGzO,MAAM,CAACsE,MAAP,CAAc,IAAd,CAArB;AACAiK,MAAAA,OAAO,CAAC7C,OAAR,CAAgB,UAAAjB,MAAM,EAAI;AACxB,YAAI1C,KAAK,CAAC0C,MAAD,CAAT,EAAmB;AACjBgE,UAAAA,YAAY,CAAChE,MAAD,CAAZ,GAAuB1C,KAAK,CAAC0C,MAAD,CAA5B;AACA,iBAAOe,YAAY,CAACf,MAAD,CAAnB;AACD;AACF,OALD,EAV2B,CAevB;;AAEJ,eAASiE,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC,eAAOF,YAAY,CAACE,YAAD,CAAZ,KAA+BC,SAAtC;AACD;;AAED5O,MAAAA,MAAM,CAACyL,IAAP,CAAY+C,cAAZ,EAA4B9C,OAA5B,CAAoC,UAAAmD,QAAQ,EAAI;AAC9C,YAAMC,UAAU,GAAG/F,cAAc,CAAC8F,QAAD,CAAd,CAAyBN,OAAzB,CAAiCrI,MAAjC,CAAwCwI,gBAAxC,CAAnB,CAD8C,CACgC;;AAE9E,YAAII,UAAU,CAAC1B,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,iBAAOoB,cAAc,CAACK,QAAD,CAArB;AACA;AACD;;AAEDL,QAAAA,cAAc,CAACK,QAAD,CAAd,mCAAgC9F,cAAc,CAAC8F,QAAD,CAA9C;AACEN,UAAAA,OAAO,EAAEO;AADX;AAGD,OAXD;AAYA,UAAMC,WAAW,GAAG;AAClBhG,QAAAA,cAAc,EAAEyF,cADE;AAElBzG,QAAAA,KAAK,EAAEyD;AAFW,OAApB,CAjC2B,CAoCxB;AACH;;AAEA,UAAIxL,MAAM,CAACyL,IAAP,CAAYD,YAAZ,EAA0B4B,MAA1B,KAAqC,CAAzC,EAA4C;AAC1C2B,QAAAA,WAAW,CAAC/F,cAAZ,GAA6B,IAA7B;AACA+F,QAAAA,WAAW,CAAC1C,KAAZ,GAAoB,IAApB;AACA0C,QAAAA,WAAW,CAACxF,cAAZ,GAA6B,IAA7B;AACD;;AAED,WAAKV,QAAL,CAAckG,WAAd;AACA,WAAKC,sBAAL;AACA,UAAMC,cAAc,GAAGjP,MAAM,CAACyL,IAAP,CAAYgD,YAAZ,CAAvB;AACAQ,MAAAA,cAAc,CAACvD,OAAf,CAAuB,UAAAjB,MAAM,EAAI;AAC/B,QAAA,MAAI,CAACb,IAAL,CAAU,cAAV,EAA0B6E,YAAY,CAAChE,MAAD,CAAtC,EAAgDqD,MAAhD;AACD,OAFD;;AAIA,UAAImB,cAAc,CAAC7B,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,aAAKhF,GAAL,mBAAoB6G,cAAc,CAAC7B,MAAnC;AACD,OAFD,MAEO;AACL,aAAKhF,GAAL,0BAA2B6G,cAAc,CAACC,IAAf,CAAoB,IAApB,CAA3B;AACD;AACF;;;WAED,oBAAWzE,MAAX,EAAkC;AAAA,UAAfqD,MAAe,uEAAN,IAAM;AAChC,WAAKqB,WAAL,CAAiB,CAAC1E,MAAD,CAAjB,EAA2BqD,MAA3B;AACD;;;WAED,qBAAYrD,MAAZ,EAAoB;AAClB,UAAI,CAAC,KAAKD,QAAL,GAAgBvB,YAAhB,CAA6BG,gBAA9B,IAAkD,KAAKgG,OAAL,CAAa3E,MAAb,EAAqBa,cAA3E,EAA2F;AACzF,eAAOsD,SAAP;AACD;;AAED,UAAMS,SAAS,GAAG,KAAKD,OAAL,CAAa3E,MAAb,EAAqBqC,QAArB,IAAiC,KAAnD;AACA,UAAMA,QAAQ,GAAG,CAACuC,SAAlB;AACA,WAAKC,YAAL,CAAkB7E,MAAlB,EAA0B;AACxBqC,QAAAA,QAAQ,EAARA;AADwB,OAA1B;AAGA,WAAKlD,IAAL,CAAU,cAAV,EAA0Ba,MAA1B,EAAkCqC,QAAlC;AACA,aAAOA,QAAP;AACD;;;WAED,oBAAW;AACT,UAAMtB,YAAY,qBAAQ,KAAKhB,QAAL,GAAgBzC,KAAxB,CAAlB;;AAEA,UAAMwH,sBAAsB,GAAGvP,MAAM,CAACyL,IAAP,CAAYD,YAAZ,EAA0BtF,MAA1B,CAAiC,UAAAsG,IAAI,EAAI;AACtE,eAAO,CAAChB,YAAY,CAACgB,IAAD,CAAZ,CAAmBZ,QAAnB,CAA4BN,cAA7B,IAA+CE,YAAY,CAACgB,IAAD,CAAZ,CAAmBZ,QAAnB,CAA4BL,aAAlF;AACD,OAF8B,CAA/B;AAGAgE,MAAAA,sBAAsB,CAAC7D,OAAvB,CAA+B,UAAAc,IAAI,EAAI;AACrC,YAAMb,WAAW,mCAAQH,YAAY,CAACgB,IAAD,CAApB;AACfM,UAAAA,QAAQ,EAAE;AADK,UAAjB;;AAGAtB,QAAAA,YAAY,CAACgB,IAAD,CAAZ,GAAqBb,WAArB;AACD,OALD;AAMA,WAAK9C,QAAL,CAAc;AACZd,QAAAA,KAAK,EAAEyD;AADK,OAAd;AAGA,WAAK5B,IAAL,CAAU,WAAV;AACD;;;WAED,qBAAY;AACV,UAAM4B,YAAY,qBAAQ,KAAKhB,QAAL,GAAgBzC,KAAxB,CAAlB;;AAEA,UAAMwH,sBAAsB,GAAGvP,MAAM,CAACyL,IAAP,CAAYD,YAAZ,EAA0BtF,MAA1B,CAAiC,UAAAsG,IAAI,EAAI;AACtE,eAAO,CAAChB,YAAY,CAACgB,IAAD,CAAZ,CAAmBZ,QAAnB,CAA4BN,cAA7B,IAA+CE,YAAY,CAACgB,IAAD,CAAZ,CAAmBZ,QAAnB,CAA4BL,aAAlF;AACD,OAF8B,CAA/B;AAGAgE,MAAAA,sBAAsB,CAAC7D,OAAvB,CAA+B,UAAAc,IAAI,EAAI;AACrC,YAAMb,WAAW,mCAAQH,YAAY,CAACgB,IAAD,CAApB;AACfM,UAAAA,QAAQ,EAAE,KADK;AAEfT,UAAAA,KAAK,EAAE;AAFQ,UAAjB;;AAIAb,QAAAA,YAAY,CAACgB,IAAD,CAAZ,GAAqBb,WAArB;AACD,OAND;AAOA,WAAK9C,QAAL,CAAc;AACZd,QAAAA,KAAK,EAAEyD;AADK,OAAd;AAGA,WAAK5B,IAAL,CAAU,YAAV;AACD;;;WAED,oBAAW;AACT,UAAM4B,YAAY,qBAAQ,KAAKhB,QAAL,GAAgBzC,KAAxB,CAAlB;;AAEA,UAAMyH,YAAY,GAAGxP,MAAM,CAACyL,IAAP,CAAYD,YAAZ,EAA0BtF,MAA1B,CAAiC,UAAAsG,IAAI,EAAI;AAC5D,eAAOhB,YAAY,CAACgB,IAAD,CAAZ,CAAmBH,KAA1B;AACD,OAFoB,CAArB;AAGAmD,MAAAA,YAAY,CAAC9D,OAAb,CAAqB,UAAAc,IAAI,EAAI;AAC3B,YAAMb,WAAW,mCAAQH,YAAY,CAACgB,IAAD,CAApB;AACfM,UAAAA,QAAQ,EAAE,KADK;AAEfT,UAAAA,KAAK,EAAE;AAFQ,UAAjB;;AAIAb,QAAAA,YAAY,CAACgB,IAAD,CAAZ,GAAqBb,WAArB;AACD,OAND;AAOA,WAAK9C,QAAL,CAAc;AACZd,QAAAA,KAAK,EAAEyD,YADK;AAEZa,QAAAA,KAAK,EAAE;AAFK,OAAd;AAIA,WAAKzC,IAAL,CAAU,WAAV,EAAuB4F,YAAvB;;AAEA,UAAIA,YAAY,CAACpC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,eAAOqC,OAAO,CAACC,OAAR,CAAgB;AACrBC,UAAAA,UAAU,EAAE,EADS;AAErBC,UAAAA,MAAM,EAAE;AAFa,SAAhB,CAAP;AAID;;AAED,UAAMf,QAAQ,GAAGhP,2BAA2B,CAAC,IAAD,EAAOkD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgEyM,YAAhE,EAA8E;AAC7FK,QAAAA,mBAAmB,EAAE,IADwE,CACnE;;AADmE,OAA9E,CAAjB;;AAKA,aAAOhQ,2BAA2B,CAAC,IAAD,EAAOqD,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D2L,QAA1D,CAAP;AACD;;;WAED,qBAAY;AACV,WAAKjF,IAAL,CAAU,YAAV;;AACA,4BAEI,KAAKY,QAAL,EAFJ;AAAA,UACEzC,KADF,mBACEA,KADF;;AAGA,UAAMwG,OAAO,GAAGvO,MAAM,CAACyL,IAAP,CAAY1D,KAAZ,CAAhB;;AAEA,UAAIwG,OAAO,CAACnB,MAAZ,EAAoB;AAClB,aAAK+B,WAAL,CAAiBZ,OAAjB,EAA0B,YAA1B;AACD;;AAED,WAAK1F,QAAL,CAAc;AACZQ,QAAAA,aAAa,EAAE,CADH;AAEZgD,QAAAA,KAAK,EAAE,IAFK;AAGZ9C,QAAAA,cAAc,EAAE;AAHJ,OAAd;AAKD;;;WAED,qBAAYkB,MAAZ,EAAoB;AAClB,WAAK6E,YAAL,CAAkB7E,MAAlB,EAA0B;AACxB4B,QAAAA,KAAK,EAAE,IADiB;AAExBS,QAAAA,QAAQ,EAAE;AAFc,OAA1B;AAIA,WAAKlD,IAAL,CAAU,cAAV,EAA0Ba,MAA1B;;AAEA,UAAMoE,QAAQ,GAAGhP,2BAA2B,CAAC,IAAD,EAAOkD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgE,CAAC0H,MAAD,CAAhE,EAA0E;AACzFoF,QAAAA,mBAAmB,EAAE,IADoE,CAC/D;;AAD+D,OAA1E,CAAjB;;AAKA,aAAOhQ,2BAA2B,CAAC,IAAD,EAAOqD,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D2L,QAA1D,CAAP;AACD;;;WAED,iBAAQ;AACN,WAAKiB,SAAL;AACD;;;WAED,kBAAS;AACP,WAAKzF,cAAL,CAAoB,UAAAC,MAAM,EAAI;AAC5B,YAAIA,MAAM,CAACyF,QAAP,IAAmBzF,MAAM,CAACyF,QAAP,CAAgBC,MAAvC,EAA+C;AAC7C1F,UAAAA,MAAM,CAACyF,QAAP,CAAgBC,MAAhB;AACD;AACF,OAJD;AAKD;;;WAED,2BAAkBxD,IAAlB,EAAwBR,IAAxB,EAA8B;AAC5B,UAAI,CAAC,KAAKoD,OAAL,CAAa5C,IAAI,CAACnM,EAAlB,CAAL,EAA4B;AAC1B,aAAK+H,GAAL,kEAAmEoE,IAAI,CAACnM,EAAxE;AACA;AACD,OAJ2B,CAI1B;;;AAGF,UAAM4P,iBAAiB,GAAGC,MAAM,CAACC,QAAP,CAAgBnE,IAAI,CAACoE,UAArB,KAAoCpE,IAAI,CAACoE,UAAL,GAAkB,CAAhF;AACA,WAAKd,YAAL,CAAkB9C,IAAI,CAACnM,EAAvB,EAA2B;AACzBuL,QAAAA,QAAQ,kCAAO,KAAKwD,OAAL,CAAa5C,IAAI,CAACnM,EAAlB,EAAsBuL,QAA7B;AACNP,UAAAA,aAAa,EAAEW,IAAI,CAACX,aADd;AAEN+E,UAAAA,UAAU,EAAEpE,IAAI,CAACoE,UAFX;AAGNhF,UAAAA,UAAU,EAAE6E,iBAAiB,GAAGI,IAAI,CAACC,KAAL,CAAWtE,IAAI,CAACX,aAAL,GAAqBW,IAAI,CAACoE,UAA1B,GAAuC,GAAlD,CAAH,GAA4D;AAHnF;AADiB,OAA3B;AAOA,WAAKpB,sBAAL;AACD;;;WAED,kCAAyB;AACvB;AACA;AACA,UAAMjH,KAAK,GAAG,KAAKwI,QAAL,EAAd;AACA,UAAMC,UAAU,GAAGzI,KAAK,CAAC7B,MAAN,CAAa,UAAAsG,IAAI,EAAI;AACtC,eAAOA,IAAI,CAACZ,QAAL,CAAcL,aAAd,IAA+BiB,IAAI,CAACZ,QAAL,CAAcc,UAA7C,IAA2DF,IAAI,CAACZ,QAAL,CAAce,WAAhF;AACD,OAFkB,CAAnB;;AAIA,UAAI6D,UAAU,CAACpD,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAKxD,IAAL,CAAU,UAAV,EAAsB,CAAtB;AACA,aAAKf,QAAL,CAAc;AACZQ,UAAAA,aAAa,EAAE;AADH,SAAd;AAGA;AACD;;AAED,UAAMoH,UAAU,GAAGD,UAAU,CAACtK,MAAX,CAAkB,UAAAsG,IAAI;AAAA,eAAIA,IAAI,CAACZ,QAAL,CAAcwE,UAAd,IAA4B,IAAhC;AAAA,OAAtB,CAAnB;AACA,UAAMM,YAAY,GAAGF,UAAU,CAACtK,MAAX,CAAkB,UAAAsG,IAAI;AAAA,eAAIA,IAAI,CAACZ,QAAL,CAAcwE,UAAd,IAA4B,IAAhC;AAAA,OAAtB,CAArB;;AAEA,UAAIK,UAAU,CAACrD,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,YAAMuD,WAAW,GAAGH,UAAU,CAACpD,MAAX,GAAoB,GAAxC;AACA,YAAMwD,eAAe,GAAGF,YAAY,CAACG,MAAb,CAAoB,UAACC,GAAD,EAAMtE,IAAN,EAAe;AACzD,iBAAOsE,GAAG,GAAGtE,IAAI,CAACZ,QAAL,CAAcR,UAA3B;AACD,SAFuB,EAErB,CAFqB,CAAxB;;AAGA,YAAM/B,cAAa,GAAGgH,IAAI,CAACC,KAAL,CAAWM,eAAe,GAAGD,WAAlB,GAAgC,GAA3C,CAAtB;;AACA,aAAK9H,QAAL,CAAc;AACZQ,UAAAA,aAAa,EAAbA;AADY,SAAd;AAGA;AACD;;AAED,UAAI0H,SAAS,GAAGN,UAAU,CAACI,MAAX,CAAkB,UAACC,GAAD,EAAMtE,IAAN,EAAe;AAC/C,eAAOsE,GAAG,GAAGtE,IAAI,CAACZ,QAAL,CAAcwE,UAA3B;AACD,OAFe,EAEb,CAFa,CAAhB;AAGA,UAAMY,WAAW,GAAGD,SAAS,GAAGN,UAAU,CAACrD,MAA3C;AACA2D,MAAAA,SAAS,IAAIC,WAAW,GAAGN,YAAY,CAACtD,MAAxC;AACA,UAAI6D,YAAY,GAAG,CAAnB;AACAR,MAAAA,UAAU,CAAC/E,OAAX,CAAmB,UAAAc,IAAI,EAAI;AACzByE,QAAAA,YAAY,IAAIzE,IAAI,CAACZ,QAAL,CAAcP,aAA9B;AACD,OAFD;AAGAqF,MAAAA,YAAY,CAAChF,OAAb,CAAqB,UAAAc,IAAI,EAAI;AAC3ByE,QAAAA,YAAY,IAAID,WAAW,IAAIxE,IAAI,CAACZ,QAAL,CAAcR,UAAd,IAA4B,CAAhC,CAAX,GAAgD,GAAhE;AACD,OAFD;AAGA,UAAI/B,aAAa,GAAG0H,SAAS,KAAK,CAAd,GAAkB,CAAlB,GAAsBV,IAAI,CAACC,KAAL,CAAWW,YAAY,GAAGF,SAAf,GAA2B,GAAtC,CAA1C,CA3CuB,CA2C+D;AACtF;;AAEA,UAAI1H,aAAa,GAAG,GAApB,EAAyB;AACvBA,QAAAA,aAAa,GAAG,GAAhB;AACD;;AAED,WAAKR,QAAL,CAAc;AACZQ,QAAAA,aAAa,EAAbA;AADY,OAAd;AAGA,WAAKO,IAAL,CAAU,UAAV,EAAsBP,aAAtB;AACD;AACD;AACF;AACA;AACA;;;;WAGE,8BAAqB;AACnB,UAAM6H,MAAM,GAAG,OAAOpH,MAAM,CAACqH,SAAP,CAAiBC,MAAxB,KAAmC,WAAnC,GAAiDtH,MAAM,CAACqH,SAAP,CAAiBC,MAAlE,GAA2E,IAA1F;;AAEA,UAAI,CAACF,MAAL,EAAa;AACX,aAAKtH,IAAL,CAAU,YAAV;AACA,aAAKN,IAAL,CAAU,KAAKsB,IAAL,CAAU,sBAAV,CAAV,EAA6C,OAA7C,EAAsD,CAAtD;AACA,aAAKyG,UAAL,GAAkB,IAAlB;AACD,OAJD,MAIO;AACL,aAAKzH,IAAL,CAAU,WAAV;;AAEA,YAAI,KAAKyH,UAAT,EAAqB;AACnB,eAAKzH,IAAL,CAAU,aAAV;AACA,eAAKN,IAAL,CAAU,KAAKsB,IAAL,CAAU,qBAAV,CAAV,EAA4C,SAA5C,EAAuD,IAAvD;AACA,eAAKyG,UAAL,GAAkB,KAAlB;AACD;AACF;AACF;;;WAED,iBAAQ;AACN,aAAO,KAAKlJ,IAAL,CAAU9H,EAAjB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACE;;;;WAGA,aAAIiR,MAAJ,EAAYnJ,IAAZ,EAAkB;AAChB,UAAI,OAAOmJ,MAAP,KAAkB,UAAtB,EAAkC;AAChC,YAAMC,GAAG,GAAG,2CAAoCD,MAAM,KAAK,IAAX,GAAkB,MAAlB,GAA2B,OAAOA,MAAtE,SAAkF,oEAA9F;AACA,cAAM,IAAIlR,SAAJ,CAAcmR,GAAd,CAAN;AACD,OAJe,CAId;;;AAGF,UAAMjH,MAAM,GAAG,IAAIgH,MAAJ,CAAW,IAAX,EAAiBnJ,IAAjB,CAAf;AACA,UAAMqJ,QAAQ,GAAGlH,MAAM,CAACjK,EAAxB;;AAEA,UAAI,CAACmR,QAAL,EAAe;AACb,cAAM,IAAI9P,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,UAAI,CAAC4I,MAAM,CAAC0D,IAAZ,EAAkB;AAChB,cAAM,IAAItM,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,UAAM+P,mBAAmB,GAAG,KAAKC,SAAL,CAAeF,QAAf,CAA5B;;AAEA,UAAIC,mBAAJ,EAAyB;AACvB,YAAMF,IAAG,GAAG,wCAAiCE,mBAAmB,CAACpR,EAArD,oCAAiFmR,QAAjF,YAAkG,mFAA9G;;AACA,cAAM,IAAI9P,KAAJ,CAAU6P,IAAV,CAAN;AACD;;AAED,UAAID,MAAM,CAAChJ,OAAX,EAAoB;AAClB,aAAKF,GAAL,iBAAkBoJ,QAAlB,eAA+BF,MAAM,CAAChJ,OAAtC;AACD;;AAED,UAAIgC,MAAM,CAAC0D,IAAP,IAAenO,2BAA2B,CAAC,IAAD,EAAOmC,QAAP,CAA3B,CAA4CA,QAA5C,CAAnB,EAA0E;AACxEnC,QAAAA,2BAA2B,CAAC,IAAD,EAAOmC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDsI,MAAM,CAAC0D,IAA7D,EAAmEG,IAAnE,CAAwE7D,MAAxE;AACD,OAFD,MAEO;AACLzK,QAAAA,2BAA2B,CAAC,IAAD,EAAOmC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDsI,MAAM,CAAC0D,IAA7D,IAAqE,CAAC1D,MAAD,CAArE;AACD;;AAEDA,MAAAA,MAAM,CAACqH,OAAP;AACA,aAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;;WAGE,mBAAUtR,EAAV,EAAc;AACZ,wCAAsBL,MAAM,CAACmM,MAAP,CAActM,2BAA2B,CAAC,IAAD,EAAOmC,QAAP,CAA3B,CAA4CA,QAA5C,CAAd,CAAtB,oCAA4F;AAAvF,YAAM8G,OAAO,qBAAb;AACH,YAAM8I,WAAW,GAAG9I,OAAO,CAAC+I,IAAR,CAAa,UAAAvH,MAAM;AAAA,iBAAIA,MAAM,CAACjK,EAAP,KAAcA,EAAlB;AAAA,SAAnB,CAApB;AACA,YAAIuR,WAAW,IAAI,IAAnB,EAAyB,OAAOA,WAAP;AAC1B;;AAED,aAAOhD,SAAP;AACD;;;WAED,eAAcZ,IAAd,EAAoB;AAClB,aAAOnO,2BAA2B,CAAC,IAAD,EAAOmC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDgM,IAAtD,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;;WAGE,wBAAe8D,MAAf,EAAuB;AACrB9R,MAAAA,MAAM,CAACmM,MAAP,CAActM,2BAA2B,CAAC,IAAD,EAAOmC,QAAP,CAA3B,CAA4CA,QAA5C,CAAd,EAAqE+P,IAArE,CAA0E,CAA1E,EAA6ErG,OAA7E,CAAqFoG,MAArF;AACD;AACD;AACF;AACA;AACA;AACA;;;;WAGE,sBAAaE,QAAb,EAAuB;AACrB,WAAK5J,GAAL,2BAA4B4J,QAAQ,CAAC3R,EAArC;AACA,WAAKuJ,IAAL,CAAU,eAAV,EAA2BoI,QAA3B;;AAEA,UAAIA,QAAQ,CAACC,SAAb,EAAwB;AACtBD,QAAAA,QAAQ,CAACC,SAAT;AACD;;AAED,UAAMC,IAAI,GAAGrS,2BAA2B,CAAC,IAAD,EAAOmC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDgQ,QAAQ,CAAChE,IAA/D,CAAb,CARqB,CAQ8D;AACnF;AACA;;;AAGA,UAAMmE,KAAK,GAAGD,IAAI,CAACE,SAAL,CAAe,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAAChS,EAAL,KAAY2R,QAAQ,CAAC3R,EAAzB;AAAA,OAAnB,CAAd;;AAEA,UAAI8R,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBD,QAAAA,IAAI,CAACI,MAAL,CAAYH,KAAZ,EAAmB,CAAnB;AACD;;AAED,UAAM/H,KAAK,GAAG,KAAKI,QAAL,EAAd;AACA,UAAM+H,YAAY,GAAG;AACnBzJ,QAAAA,OAAO,kCAAOsB,KAAK,CAACtB,OAAb,2BACJkJ,QAAQ,CAAC3R,EADL,EACUuO,SADV;AADY,OAArB;AAKA,WAAK/F,QAAL,CAAc0J,YAAd;AACD;AACD;AACF;AACA;;;;WAGE,iBAAQ;AAAA;;AACN,WAAKnK,GAAL,iCAAkC,KAAKD,IAAL,CAAU9H,EAA5C;AACA,WAAKmS,KAAL;;AAEA3S,MAAAA,2BAA2B,CAAC,IAAD,EAAOoC,iBAAP,CAA3B,CAAqDA,iBAArD;;AAEA,WAAKoI,cAAL,CAAoB,UAAAC,MAAM,EAAI;AAC5B,QAAA,MAAI,CAACmI,YAAL,CAAkBnI,MAAlB;AACD,OAFD;;AAIA,UAAI,OAAOR,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAAC4I,mBAA5C,EAAiE;AAC/D5I,QAAAA,MAAM,CAAC4I,mBAAP,CAA2B,QAA3B,EAAqC7S,2BAA2B,CAAC,IAAD,EAAOiD,mBAAP,CAA3B,CAAuDA,mBAAvD,CAArC;AACAgH,QAAAA,MAAM,CAAC4I,mBAAP,CAA2B,SAA3B,EAAsC7S,2BAA2B,CAAC,IAAD,EAAOiD,mBAAP,CAA3B,CAAuDA,mBAAvD,CAAtC;AACD;AACF;;;WAED,oBAAW;AACT,4BAEI,KAAK0H,QAAL,EAFJ;AAAA,UACElB,IADF,mBACEA,IADF;;AAGA,WAAKT,QAAL,CAAc;AACZS,QAAAA,IAAI,EAAEA,IAAI,CAACqJ,KAAL,CAAW,CAAX;AADM,OAAd;AAGA,WAAK/I,IAAL,CAAU,aAAV;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,cAAK/H,OAAL,EAA8C;AAAA;;AAAA,UAAhCmM,IAAgC,uEAAzB,MAAyB;AAAA,UAAjB4E,QAAiB,uEAAN,IAAM;AAC5C,UAAMC,gBAAgB,GAAG,OAAOhR,OAAP,KAAmB,QAA5C;AACA,WAAKgH,QAAL,CAAc;AACZS,QAAAA,IAAI,+BAAM,KAAKkB,QAAL,GAAgBlB,IAAtB,IAA4B;AAC9B0E,UAAAA,IAAI,EAAJA,IAD8B;AAE9BnM,UAAAA,OAAO,EAAEgR,gBAAgB,GAAGhR,OAAO,CAACA,OAAX,GAAqBA,OAFhB;AAG9ByM,UAAAA,OAAO,EAAEuE,gBAAgB,GAAGhR,OAAO,CAACyM,OAAX,GAAqB;AAHhB,SAA5B;AADQ,OAAd;AAOAwE,MAAAA,UAAU,CAAC;AAAA,eAAM,MAAI,CAACC,QAAL,EAAN;AAAA,OAAD,EAAwBH,QAAxB,CAAV;AACA,WAAKhJ,IAAL,CAAU,cAAV;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;;WAGE,aAAI/H,OAAJ,EAAamM,IAAb,EAAmB;AACjB,UACE/F,MADF,GAEI,KAAKE,IAFT,CACEF,MADF;;AAIA,cAAQ+F,IAAR;AACE,aAAK,OAAL;AACE/F,UAAAA,MAAM,CAACoE,KAAP,CAAaxK,OAAb;AACA;;AAEF,aAAK,SAAL;AACEoG,UAAAA,MAAM,CAAC+K,IAAP,CAAYnR,OAAZ;AACA;;AAEF;AACEoG,UAAAA,MAAM,CAACf,KAAP,CAAarF,OAAb;AACA;AAXJ;AAaD;AACD;AACF;AACA;;;;WAGE,iBAAQgN,QAAR,EAAkB;AAChB,WAAKzG,GAAL,gDAAgDyG,QAAhD;;AAEA,UAAI,CAAC,KAAKrE,QAAL,GAAgBzB,cAAhB,CAA+B8F,QAA/B,CAAL,EAA+C;AAC7ChP,QAAAA,2BAA2B,CAAC,IAAD,EAAOoD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgE4L,QAAhE;;AAEA,eAAOY,OAAO,CAACwD,MAAR,CAAe,IAAIvR,KAAJ,CAAU,oBAAV,CAAf,CAAP;AACD;;AAED,aAAO7B,2BAA2B,CAAC,IAAD,EAAOqD,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D2L,QAA1D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;;WAGE,iBAAwB;AAAA;;AACtB,aAAO,0BAAAhP,2BAA2B,CAAC,IAAD,EAAOkD,aAAP,CAA3B,EAAiDA,aAAjD,0CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,uBAAc8L,QAAd,EAAwB7C,IAAxB,EAA8B;AAC5B,UAAI,CAACnM,2BAA2B,CAAC,IAAD,EAAOmD,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D6L,QAA1D,CAAL,EAA0E;AACxE,aAAKzG,GAAL,mEAAoEyG,QAApE;AACA;AACD;;AAED,4BAEI,KAAKrE,QAAL,EAFJ;AAAA,UACEzB,cADF,mBACEA,cADF;;AAGA,UAAMmK,aAAa,mCAAQnK,cAAc,CAAC8F,QAAD,CAAtB;AACjBjB,QAAAA,MAAM,kCAAO7E,cAAc,CAAC8F,QAAD,CAAd,CAAyBjB,MAAhC,GACD5B,IADC;AADW,QAAnB;;AAKA,WAAKnD,QAAL,CAAc;AACZE,QAAAA,cAAc,kCAAOA,cAAP,2BACX8F,QADW,EACAqE,aADA;AADF,OAAd;AAKD;AACD;AACF;AACA;AACA;AACA;;AAGE;AACF;AACA;AACA;AACA;;;;WACE,kBAAS;AAAA;;AACP,UAAIC,qBAAJ;;AAEA,UAAI,EAAE,CAACA,qBAAqB,GAAGtT,2BAA2B,CAAC,IAAD,EAAOmC,QAAP,CAA3B,CAA4CA,QAA5C,EAAsDoR,QAA/E,KAA4F,IAA5F,IAAoGD,qBAAqB,CAAC/F,MAA5H,CAAJ,EAAyI;AACvI,aAAKhF,GAAL,CAAS,mCAAT,EAA8C,SAA9C;AACD;;AAED,4BAEI,KAAKoC,QAAL,EAFJ;AAAA,UACEzC,KADF,mBACEA,KADF;;AAGA,UAAMsL,oBAAoB,GAAG,KAAKlL,IAAL,CAAUL,cAAV,CAAyBC,KAAzB,CAA7B;;AAEA,UAAIsL,oBAAoB,KAAK,KAA7B,EAAoC;AAClC,eAAO5D,OAAO,CAACwD,MAAR,CAAe,IAAIvR,KAAJ,CAAU,+DAAV,CAAf,CAAP;AACD;;AAED,UAAI2R,oBAAoB,IAAI,OAAOA,oBAAP,KAAgC,QAA5D,EAAsE;AACpEtL,QAAAA,KAAK,GAAGsL,oBAAR,CADoE,CACtC;AAC9B;;AAEA,aAAKxK,QAAL,CAAc;AACZd,UAAAA,KAAK,EAALA;AADY,SAAd;AAGD;;AAED,aAAO0H,OAAO,CAACC,OAAR,GAAkB4D,IAAlB,CAAuB,YAAM;AAClCzT,QAAAA,2BAA2B,CAAC,MAAD,EAAO0C,sBAAP,CAA3B,CAA0DA,sBAA1D,EAAkFwF,KAAlF;;AAEAlI,QAAAA,2BAA2B,CAAC,MAAD,EAAO2C,wBAAP,CAA3B,CAA4DA,wBAA5D,EAAsFuF,KAAtF;AACD,OAJM,EAIJwL,KAJI,CAIE,UAAA1F,GAAG,EAAI;AACdhO,QAAAA,2BAA2B,CAAC,MAAD,EAAO4C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFoL,GAApF;AACD,OANM,EAMJyF,IANI,CAMC,YAAM;AACZ,8BAEI,MAAI,CAAC9I,QAAL,EAFJ;AAAA,YACEzB,cADF,mBACEA,cADF,CADY,CAGS;;;AAErB,YAAMyK,uBAAuB,GAAGxT,MAAM,CAACmM,MAAP,CAAcpD,cAAd,EAA8B0K,OAA9B,CAAsC,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACnF,OAAT;AAAA,SAA1C,CAAhC;AACA,YAAMoF,cAAc,GAAG,EAAvB;AACA3T,QAAAA,MAAM,CAACyL,IAAP,CAAY1D,KAAZ,EAAmB2D,OAAnB,CAA2B,UAAAjB,MAAM,EAAI;AACnC,cAAM+B,IAAI,GAAG,MAAI,CAAC4C,OAAL,CAAa3E,MAAb,CAAb,CADmC,CACA;;;AAEnC,cAAI,CAAC+B,IAAI,CAACZ,QAAL,CAAcL,aAAf,IAAgCiI,uBAAuB,CAACI,OAAxB,CAAgCnJ,MAAhC,MAA4C,CAAC,CAAjF,EAAoF;AAClFkJ,YAAAA,cAAc,CAACxF,IAAf,CAAoB3B,IAAI,CAACnM,EAAzB;AACD;AACF,SAND;;AAQA,YAAMwO,QAAQ,GAAGhP,2BAA2B,CAAC,MAAD,EAAOkD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgE4Q,cAAhE,CAAjB;;AAEA,eAAO9T,2BAA2B,CAAC,MAAD,EAAOqD,UAAP,CAA3B,CAA8CA,UAA9C,EAA0D2L,QAA1D,CAAP;AACD,OAxBM,EAwBJ0E,KAxBI,CAwBE,UAAA1F,GAAG,EAAI;AACdhO,QAAAA,2BAA2B,CAAC,MAAD,EAAO4C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFoL,GAApF,EAAyF;AACvFgG,UAAAA,YAAY,EAAE;AADyE,SAAzF;AAGD,OA5BM,CAAP;AA6BD;;;;EAvPAlU,W,EAuJAC,Y;;AAoGH,SAASwE,mBAAT,CAA6BoI,IAA7B,EAA4D;AAAA,MAAzBzE,KAAyB,uEAAjB,KAAKwI,QAAL,EAAiB;AAC1D,8BAMI,KAAKpI,IAAL,CAAUhB,YANd;AAAA,MACEC,WADF,yBACEA,WADF;AAAA,MAEEC,WAFF,yBAEEA,WAFF;AAAA,MAGEC,gBAHF,yBAGEA,gBAHF;AAAA,MAIEC,gBAJF,yBAIEA,gBAJF;AAAA,MAKEE,gBALF,yBAKEA,gBALF;;AAQA,MAAIF,gBAAJ,EAAsB;AACpB,QAAIQ,KAAK,CAACqF,MAAN,GAAe,CAAf,GAAmB7F,gBAAvB,EAAyC;AACvC,YAAM,IAAIhG,gBAAJ,WAAwB,KAAKqJ,IAAL,CAAU,mBAAV,EAA+B;AAC3DyD,QAAAA,WAAW,EAAE9G;AAD8C,OAA/B,CAAxB,EAAN;AAGD;AACF;;AAED,MAAIE,gBAAJ,EAAsB;AACpB,QAAMqM,iBAAiB,GAAGrM,gBAAgB,CAACiG,IAAjB,CAAsB,UAAAM,IAAI,EAAI;AACtD;AACA,UAAIA,IAAI,CAAC4F,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EAA4B;AAC1B,YAAI,CAACpH,IAAI,CAACwB,IAAV,EAAgB,OAAO,KAAP;AAChB,eAAOlN,KAAK,CAAC0L,IAAI,CAACwB,IAAL,CAAU+F,OAAV,CAAkB,OAAlB,EAA2B,EAA3B,CAAD,EAAiC/F,IAAjC,CAAZ;AACD,OALqD,CAKpD;;;AAGF,UAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBxB,IAAI,CAACwH,SAA5B,EAAuC;AACrC,eAAOxH,IAAI,CAACwH,SAAL,CAAeC,WAAf,OAAiCjG,IAAI,CAACkG,MAAL,CAAY,CAAZ,EAAeD,WAAf,EAAxC;AACD;;AAED,aAAO,KAAP;AACD,KAbyB,CAA1B;;AAeA,QAAI,CAACH,iBAAL,EAAwB;AACtB,UAAMK,sBAAsB,GAAG1M,gBAAgB,CAACyH,IAAjB,CAAsB,IAAtB,CAA/B;AACA,YAAM,IAAI3N,gBAAJ,CAAqB,KAAKqJ,IAAL,CAAU,2BAAV,EAAuC;AAChEwJ,QAAAA,KAAK,EAAED;AADyD,OAAvC,CAArB,CAAN;AAGD;AACF,GAvCyD,CAuCxD;;;AAGF,MAAI7M,gBAAgB,IAAIkF,IAAI,CAAC6H,IAAL,IAAa,IAArC,EAA2C;AACzC,QAAIC,cAAc,GAAG,CAArB;AACAA,IAAAA,cAAc,IAAI9H,IAAI,CAAC6H,IAAvB;AACAtM,IAAAA,KAAK,CAAC2D,OAAN,CAAc,UAAA6I,CAAC,EAAI;AACjBD,MAAAA,cAAc,IAAIC,CAAC,CAACF,IAApB;AACD,KAFD;;AAIA,QAAIC,cAAc,GAAGhN,gBAArB,EAAuC;AACrC,YAAM,IAAI/F,gBAAJ,CAAqB,KAAKqJ,IAAL,CAAU,aAAV,EAAyB;AAClDyJ,QAAAA,IAAI,EAAExT,aAAa,CAACyG,gBAAD,CAD+B;AAElDkF,QAAAA,IAAI,EAAEA,IAAI,CAACjM;AAFuC,OAAzB,CAArB,CAAN;AAID;AACF,GAvDyD,CAuDxD;;;AAGF,MAAI6G,WAAW,IAAIoF,IAAI,CAAC6H,IAAL,IAAa,IAAhC,EAAsC;AACpC,QAAI7H,IAAI,CAAC6H,IAAL,GAAYjN,WAAhB,EAA6B;AAC3B,YAAM,IAAI7F,gBAAJ,CAAqB,KAAKqJ,IAAL,CAAU,aAAV,EAAyB;AAClDyJ,QAAAA,IAAI,EAAExT,aAAa,CAACuG,WAAD,CAD+B;AAElDoF,QAAAA,IAAI,EAAEA,IAAI,CAACjM;AAFuC,OAAzB,CAArB,CAAN;AAID;AACF,GAjEyD,CAiExD;;;AAGF,MAAI8G,WAAW,IAAImF,IAAI,CAAC6H,IAAL,IAAa,IAAhC,EAAsC;AACpC,QAAI7H,IAAI,CAAC6H,IAAL,GAAYhN,WAAhB,EAA6B;AAC3B,YAAM,IAAI9F,gBAAJ,CAAqB,KAAKqJ,IAAL,CAAU,cAAV,EAA0B;AACnDyJ,QAAAA,IAAI,EAAExT,aAAa,CAACwG,WAAD;AADgC,OAA1B,CAArB,CAAN;AAGD;AACF;AACF;;AAED,SAASlD,uBAAT,CAAiC4D,KAAjC,EAAwC;AACtC,MACEP,gBADF,GAEI,KAAKW,IAAL,CAAUhB,YAFd,CACEK,gBADF;;AAIA,MAAIxH,MAAM,CAACyL,IAAP,CAAY1D,KAAZ,EAAmBqF,MAAnB,GAA4B5F,gBAAhC,EAAkD;AAChD,UAAM,IAAIjG,gBAAJ,WAAwB,KAAKqJ,IAAL,CAAU,yBAAV,EAAqC;AACjEyD,MAAAA,WAAW,EAAE7G;AADoD,KAArC,CAAxB,EAAN;AAGD;AACF;;AAED,SAAStD,yBAAT,CAAmC6D,KAAnC,EAA0C;AACxC,MACEL,kBADF,GAEI,KAAKS,IAAL,CAAUhB,YAFd,CACEO,kBADF;AAGA,MACExH,cADF,GAEIF,MAAM,CAACC,SAFX,CACEC,cADF;AAGA,MAAM4B,MAAM,GAAG,EAAf;;AAEA,mCAAqB9B,MAAM,CAACyL,IAAP,CAAY1D,KAAZ,CAArB,oCAAyC;AAApC,QAAM0C,MAAM,oBAAZ;AACH,QAAM+B,IAAI,GAAG,KAAK4C,OAAL,CAAa3E,MAAb,CAAb;;AAEA,SAAK,IAAIyD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxG,kBAAkB,CAAC0F,MAAvC,EAA+Cc,CAAC,EAAhD,EAAoD;AAClD,UAAI,CAAChO,cAAc,CAACC,IAAf,CAAoBqM,IAAI,CAAC7E,IAAzB,EAA+BD,kBAAkB,CAACwG,CAAD,CAAjD,CAAD,IAA0D1B,IAAI,CAAC7E,IAAL,CAAUD,kBAAkB,CAACwG,CAAD,CAA5B,MAAqC,EAAnG,EAAuG;AACrG,YAAML,GAAG,GAAG,IAAItM,gBAAJ,WAAwB,KAAKqJ,IAAL,CAAU,gCAAV,EAA4C;AAC9E4J,UAAAA,QAAQ,EAAEhI,IAAI,CAACjM;AAD+D,SAA5C,CAAxB,EAAZ;AAGAuB,QAAAA,MAAM,CAACqM,IAAP,CAAYN,GAAZ;;AAEAhO,QAAAA,2BAA2B,CAAC,IAAD,EAAO4C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFoL,GAApF,EAAyF;AACvFrB,UAAAA,IAAI,EAAJA,IADuF;AAEvFqH,UAAAA,YAAY,EAAE,KAFyE;AAGvFY,UAAAA,QAAQ,EAAE;AAH6E,SAAzF;AAKD;AACF;AACF;;AAED,MAAI3S,MAAM,CAACsL,MAAX,EAAmB;AACjB,UAAM,IAAIrL,yBAAJ,WAAiC,KAAK6I,IAAL,CAAU,0BAAV,CAAjC,GAA0E9I,MAA1E,CAAN;AACD;AACF;;AAED,SAASmC,wBAAT,CAAkC4J,GAAlC,EAIQ;AAAA,kFAAJ,EAAI;AAAA,iCAHNgG,YAGM;AAAA,MAHNA,YAGM,mCAHS,IAGT;AAAA,yBAFNrH,IAEM;AAAA,MAFNA,IAEM,2BAFC,IAED;AAAA,6BADNiI,QACM;AAAA,MADNA,QACM,+BADK,IACL;;AACN,MAAM5S,OAAO,GAAG,OAAOgM,GAAP,KAAe,QAAf,GAA0BA,GAAG,CAAChM,OAA9B,GAAwCgM,GAAxD;AACA,MAAMS,OAAO,GAAG,OAAOT,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACS,OAA/B,GAAyCT,GAAG,CAACS,OAA7C,GAAuD,EAAvE,CAFM,CAEqE;AAC3E;;AAEA,MAAIoG,qBAAqB,GAAG7S,OAA5B;;AAEA,MAAIyM,OAAJ,EAAa;AACXoG,IAAAA,qBAAqB,eAAQpG,OAAR,CAArB;AACD;;AAED,MAAIT,GAAG,CAACpM,aAAR,EAAuB;AACrB,SAAK2G,GAAL,CAASsM,qBAAT;AACA,SAAK9K,IAAL,CAAU,oBAAV,EAAgC4C,IAAhC,EAAsCqB,GAAtC;AACD,GAHD,MAGO;AACL,SAAKzF,GAAL,CAASsM,qBAAT,EAAgC,OAAhC;AACD,GAhBK,CAgBJ;AACF;;;AAGA,MAAIb,YAAJ,EAAkB;AAChB,SAAKvK,IAAL,CAAU;AACRzH,MAAAA,OAAO,EAAPA,OADQ;AAERyM,MAAAA,OAAO,EAAPA;AAFQ,KAAV,EAGG,OAHH,EAGY,KAAKnG,IAAL,CAAUD,WAHtB;AAID;;AAED,MAAIuM,QAAJ,EAAc;AACZ,UAAM,OAAO5G,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgC,IAAInM,KAAJ,CAAUmM,GAAV,CAAtC;AACD;AACF;;AAED,SAAS7J,wBAAT,CAAkCwI,IAAlC,EAAwC;AACtC,yBAEI,KAAKhC,QAAL,EAFJ;AAAA,MACExB,cADF,oBACEA,cADF;;AAIA,MAAIA,cAAc,KAAK,KAAvB,EAA8B;AAC5BnJ,IAAAA,2BAA2B,CAAC,IAAD,EAAO4C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoF,IAAIlB,gBAAJ,CAAqB,KAAKqJ,IAAL,CAAU,oBAAV,CAArB,CAApF,EAA2I;AACzI4B,MAAAA,IAAI,EAAJA;AADyI,KAA3I;AAGD;AACF;;AAED,SAASzI,+BAAT,CAAyCgE,KAAzC,EAAgD4M,cAAhD,EAAgE;AAC9D,MAAMC,QAAQ,GAAG5T,WAAW,CAAC2T,cAAD,CAA5B;AACA,MAAMH,QAAQ,GAAGpT,WAAW,CAACwT,QAAD,EAAWD,cAAX,CAA5B;AACA,MAAME,aAAa,GAAG5T,uBAAuB,CAACuT,QAAD,CAAvB,CAAkCR,SAAxD;AACA,MAAMc,QAAQ,GAAGC,OAAO,CAACJ,cAAc,CAACG,QAAhB,CAAxB;AACA,MAAMrK,MAAM,GAAGvJ,cAAc,iCAAMyT,cAAN;AAC3B3G,IAAAA,IAAI,EAAE4G;AADqB,KAA7B;;AAIA,MAAI,KAAKI,wBAAL,CAA8BvK,MAA9B,CAAJ,EAA2C;AACzC,QAAM4B,KAAK,GAAG,IAAI9K,gBAAJ,CAAqB,KAAKqJ,IAAL,CAAU,cAAV,EAA0B;AAC3D4J,MAAAA,QAAQ,EAARA;AAD2D,KAA1B,CAArB,CAAd;;AAIA3U,IAAAA,2BAA2B,CAAC,IAAD,EAAO4C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoF4J,KAApF,EAA2F;AACzFG,MAAAA,IAAI,EAAEmI;AADmF,KAA3F;AAGD;;AAED,MAAMhN,IAAI,GAAGgN,cAAc,CAAChN,IAAf,IAAuB,EAApC;AACAA,EAAAA,IAAI,CAACpH,IAAL,GAAYiU,QAAZ;AACA7M,EAAAA,IAAI,CAACqG,IAAL,GAAY4G,QAAZ,CArB8D,CAqBxC;;AAEtB,MAAMP,IAAI,GAAGnE,MAAM,CAACC,QAAP,CAAgBwE,cAAc,CAAC3I,IAAf,CAAoBqI,IAApC,IAA4CM,cAAc,CAAC3I,IAAf,CAAoBqI,IAAhE,GAAuE,IAApF;AACA,MAAItG,OAAO,GAAG;AACZkH,IAAAA,MAAM,EAAEN,cAAc,CAACM,MAAf,IAAyB,EADrB;AAEZ5U,IAAAA,EAAE,EAAEoK,MAFQ;AAGZlK,IAAAA,IAAI,EAAEiU,QAHM;AAIZR,IAAAA,SAAS,EAAEa,aAAa,IAAI,EAJhB;AAKZlN,IAAAA,IAAI,kCAAO,KAAK6C,QAAL,GAAgB7C,IAAvB,GACCA,IADD,CALQ;AAQZqG,IAAAA,IAAI,EAAE4G,QARM;AASZ5I,IAAAA,IAAI,EAAE2I,cAAc,CAAC3I,IATT;AAUZJ,IAAAA,QAAQ,EAAE;AACRR,MAAAA,UAAU,EAAE,CADJ;AAERC,MAAAA,aAAa,EAAE,CAFP;AAGR+E,MAAAA,UAAU,EAAEiE,IAHJ;AAIR/I,MAAAA,cAAc,EAAE,KAJR;AAKRC,MAAAA,aAAa,EAAE;AALP,KAVE;AAiBZ8I,IAAAA,IAAI,EAAJA,IAjBY;AAkBZS,IAAAA,QAAQ,EAARA,QAlBY;AAmBZI,IAAAA,MAAM,EAAEP,cAAc,CAACO,MAAf,IAAyB,EAnBrB;AAoBZC,IAAAA,OAAO,EAAER,cAAc,CAACQ;AApBZ,GAAd;AAsBA,MAAMC,uBAAuB,GAAG,KAAKjN,IAAL,CAAUP,iBAAV,CAA4BmG,OAA5B,EAAqChG,KAArC,CAAhC;;AAEA,MAAIqN,uBAAuB,KAAK,KAAhC,EAAuC;AACrC;AACAvV,IAAAA,2BAA2B,CAAC,IAAD,EAAO4C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoF,IAAIlB,gBAAJ,CAAqB,+DAArB,CAApF,EAA2K;AACzKsS,MAAAA,YAAY,EAAE,KAD2J;AAEzKc,MAAAA,cAAc,EAAdA;AAFyK,KAA3K;AAID,GAND,MAMO,IAAI,OAAOS,uBAAP,KAAmC,QAAnC,IAA+CA,uBAAuB,KAAK,IAA/E,EAAqF;AAC1FrH,IAAAA,OAAO,GAAGqH,uBAAV;AACD;;AAED,MAAI;AACF,QAAMC,UAAU,GAAGrV,MAAM,CAACyL,IAAP,CAAY1D,KAAZ,EAAmBuN,GAAnB,CAAuB,UAAApH,CAAC;AAAA,aAAInG,KAAK,CAACmG,CAAD,CAAT;AAAA,KAAxB,CAAnB;;AAEArO,IAAAA,2BAA2B,CAAC,IAAD,EAAOyC,kBAAP,CAA3B,CAAsDA,kBAAtD,EAA0EyL,OAA1E,EAAmFsH,UAAnF;AACD,GAJD,CAIE,OAAOxH,GAAP,EAAY;AACZhO,IAAAA,2BAA2B,CAAC,IAAD,EAAO4C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFoL,GAApF,EAAyF;AACvFrB,MAAAA,IAAI,EAAEuB;AADiF,KAAzF;AAGD;;AAED,SAAOA,OAAP;AACD;;AAED,SAASjK,oBAAT,GAAgC;AAAA;;AAC9B,MAAI,KAAKqE,IAAL,CAAUpB,WAAV,IAAyB,CAAC,KAAKwO,oBAAnC,EAAyD;AACvD,SAAKA,oBAAL,GAA4BzC,UAAU,CAAC,YAAM;AAC3C,MAAA,OAAI,CAACyC,oBAAL,GAA4B,IAA5B;;AACA,MAAA,OAAI,CAACC,MAAL,GAAcjC,KAAd,CAAoB,UAAA1F,GAAG,EAAI;AACzB,YAAI,CAACA,GAAG,CAACpM,aAAT,EAAwB;AACtB,UAAA,OAAI,CAAC2G,GAAL,CAASyF,GAAG,CAAC4H,KAAJ,IAAa5H,GAAG,CAAChM,OAAjB,IAA4BgM,GAArC;AACD;AACF,OAJD;AAKD,KAPqC,EAOnC,CAPmC,CAAtC;AAQD;AACF;;AAED,SAAShK,cAAT,GAA0B;AAAA;;AACxB;AACF;AACA;AACA;AACA;AACE,MAAM6R,YAAY,GAAG,SAAfA,YAAe,CAACrJ,KAAD,EAAQG,IAAR,EAAcmJ,QAAd,EAA2B;AAC9C,QAAIC,QAAQ,GAAGvJ,KAAK,CAACxK,OAAN,IAAiB,eAAhC;;AAEA,QAAIwK,KAAK,CAACiC,OAAV,EAAmB;AACjBsH,MAAAA,QAAQ,eAAQvJ,KAAK,CAACiC,OAAd,CAAR;AACD;;AAED,IAAA,OAAI,CAACzF,QAAL,CAAc;AACZwD,MAAAA,KAAK,EAAEuJ;AADK,KAAd;;AAIA,QAAIpJ,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACnM,EAAL,IAAW,OAAI,CAACmK,QAAL,GAAgBzC,KAA/C,EAAsD;AACpD,MAAA,OAAI,CAACuH,YAAL,CAAkB9C,IAAI,CAACnM,EAAvB,EAA2B;AACzBgM,QAAAA,KAAK,EAAEuJ,QADkB;AAEzBD,QAAAA,QAAQ,EAARA;AAFyB,OAA3B;AAID;AACF,GAjBD;;AAmBA,OAAK1L,EAAL,CAAQ,OAAR,EAAiByL,YAAjB;AACA,OAAKzL,EAAL,CAAQ,cAAR,EAAwB,UAACuC,IAAD,EAAOH,KAAP,EAAcsJ,QAAd,EAA2B;AACjDD,IAAAA,YAAY,CAACrJ,KAAD,EAAQG,IAAR,EAAcmJ,QAAd,CAAZ;;AAEA,QAAI,OAAOtJ,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACxK,OAAvC,EAAgD;AAC9C,UAAMgU,QAAQ,GAAG,IAAInU,KAAJ,CAAU2K,KAAK,CAACxK,OAAhB,CAAjB;AACAgU,MAAAA,QAAQ,CAACvH,OAAT,GAAmBjC,KAAK,CAACxK,OAAzB;;AAEA,UAAIwK,KAAK,CAACiC,OAAV,EAAmB;AACjBuH,QAAAA,QAAQ,CAACvH,OAAT,eAAwBjC,KAAK,CAACiC,OAA9B;AACD;;AAEDuH,MAAAA,QAAQ,CAAChU,OAAT,GAAmB,OAAI,CAAC+I,IAAL,CAAU,gBAAV,EAA4B;AAC7C4B,QAAAA,IAAI,EAAEA,IAAI,CAACjM;AADkC,OAA5B,CAAnB;;AAIAV,MAAAA,2BAA2B,CAAC,OAAD,EAAO4C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoFoT,QAApF,EAA8F;AAC5FpB,QAAAA,QAAQ,EAAE;AADkF,OAA9F;AAGD,KAfD,MAeO;AACL5U,MAAAA,2BAA2B,CAAC,OAAD,EAAO4C,uBAAP,CAA3B,CAA2DA,uBAA3D,EAAoF4J,KAApF,EAA2F;AACzFoI,QAAAA,QAAQ,EAAE;AAD+E,OAA3F;AAGD;AACF,GAvBD;AAwBA,OAAKxK,EAAL,CAAQ,QAAR,EAAkB,YAAM;AACtB,IAAA,OAAI,CAACpB,QAAL,CAAc;AACZwD,MAAAA,KAAK,EAAE;AADK,KAAd;AAGD,GAJD;AAKA,OAAKpC,EAAL,CAAQ,gBAAR,EAA0B,UAAAuC,IAAI,EAAI;AAChC,QAAI,CAAC,OAAI,CAAC4C,OAAL,CAAa5C,IAAI,CAACnM,EAAlB,CAAL,EAA4B;AAC1B,MAAA,OAAI,CAAC+H,GAAL,kEAAmEoE,IAAI,CAACnM,EAAxE;;AACA;AACD;;AAED,IAAA,OAAI,CAACiP,YAAL,CAAkB9C,IAAI,CAACnM,EAAvB,EAA2B;AACzBuL,MAAAA,QAAQ,EAAE;AACRL,QAAAA,aAAa,EAAEuK,IAAI,CAACC,GAAL,EADP;AAERzK,QAAAA,cAAc,EAAE,KAFR;AAGRF,QAAAA,UAAU,EAAE,CAHJ;AAIRC,QAAAA,aAAa,EAAE,CAJP;AAKR+E,QAAAA,UAAU,EAAE5D,IAAI,CAAC6H;AALT;AADe,KAA3B;AASD,GAfD;AAgBA,OAAKpK,EAAL,CAAQ,iBAAR,EAA2B,KAAKvB,iBAAhC;AACA,OAAKuB,EAAL,CAAQ,gBAAR,EAA0B,UAACuC,IAAD,EAAOwJ,UAAP,EAAsB;AAC9C,QAAI,CAAC,OAAI,CAAC5G,OAAL,CAAa5C,IAAI,CAACnM,EAAlB,CAAL,EAA4B;AAC1B,MAAA,OAAI,CAAC+H,GAAL,kEAAmEoE,IAAI,CAACnM,EAAxE;;AACA;AACD;;AAED,QAAMuQ,eAAe,GAAG,OAAI,CAACxB,OAAL,CAAa5C,IAAI,CAACnM,EAAlB,EAAsBuL,QAA9C;;AACA,IAAA,OAAI,CAAC0D,YAAL,CAAkB9C,IAAI,CAACnM,EAAvB,EAA2B;AACzBuL,MAAAA,QAAQ,kCAAOgF,eAAP;AACNjE,QAAAA,WAAW,EAAE9M,2BAA2B,CAAC,OAAD,EAAOwC,eAAP,CAA3B,CAAmDA,eAAnD,EAAoEgS,IAApE,GAA2E,CAA3E,GAA+E;AAC1F4B,UAAAA,IAAI,EAAE;AADoF,SAA/E,GAET,IAHE;AAIN3K,QAAAA,cAAc,EAAE,IAJV;AAKNF,QAAAA,UAAU,EAAE,GALN;AAMNC,QAAAA,aAAa,EAAEuF,eAAe,CAACR;AANzB,QADiB;AASzBuF,MAAAA,QAAQ,EAAEK,UATe;AAUzBE,MAAAA,SAAS,EAAEF,UAAU,CAACE,SAVG;AAWzBpJ,MAAAA,QAAQ,EAAE;AAXe,KAA3B,EAP8C,CAmB1C;AACJ;;;AAEA,QAAIN,IAAI,CAAC6H,IAAL,IAAa,IAAjB,EAAuB;AACrB,MAAA,OAAI,CAAC/E,YAAL,CAAkB9C,IAAI,CAACnM,EAAvB,EAA2B;AACzBgU,QAAAA,IAAI,EAAE2B,UAAU,CAAC3K,aAAX,IAA4BuF,eAAe,CAACR;AADzB,OAA3B;AAGD;;AAED,IAAA,OAAI,CAACpB,sBAAL;AACD,GA7BD;AA8BA,OAAK/E,EAAL,CAAQ,qBAAR,EAA+B,UAACuC,IAAD,EAAOZ,QAAP,EAAoB;AACjD,QAAI,CAAC,OAAI,CAACwD,OAAL,CAAa5C,IAAI,CAACnM,EAAlB,CAAL,EAA4B;AAC1B,MAAA,OAAI,CAAC+H,GAAL,kEAAmEoE,IAAI,CAACnM,EAAxE;;AACA;AACD;;AAED,IAAA,OAAI,CAACiP,YAAL,CAAkB9C,IAAI,CAACnM,EAAvB,EAA2B;AACzBuL,MAAAA,QAAQ,kCAAO,OAAI,CAACwD,OAAL,CAAa5C,IAAI,CAACnM,EAAlB,EAAsBuL,QAA7B;AACNc,QAAAA,UAAU,EAAEd;AADN;AADiB,KAA3B;AAKD,GAXD;AAYA,OAAK3B,EAAL,CAAQ,qBAAR,EAA+B,UAAAuC,IAAI,EAAI;AACrC,QAAI,CAAC,OAAI,CAAC4C,OAAL,CAAa5C,IAAI,CAACnM,EAAlB,CAAL,EAA4B;AAC1B,MAAA,OAAI,CAAC+H,GAAL,kEAAmEoE,IAAI,CAACnM,EAAxE;;AACA;AACD;;AAED,QAAM0H,KAAK,qBAAQ,OAAI,CAACyC,QAAL,GAAgBzC,KAAxB,CAAX;;AAEAA,IAAAA,KAAK,CAACyE,IAAI,CAACnM,EAAN,CAAL,mCAAsB0H,KAAK,CAACyE,IAAI,CAACnM,EAAN,CAA3B;AACEuL,MAAAA,QAAQ,oBAAO7D,KAAK,CAACyE,IAAI,CAACnM,EAAN,CAAL,CAAeuL,QAAtB;AADV;AAIA,WAAO7D,KAAK,CAACyE,IAAI,CAACnM,EAAN,CAAL,CAAeuL,QAAf,CAAwBc,UAA/B;;AACA,IAAA,OAAI,CAAC7D,QAAL,CAAc;AACZd,MAAAA,KAAK,EAALA;AADY,KAAd;AAGD,GAhBD;AAiBA,OAAKkC,EAAL,CAAQ,sBAAR,EAAgC,UAACuC,IAAD,EAAOZ,QAAP,EAAoB;AAClD,QAAI,CAAC,OAAI,CAACwD,OAAL,CAAa5C,IAAI,CAACnM,EAAlB,CAAL,EAA4B;AAC1B,MAAA,OAAI,CAAC+H,GAAL,kEAAmEoE,IAAI,CAACnM,EAAxE;;AACA;AACD;;AAED,IAAA,OAAI,CAACiP,YAAL,CAAkB9C,IAAI,CAACnM,EAAvB,EAA2B;AACzBuL,MAAAA,QAAQ,kCAAO,OAAI,CAACpB,QAAL,GAAgBzC,KAAhB,CAAsByE,IAAI,CAACnM,EAA3B,EAA+BuL,QAAtC;AACNe,QAAAA,WAAW,EAAEf;AADP;AADiB,KAA3B;AAKD,GAXD;AAYA,OAAK3B,EAAL,CAAQ,sBAAR,EAAgC,UAAAuC,IAAI,EAAI;AACtC,QAAI,CAAC,OAAI,CAAC4C,OAAL,CAAa5C,IAAI,CAACnM,EAAlB,CAAL,EAA4B;AAC1B,MAAA,OAAI,CAAC+H,GAAL,kEAAmEoE,IAAI,CAACnM,EAAxE;;AACA;AACD;;AAED,QAAM0H,KAAK,qBAAQ,OAAI,CAACyC,QAAL,GAAgBzC,KAAxB,CAAX;;AAEAA,IAAAA,KAAK,CAACyE,IAAI,CAACnM,EAAN,CAAL,mCAAsB0H,KAAK,CAACyE,IAAI,CAACnM,EAAN,CAA3B;AACEuL,MAAAA,QAAQ,oBAAO7D,KAAK,CAACyE,IAAI,CAACnM,EAAN,CAAL,CAAeuL,QAAtB;AADV;AAIA,WAAO7D,KAAK,CAACyE,IAAI,CAACnM,EAAN,CAAL,CAAeuL,QAAf,CAAwBe,WAA/B;;AACA,IAAA,OAAI,CAAC9D,QAAL,CAAc;AACZd,MAAAA,KAAK,EAALA;AADY,KAAd;AAGD,GAhBD;AAiBA,OAAKkC,EAAL,CAAQ,UAAR,EAAoB,YAAM;AACxB;AACA,IAAA,OAAI,CAAC+E,sBAAL;AACD,GAHD,EAhKwB,CAmKpB;;AAEJ,MAAI,OAAOlF,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACqM,gBAA5C,EAA8D;AAC5DrM,IAAAA,MAAM,CAACqM,gBAAP,CAAwB,QAAxB,EAAkCtW,2BAA2B,CAAC,IAAD,EAAOiD,mBAAP,CAA3B,CAAuDA,mBAAvD,CAAlC;AACAgH,IAAAA,MAAM,CAACqM,gBAAP,CAAwB,SAAxB,EAAmCtW,2BAA2B,CAAC,IAAD,EAAOiD,mBAAP,CAA3B,CAAuDA,mBAAvD,CAAnC;AACAgQ,IAAAA,UAAU,CAACjT,2BAA2B,CAAC,IAAD,EAAOiD,mBAAP,CAA3B,CAAuDA,mBAAvD,CAAD,EAA8E,IAA9E,CAAV;AACD;AACF;;AAED,SAASc,cAAT,CAAwB2K,OAAxB,EAA4C;AAAA,MAAXpG,IAAW,uEAAJ,EAAI;AAC1C;AACA,8BAEIA,IAFJ,CACE0H,mBADF;AAAA,MACEA,mBADF,sCACwB,KADxB;;AAGA,yBAGI,KAAKrF,QAAL,EAHJ;AAAA,MACExB,cADF,oBACEA,cADF;AAAA,MAEED,cAFF,oBAEEA,cAFF;;AAKA,MAAI,CAACC,cAAD,IAAmB,CAAC6G,mBAAxB,EAA6C;AAC3C,UAAM,IAAInO,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,MAAMmN,QAAQ,GAAGlO,MAAM,EAAvB;AACA,OAAKiJ,IAAL,CAAU,QAAV,EAAoB;AAClBvJ,IAAAA,EAAE,EAAEwO,QADc;AAElBN,IAAAA,OAAO,EAAPA;AAFkB,GAApB;AAIA,OAAK1F,QAAL,CAAc;AACZG,IAAAA,cAAc,EAAE,KAAKb,IAAL,CAAUlB,0BAAV,KAAyC,KAAzC,IAAkD,KAAKkB,IAAL,CAAUnB,oBAAV,KAAmC,KADzF;AAEZ+B,IAAAA,cAAc,kCAAOA,cAAP,2BACX8F,QADW,EACA;AACVN,MAAAA,OAAO,EAAPA,OADU;AAEV6H,MAAAA,IAAI,EAAE,CAFI;AAGVxI,MAAAA,MAAM,EAAE;AAHE,KADA;AAFF,GAAd;AAUA,SAAOiB,QAAP;AACD;;AAED,SAASlL,WAAT,CAAqBkL,QAArB,EAA+B;AAC7B,yBAEI,KAAKrE,QAAL,EAFJ;AAAA,MACEzB,cADF,oBACEA,cADF;;AAGA,SAAOA,cAAc,CAAC8F,QAAD,CAArB;AACD;;AAED,SAASnL,cAAT,CAAwBmL,QAAxB,EAAkC;AAChC,MAAM9F,cAAc,qBAAQ,KAAKyB,QAAL,GAAgBzB,cAAxB,CAApB;;AAEA,SAAOA,cAAc,CAAC8F,QAAD,CAArB;AACA,OAAKhG,QAAL,CAAc;AACZE,IAAAA,cAAc,EAAdA;AADY,GAAd;AAGD;;SAEctF,W;;;;;yEAAf,iBAA2BoL,QAA3B;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAGM,KAAKrE,QAAL,EAHN,EAEIzB,cAFJ,oBAEIA,cAFJ;AAIMmK,YAAAA,aAJN,GAIsBnK,cAAc,CAAC8F,QAAD,CAJpC;AAKQwH,YAAAA,WALR,GAKsBnD,aAAa,CAACkD,IAAd,IAAsB,CAL5C;AAMQE,YAAAA,KANR,gCAMoBzW,2BAA2B,CAAC,IAAD,EAAOsC,cAAP,CAA3B,CAAkDA,cAAlD,CANpB,sBAM0FtC,2BAA2B,CAAC,IAAD,EAAOuC,UAAP,CAA3B,CAA8CA,UAA9C,CAN1F,sBAMwJvC,2BAA2B,CAAC,IAAD,EAAOwC,eAAP,CAA3B,CAAmDA,eAAnD,CANxJ;AAAA;AASa+T,YAAAA,IATb,GASoBC,WATpB;;AAAA;AAAA,kBASiCD,IAAI,GAAGE,KAAK,CAAClJ,MAT9C;AAAA;AAAA;AAAA;;AAAA,gBAUW8F,aAVX;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAcYrH,YAAAA,EAdZ,GAciByK,KAAK,CAACF,IAAD,CAdtB;AAeYG,YAAAA,aAfZ,mCAeiCrD,aAfjC;AAgBQkD,cAAAA,IAAI,EAAJA;AAhBR;AAkBM,iBAAKvN,QAAL,CAAc;AACZE,cAAAA,cAAc,kCAAOA,cAAP,2BACX8F,QADW,EACA0H,aADA;AADF,aAAd,EAlBN,CAsBU;AACJ;;AAvBN;AAAA,mBAyBY1K,EAAE,CAAC0K,aAAa,CAAChI,OAAf,EAAwBM,QAAxB,CAzBd;;AAAA;AAyBiD;AAE3C9F,YAAAA,cAAc,GAAG,KAAKyB,QAAL,GAAgBzB,cAAjC;AACAmK,YAAAA,aAAa,GAAGnK,cAAc,CAAC8F,QAAD,CAA9B;;AA5BN;AASsDuH,YAAAA,IAAI,EAT1D;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+BI,iBAAKxM,IAAL,CAAU,OAAV;;AAEA/J,YAAAA,2BAA2B,CAAC,IAAD,EAAOoD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgE4L,QAAhE;;AAjCJ;;AAAA;AAAA,iBAuCMqE,aAvCN;AAAA;AAAA;AAAA;;AAwCI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,YAAAA,aAAa,CAAC3E,OAAd,CAAsB7C,OAAtB,CAA8B,UAAAjB,MAAM,EAAI;AACtC,kBAAM+B,IAAI,GAAG,OAAI,CAAC4C,OAAL,CAAa3E,MAAb,CAAb;;AAEA,kBAAI+B,IAAI,IAAIA,IAAI,CAACZ,QAAL,CAAce,WAA1B,EAAuC;AACrC,gBAAA,OAAI,CAAC/C,IAAL,CAAU,sBAAV,EAAkC4C,IAAlC;AACD;AACF,aAND;AAOMzE,YAAAA,KAzDV,GAyDkBmL,aAAa,CAAC3E,OAAd,CAAsB+G,GAAtB,CAA0B,UAAA7K,MAAM;AAAA,qBAAI,OAAI,CAAC2E,OAAL,CAAa3E,MAAb,CAAJ;AAAA,aAAhC,CAzDlB;AA0DUkF,YAAAA,UA1DV,GA0DuB5H,KAAK,CAAC7B,MAAN,CAAa,UAAAsG,IAAI;AAAA,qBAAI,CAACA,IAAI,CAACH,KAAV;AAAA,aAAjB,CA1DvB;AA2DUuD,YAAAA,MA3DV,GA2DmB7H,KAAK,CAAC7B,MAAN,CAAa,UAAAsG,IAAI;AAAA,qBAAIA,IAAI,CAACH,KAAT;AAAA,aAAjB,CA3DnB;AAAA;AAAA,mBA4DU,KAAKmK,aAAL,CAAmB3H,QAAnB,EAA6B;AACjCc,cAAAA,UAAU,EAAVA,UADiC;AAEjCC,cAAAA,MAAM,EAANA,MAFiC;AAGjCf,cAAAA,QAAQ,EAARA;AAHiC,aAA7B,CA5DV;;AAAA;AAgEQ;AAEJ9F,YAAAA,cAAc,GAAG,KAAKyB,QAAL,GAAgBzB,cAAjC;AACAmK,YAAAA,aAAa,GAAGnK,cAAc,CAAC8F,QAAD,CAA9B;;AAnEJ;AA4EE,gBAAIqE,aAAJ,EAAmB;AACjBtF,cAAAA,MAAM,GAAGsF,aAAa,CAACtF,MAAvB;AACA,mBAAKhE,IAAL,CAAU,UAAV,EAAsBgE,MAAtB;;AAEA/N,cAAAA,2BAA2B,CAAC,IAAD,EAAOoD,aAAP,CAA3B,CAAiDA,aAAjD,EAAgE4L,QAAhE;AACD;;AAED,gBAAIjB,MAAM,IAAI,IAAd,EAAoB;AAClB,mBAAKxF,GAAL,mEAAoEyG,QAApE;AACD;;AArFH,6CAuFSjB,MAvFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA0FAvK,IAAI,CAACiF,OAAL,GAAe,OAAf;AACAmO,MAAM,CAACC,OAAP,GAAiBrT,IAAjB","sourcesContent":["/* global AggregateError */\n'use strict';\n\nlet _Symbol$for, _Symbol$for2;\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\n\nconst Translator = require('@uppy/utils/lib/Translator');\n\nconst ee = require('namespace-emitter');\n\nconst {\n  nanoid\n} = require('nanoid');\n\nconst throttle = require('lodash.throttle');\n\nconst prettierBytes = require('@transloadit/prettier-bytes');\n\nconst match = require('mime-match');\n\nconst DefaultStore = require('@uppy/store-default');\n\nconst getFileType = require('@uppy/utils/lib/getFileType');\n\nconst getFileNameAndExtension = require('@uppy/utils/lib/getFileNameAndExtension');\n\nconst generateFileID = require('@uppy/utils/lib/generateFileID');\n\nconst supportsUploadProgress = require('./supportsUploadProgress');\n\nconst getFileName = require('./getFileName');\n\nconst {\n  justErrorsLogger,\n  debugLogger\n} = require('./loggers'); // Exported from here.\n\n\nclass RestrictionError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.isRestriction = true;\n  }\n\n}\n\nif (typeof AggregateError === 'undefined') {\n  // eslint-disable-next-line no-global-assign\n  globalThis.AggregateError = class AggregateError extends Error {\n    constructor(message, errors) {\n      super(message);\n      this.errors = errors;\n    }\n\n  };\n}\n\nclass AggregateRestrictionError extends AggregateError {\n  constructor(...args) {\n    super(...args);\n    this.isRestriction = true;\n  }\n\n}\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\n\n\nvar _plugins = /*#__PURE__*/_classPrivateFieldLooseKey(\"plugins\");\n\nvar _storeUnsubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"storeUnsubscribe\");\n\nvar _emitter = /*#__PURE__*/_classPrivateFieldLooseKey(\"emitter\");\n\nvar _preProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"preProcessors\");\n\nvar _uploaders = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploaders\");\n\nvar _postProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"postProcessors\");\n\nvar _checkRestrictions = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRestrictions\");\n\nvar _checkMinNumberOfFiles = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkMinNumberOfFiles\");\n\nvar _checkRequiredMetaFields = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRequiredMetaFields\");\n\nvar _showOrLogErrorAndThrow = /*#__PURE__*/_classPrivateFieldLooseKey(\"showOrLogErrorAndThrow\");\n\nvar _assertNewUploadAllowed = /*#__PURE__*/_classPrivateFieldLooseKey(\"assertNewUploadAllowed\");\n\nvar _checkAndCreateFileStateObject = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkAndCreateFileStateObject\");\n\nvar _startIfAutoProceed = /*#__PURE__*/_classPrivateFieldLooseKey(\"startIfAutoProceed\");\n\nvar _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"addListeners\");\n\nvar _updateOnlineStatus = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateOnlineStatus\");\n\nvar _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"createUpload\");\n\nvar _getUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"getUpload\");\n\nvar _removeUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"removeUpload\");\n\nvar _runUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"runUpload\");\n\n_Symbol$for = Symbol.for('uppy test: getPlugins');\n_Symbol$for2 = Symbol.for('uppy test: createUpload');\n\nclass Uppy {\n  // eslint-disable-next-line global-require\n\n  /** @type {Record<string, BasePlugin[]>} */\n\n  /**\n   * Instantiate Uppy\n   *\n   * @param {object} opts â€” Uppy options\n   */\n  constructor(_opts) {\n    Object.defineProperty(this, _runUpload, {\n      value: _runUpload2\n    });\n    Object.defineProperty(this, _removeUpload, {\n      value: _removeUpload2\n    });\n    Object.defineProperty(this, _getUpload, {\n      value: _getUpload2\n    });\n    Object.defineProperty(this, _createUpload, {\n      value: _createUpload2\n    });\n    Object.defineProperty(this, _addListeners, {\n      value: _addListeners2\n    });\n    Object.defineProperty(this, _startIfAutoProceed, {\n      value: _startIfAutoProceed2\n    });\n    Object.defineProperty(this, _checkAndCreateFileStateObject, {\n      value: _checkAndCreateFileStateObject2\n    });\n    Object.defineProperty(this, _assertNewUploadAllowed, {\n      value: _assertNewUploadAllowed2\n    });\n    Object.defineProperty(this, _showOrLogErrorAndThrow, {\n      value: _showOrLogErrorAndThrow2\n    });\n    Object.defineProperty(this, _checkRequiredMetaFields, {\n      value: _checkRequiredMetaFields2\n    });\n    Object.defineProperty(this, _checkMinNumberOfFiles, {\n      value: _checkMinNumberOfFiles2\n    });\n    Object.defineProperty(this, _checkRestrictions, {\n      value: _checkRestrictions2\n    });\n    Object.defineProperty(this, _plugins, {\n      writable: true,\n      value: Object.create(null)\n    });\n    Object.defineProperty(this, _storeUnsubscribe, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _emitter, {\n      writable: true,\n      value: ee()\n    });\n    Object.defineProperty(this, _preProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _uploaders, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _postProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _updateOnlineStatus, {\n      writable: true,\n      value: this.updateOnlineStatus.bind(this)\n    });\n    this.defaultLocale = {\n      strings: {\n        addBulkFilesFailed: {\n          0: 'Failed to add %{smart_count} file due to an internal error',\n          1: 'Failed to add %{smart_count} files due to internal errors'\n        },\n        youCanOnlyUploadX: {\n          0: 'You can only upload %{smart_count} file',\n          1: 'You can only upload %{smart_count} files'\n        },\n        youHaveToAtLeastSelectX: {\n          0: 'You have to select at least %{smart_count} file',\n          1: 'You have to select at least %{smart_count} files'\n        },\n        exceedsSize: '%{file} exceeds maximum allowed size of %{size}',\n        missingRequiredMetaField: 'Missing required meta fields',\n        missingRequiredMetaFieldOnFile: 'Missing required meta fields in %{fileName}',\n        inferiorSize: 'This file is smaller than the allowed size of %{size}',\n        youCanOnlyUploadFileTypes: 'You can only upload: %{types}',\n        noMoreFilesAllowed: 'Cannot add more files',\n        noDuplicates: 'Cannot add the duplicate file \\'%{fileName}\\', it already exists',\n        companionError: 'Connection with Companion failed',\n        authAborted: 'Authentication aborted',\n        companionUnauthorizeHint: 'To unauthorize to your %{provider} account, please go to %{url}',\n        failedToUpload: 'Failed to upload %{file}',\n        noInternetConnection: 'No Internet connection',\n        connectedToInternet: 'Connected to the Internet',\n        // Strings for remote providers\n        noFilesFound: 'You have no files or folders here',\n        selectX: {\n          0: 'Select %{smart_count}',\n          1: 'Select %{smart_count}'\n        },\n        allFilesFromFolderNamed: 'All files from folder %{name}',\n        openFolderNamed: 'Open folder %{name}',\n        cancel: 'Cancel',\n        logOut: 'Log out',\n        filter: 'Filter',\n        resetFilter: 'Reset filter',\n        loading: 'Loading...',\n        authenticateWithTitle: 'Please authenticate with %{pluginName} to select files',\n        authenticateWith: 'Connect to %{pluginName}',\n        signInWithGoogle: 'Sign in with Google',\n        searchImages: 'Search for images',\n        enterTextToSearch: 'Enter text to search for images',\n        backToSearch: 'Back to Search',\n        emptyFolderAdded: 'No files were added from empty folder',\n        folderAlreadyAdded: 'The folder \"%{folder}\" was already added',\n        folderAdded: {\n          0: 'Added %{smart_count} file from %{folder}',\n          1: 'Added %{smart_count} files from %{folder}'\n        }\n      }\n    };\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: false,\n\n      /**\n       * @deprecated The method should not be used\n       */\n      allowMultipleUploads: true,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: {\n        maxFileSize: null,\n        minFileSize: null,\n        maxTotalFileSize: null,\n        maxNumberOfFiles: null,\n        minNumberOfFiles: null,\n        allowedFileTypes: null,\n        requiredMetaFields: []\n      },\n      meta: {},\n      onBeforeFileAdded: currentFile => currentFile,\n      onBeforeUpload: files => files,\n      store: DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000\n    }; // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n\n    this.opts = { ...defaultOptions,\n      ..._opts,\n      restrictions: { ...defaultOptions.restrictions,\n        ...(_opts && _opts.restrictions)\n      }\n    }; // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects â€” we set logger: justErrorsLogger in defaultOptions\n\n    if (_opts && _opts.logger && _opts.debug) {\n      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');\n    } else if (_opts && _opts.debug) {\n      this.opts.logger = debugLogger;\n    }\n\n    this.log(`Using Core v${this.constructor.VERSION}`);\n\n    if (this.opts.restrictions.allowedFileTypes && this.opts.restrictions.allowedFileTypes !== null && !Array.isArray(this.opts.restrictions.allowedFileTypes)) {\n      throw new TypeError('`restrictions.allowedFileTypes` must be an array');\n    }\n\n    this.i18nInit(); // ___Why throttle at 500ms?\n    //    - We must throttle at >250ms for superfocus in Dashboard to work well\n    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n    //    - We must throttle at around >500ms to avoid performance lags.\n    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n\n    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, {\n      leading: true,\n      trailing: true\n    });\n    this.store = this.opts.store;\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      allowNewUpload: true,\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: { ...this.opts.meta\n      },\n      info: [],\n      recoveredState: null\n    });\n    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe] = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch);\n      this.updateAll(nextState);\n    }); // Exposing uppy object on window for debugging and testing\n\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window[this.opts.id] = this;\n    }\n\n    _classPrivateFieldLooseBase(this, _addListeners)[_addListeners]();\n  }\n\n  emit(event, ...args) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].emit(event, ...args);\n  }\n\n  on(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, callback);\n\n    return this;\n  }\n\n  once(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(event, callback);\n\n    return this;\n  }\n\n  off(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, callback);\n\n    return this;\n  }\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n\n\n  updateAll(state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state);\n    });\n  }\n  /**\n   * Updates state with a patch\n   *\n   * @param {object} patch {foo: 'bar'}\n   */\n\n\n  setState(patch) {\n    this.store.setState(patch);\n  }\n  /**\n   * Returns current state.\n   *\n   * @returns {object}\n   */\n\n\n  getState() {\n    return this.store.getState();\n  }\n  /**\n   * Back compat for when uppy.state is used instead of uppy.getState().\n   *\n   * @deprecated\n   */\n\n\n  get state() {\n    // Here, state is a non-enumerable property.\n    return this.getState();\n  }\n  /**\n   * Shorthand to set state for a specific file.\n   */\n\n\n  setFileState(fileID, state) {\n    if (!this.getState().files[fileID]) {\n      throw new Error(`Canâ€™t set state for ${fileID} (the file could have been removed)`);\n    }\n\n    this.setState({\n      files: { ...this.getState().files,\n        [fileID]: { ...this.getState().files[fileID],\n          ...state\n        }\n      }\n    });\n  }\n\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.locale = translator.locale;\n  }\n\n  setOptions(newOpts) {\n    this.opts = { ...this.opts,\n      ...newOpts,\n      restrictions: { ...this.opts.restrictions,\n        ...(newOpts && newOpts.restrictions)\n      }\n    };\n\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta);\n    }\n\n    this.i18nInit();\n\n    if (newOpts.locale) {\n      this.iteratePlugins(plugin => {\n        plugin.setOptions();\n      });\n    } // Note: this is not the preact `setState`, it's an internal function that has the same name.\n\n\n    this.setState(); // so that UI re-renders with new options\n  }\n\n  resetProgress() {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: null\n    };\n    const files = { ...this.getState().files\n    };\n    const updatedFiles = {};\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = { ...files[fileID]\n      };\n      updatedFile.progress = { ...updatedFile.progress,\n        ...defaultProgress\n      };\n      updatedFiles[fileID] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0\n    });\n    this.emit('reset-progress');\n  }\n\n  addPreProcessor(fn) {\n    _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].add(fn);\n  }\n\n  removePreProcessor(fn) {\n    return _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].delete(fn);\n  }\n\n  addPostProcessor(fn) {\n    _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].add(fn);\n  }\n\n  removePostProcessor(fn) {\n    return _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].delete(fn);\n  }\n\n  addUploader(fn) {\n    _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].add(fn);\n  }\n\n  removeUploader(fn) {\n    return _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].delete(fn);\n  }\n\n  setMeta(data) {\n    const updatedMeta = { ...this.getState().meta,\n      ...data\n    };\n    const updatedFiles = { ...this.getState().files\n    };\n    Object.keys(updatedFiles).forEach(fileID => {\n      updatedFiles[fileID] = { ...updatedFiles[fileID],\n        meta: { ...updatedFiles[fileID].meta,\n          ...data\n        }\n      };\n    });\n    this.log('Adding metadata:');\n    this.log(data);\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles\n    });\n  }\n\n  setFileMeta(fileID, data) {\n    const updatedFiles = { ...this.getState().files\n    };\n\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that has been removed: ', fileID);\n      return;\n    }\n\n    const newMeta = { ...updatedFiles[fileID].meta,\n      ...data\n    };\n    updatedFiles[fileID] = { ...updatedFiles[fileID],\n      meta: newMeta\n    };\n    this.setState({\n      files: updatedFiles\n    });\n  }\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n\n\n  getFile(fileID) {\n    return this.getState().files[fileID];\n  }\n  /**\n   * Get all files in an array.\n   */\n\n\n  getFiles() {\n    const {\n      files\n    } = this.getState();\n    return Object.values(files);\n  }\n\n  getObjectOfFilesPerState() {\n    const {\n      files: filesObject,\n      totalProgress,\n      error\n    } = this.getState();\n    const files = Object.values(filesObject);\n    const inProgressFiles = files.filter(({\n      progress\n    }) => !progress.uploadComplete && progress.uploadStarted);\n    const newFiles = files.filter(file => !file.progress.uploadStarted);\n    const startedFiles = files.filter(file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess);\n    const uploadStartedFiles = files.filter(file => file.progress.uploadStarted);\n    const pausedFiles = files.filter(file => file.isPaused);\n    const completeFiles = files.filter(file => file.progress.uploadComplete);\n    const erroredFiles = files.filter(file => file.error);\n    const inProgressNotPausedFiles = inProgressFiles.filter(file => !file.isPaused);\n    const processingFiles = files.filter(file => file.progress.preprocess || file.progress.postprocess);\n    return {\n      newFiles,\n      startedFiles,\n      uploadStartedFiles,\n      pausedFiles,\n      completeFiles,\n      erroredFiles,\n      inProgressFiles,\n      inProgressNotPausedFiles,\n      processingFiles,\n      isUploadStarted: uploadStartedFiles.length > 0,\n      isAllComplete: totalProgress === 100 && completeFiles.length === files.length && processingFiles.length === 0,\n      isAllErrored: !!error && erroredFiles.length === files.length,\n      isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,\n      isUploadInProgress: inProgressFiles.length > 0,\n      isSomeGhost: files.some(file => file.isGhost)\n    };\n  }\n  /**\n   * A public wrapper for _checkRestrictions â€” checks if a file passes a set of restrictions.\n   * For use in UI pluigins (like Providers), to disallow selecting files that wonâ€™t pass restrictions.\n   *\n   * @param {object} file object to check\n   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n   * @returns {object} { result: true/false, reason: why file didnâ€™t pass restrictions }\n   */\n\n\n  validateRestrictions(file, files) {\n    try {\n      _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](file, files);\n\n      return {\n        result: true\n      };\n    } catch (err) {\n      return {\n        result: false,\n        reason: err.message\n      };\n    }\n  }\n  /**\n   * Check if file passes a set of restrictions set in options: maxFileSize, minFileSize,\n   * maxNumberOfFiles and allowedFileTypes.\n   *\n   * @param {object} file object to check\n   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n   * @private\n   */\n\n\n  checkIfFileAlreadyExists(fileID) {\n    const {\n      files\n    } = this.getState();\n\n    if (files[fileID] && !files[fileID].isGhost) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   *\n   * Note this is extremely side-effectful and should only be done when a file state object\n   * will be added to state immediately afterward!\n   *\n   * The `files` value is passed in because it may be updated by the caller without updating the store.\n   */\n\n\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   *\n   * @param {object} file object to add\n   * @returns {string} id for the added file\n   */\n  addFile(file) {\n    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](file);\n\n    const {\n      files\n    } = this.getState();\n\n    let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, file); // Users are asked to re-select recovered files without data,\n    // and to keep the progress, meta and everthing else, we only replace said data\n\n\n    if (files[newFile.id] && files[newFile.id].isGhost) {\n      newFile = { ...files[newFile.id],\n        data: file.data,\n        isGhost: false\n      };\n      this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`);\n    }\n\n    this.setState({\n      files: { ...files,\n        [newFile.id]: newFile\n      }\n    });\n    this.emit('file-added', newFile);\n    this.emit('files-added', [newFile]);\n    this.log(`Added file: ${newFile.name}, ${newFile.id}, mime type: ${newFile.type}`);\n\n    _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n\n    return newFile.id;\n  }\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */\n\n\n  addFiles(fileDescriptors) {\n    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](); // create a copy of the files object only once\n\n\n    const files = { ...this.getState().files\n    };\n    const newFiles = [];\n    const errors = [];\n\n    for (let i = 0; i < fileDescriptors.length; i++) {\n      try {\n        let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, fileDescriptors[i]); // Users are asked to re-select recovered files without data,\n        // and to keep the progress, meta and everthing else, we only replace said data\n\n\n        if (files[newFile.id] && files[newFile.id].isGhost) {\n          newFile = { ...files[newFile.id],\n            data: fileDescriptors[i].data,\n            isGhost: false\n          };\n          this.log(`Replaced blob in a ghost file: ${newFile.name}, ${newFile.id}`);\n        }\n\n        files[newFile.id] = newFile;\n        newFiles.push(newFile);\n      } catch (err) {\n        if (!err.isRestriction) {\n          errors.push(err);\n        }\n      }\n    }\n\n    this.setState({\n      files\n    });\n    newFiles.forEach(newFile => {\n      this.emit('file-added', newFile);\n    });\n    this.emit('files-added', newFiles);\n\n    if (newFiles.length > 5) {\n      this.log(`Added batch of ${newFiles.length} files`);\n    } else {\n      Object.keys(newFiles).forEach(fileID => {\n        this.log(`Added file: ${newFiles[fileID].name}\\n id: ${newFiles[fileID].id}\\n type: ${newFiles[fileID].type}`);\n      });\n    }\n\n    if (newFiles.length > 0) {\n      _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n    }\n\n    if (errors.length > 0) {\n      let message = 'Multiple errors occurred while adding files:\\n';\n      errors.forEach(subError => {\n        message += `\\n * ${subError.message}`;\n      });\n      this.info({\n        message: this.i18n('addBulkFilesFailed', {\n          smart_count: errors.length\n        }),\n        details: message\n      }, 'error', this.opts.infoTimeout);\n\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(errors, message);\n      } else {\n        const err = new Error(message);\n        err.errors = errors;\n        throw err;\n      }\n    }\n  }\n\n  removeFiles(fileIDs, reason) {\n    const {\n      files,\n      currentUploads\n    } = this.getState();\n    const updatedFiles = { ...files\n    };\n    const updatedUploads = { ...currentUploads\n    };\n    const removedFiles = Object.create(null);\n    fileIDs.forEach(fileID => {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID];\n        delete updatedFiles[fileID];\n      }\n    }); // Remove files from the `fileIDs` list in each upload.\n\n    function fileIsNotRemoved(uploadFileID) {\n      return removedFiles[uploadFileID] === undefined;\n    }\n\n    Object.keys(updatedUploads).forEach(uploadID => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved); // Remove the upload if no files are associated with it anymore.\n\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID];\n        return;\n      }\n\n      updatedUploads[uploadID] = { ...currentUploads[uploadID],\n        fileIDs: newFileIDs\n      };\n    });\n    const stateUpdate = {\n      currentUploads: updatedUploads,\n      files: updatedFiles\n    }; // If all files were removed - allow new uploads,\n    // and clear recoveredState\n\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true;\n      stateUpdate.error = null;\n      stateUpdate.recoveredState = null;\n    }\n\n    this.setState(stateUpdate);\n    this.calculateTotalProgress();\n    const removedFileIDs = Object.keys(removedFiles);\n    removedFileIDs.forEach(fileID => {\n      this.emit('file-removed', removedFiles[fileID], reason);\n    });\n\n    if (removedFileIDs.length > 5) {\n      this.log(`Removed ${removedFileIDs.length} files`);\n    } else {\n      this.log(`Removed files: ${removedFileIDs.join(', ')}`);\n    }\n  }\n\n  removeFile(fileID, reason = null) {\n    this.removeFiles([fileID], reason);\n  }\n\n  pauseResume(fileID) {\n    if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {\n      return undefined;\n    }\n\n    const wasPaused = this.getFile(fileID).isPaused || false;\n    const isPaused = !wasPaused;\n    this.setFileState(fileID, {\n      isPaused\n    });\n    this.emit('upload-pause', fileID, isPaused);\n    return isPaused;\n  }\n\n  pauseAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: true\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('pause-all');\n  }\n\n  resumeAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: false,\n        error: null\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('resume-all');\n  }\n\n  retryAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error;\n    });\n    filesToRetry.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: false,\n        error: null\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      error: null\n    });\n    this.emit('retry-all', filesToRetry);\n\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: []\n      });\n    }\n\n    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](filesToRetry, {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n    });\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n\n  cancelAll() {\n    this.emit('cancel-all');\n    const {\n      files\n    } = this.getState();\n    const fileIDs = Object.keys(files);\n\n    if (fileIDs.length) {\n      this.removeFiles(fileIDs, 'cancel-all');\n    }\n\n    this.setState({\n      totalProgress: 0,\n      error: null,\n      recoveredState: null\n    });\n  }\n\n  retryUpload(fileID) {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false\n    });\n    this.emit('upload-retry', fileID);\n\n    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]([fileID], {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n    });\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n\n  reset() {\n    this.cancelAll();\n  }\n\n  logout() {\n    this.iteratePlugins(plugin => {\n      if (plugin.provider && plugin.provider.logout) {\n        plugin.provider.logout();\n      }\n    });\n  }\n\n  calculateProgress(file, data) {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    } // bytesTotal may be null or zero; in that case we can't divide by it\n\n\n    const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0;\n    this.setFileState(file.id, {\n      progress: { ...this.getFile(file.id).progress,\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: canHavePercentage ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0\n      }\n    });\n    this.calculateTotalProgress();\n  }\n\n  calculateTotalProgress() {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = this.getFiles();\n    const inProgress = files.filter(file => {\n      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n    });\n\n    if (inProgress.length === 0) {\n      this.emit('progress', 0);\n      this.setState({\n        totalProgress: 0\n      });\n      return;\n    }\n\n    const sizedFiles = inProgress.filter(file => file.progress.bytesTotal != null);\n    const unsizedFiles = inProgress.filter(file => file.progress.bytesTotal == null);\n\n    if (sizedFiles.length === 0) {\n      const progressMax = inProgress.length * 100;\n      const currentProgress = unsizedFiles.reduce((acc, file) => {\n        return acc + file.progress.percentage;\n      }, 0);\n      const totalProgress = Math.round(currentProgress / progressMax * 100);\n      this.setState({\n        totalProgress\n      });\n      return;\n    }\n\n    let totalSize = sizedFiles.reduce((acc, file) => {\n      return acc + file.progress.bytesTotal;\n    }, 0);\n    const averageSize = totalSize / sizedFiles.length;\n    totalSize += averageSize * unsizedFiles.length;\n    let uploadedSize = 0;\n    sizedFiles.forEach(file => {\n      uploadedSize += file.progress.bytesUploaded;\n    });\n    unsizedFiles.forEach(file => {\n      uploadedSize += averageSize * (file.progress.percentage || 0) / 100;\n    });\n    let totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100); // hot fix, because:\n    // uploadedSize ended up larger than totalSize, resulting in 1325% total\n\n    if (totalProgress > 100) {\n      totalProgress = 100;\n    }\n\n    this.setState({\n      totalProgress\n    });\n    this.emit('progress', totalProgress);\n  }\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n\n\n  updateOnlineStatus() {\n    const online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;\n\n    if (!online) {\n      this.emit('is-offline');\n      this.info(this.i18n('noInternetConnection'), 'error', 0);\n      this.wasOffline = true;\n    } else {\n      this.emit('is-online');\n\n      if (this.wasOffline) {\n        this.emit('back-online');\n        this.info(this.i18n('connectedToInternet'), 'success', 3000);\n        this.wasOffline = false;\n      }\n    }\n  }\n\n  getID() {\n    return this.opts.id;\n  }\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {object} Plugin object\n   * @param {object} [opts] object with options to be passed to Plugin\n   * @returns {object} self for chaining\n   */\n  // eslint-disable-next-line no-shadow\n\n\n  use(Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` + ' Please verify that the plugin was imported and spelled correctly.';\n      throw new TypeError(msg);\n    } // Instantiate\n\n\n    const plugin = new Plugin(this, opts);\n    const pluginId = plugin.id;\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id');\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type');\n    }\n\n    const existsPluginAlready = this.getPlugin(pluginId);\n\n    if (existsPluginAlready) {\n      const msg = `Already found a plugin named '${existsPluginAlready.id}'. ` + `Tried to use: '${pluginId}'.\\n` + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';\n      throw new Error(msg);\n    }\n\n    if (Plugin.VERSION) {\n      this.log(`Using ${pluginId} v${Plugin.VERSION}`);\n    }\n\n    if (plugin.type in _classPrivateFieldLooseBase(this, _plugins)[_plugins]) {\n      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type].push(plugin);\n    } else {\n      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type] = [plugin];\n    }\n\n    plugin.install();\n    return this;\n  }\n  /**\n   * Find one Plugin by name.\n   *\n   * @param {string} id plugin id\n   * @returns {BasePlugin|undefined}\n   */\n\n\n  getPlugin(id) {\n    for (const plugins of Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins])) {\n      const foundPlugin = plugins.find(plugin => plugin.id === id);\n      if (foundPlugin != null) return foundPlugin;\n    }\n\n    return undefined;\n  }\n\n  [_Symbol$for](type) {\n    return _classPrivateFieldLooseBase(this, _plugins)[_plugins][type];\n  }\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param {Function} method that will be run on each plugin\n   */\n\n\n  iteratePlugins(method) {\n    Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins]).flat(1).forEach(method);\n  }\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n\n\n  removePlugin(instance) {\n    this.log(`Removing plugin ${instance.id}`);\n    this.emit('plugin-remove', instance);\n\n    if (instance.uninstall) {\n      instance.uninstall();\n    }\n\n    const list = _classPrivateFieldLooseBase(this, _plugins)[_plugins][instance.type]; // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n\n\n    const index = list.findIndex(item => item.id === instance.id);\n\n    if (index !== -1) {\n      list.splice(index, 1);\n    }\n\n    const state = this.getState();\n    const updatedState = {\n      plugins: { ...state.plugins,\n        [instance.id]: undefined\n      }\n    };\n    this.setState(updatedState);\n  }\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n\n\n  close() {\n    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`);\n    this.reset();\n\n    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe]();\n\n    this.iteratePlugins(plugin => {\n      this.removePlugin(plugin);\n    });\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n      window.removeEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    }\n  }\n\n  hideInfo() {\n    const {\n      info\n    } = this.getState();\n    this.setState({\n      info: info.slice(1)\n    });\n    this.emit('info-hidden');\n  }\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   *\n   * @param {string | object} message Message to be displayed by the informer\n   * @param {string} [type]\n   * @param {number} [duration]\n   */\n\n\n  info(message, type = 'info', duration = 3000) {\n    const isComplexMessage = typeof message === 'object';\n    this.setState({\n      info: [...this.getState().info, {\n        type,\n        message: isComplexMessage ? message.message : message,\n        details: isComplexMessage ? message.details : null\n      }]\n    });\n    setTimeout(() => this.hideInfo(), duration);\n    this.emit('info-visible');\n  }\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   *\n   * @param {string|object} message to log\n   * @param {string} [type] optional `error` or `warning`\n   */\n\n\n  log(message, type) {\n    const {\n      logger\n    } = this.opts;\n\n    switch (type) {\n      case 'error':\n        logger.error(message);\n        break;\n\n      case 'warning':\n        logger.warn(message);\n        break;\n\n      default:\n        logger.debug(message);\n        break;\n    }\n  }\n  /**\n   * Restore an upload by its ID.\n   */\n\n\n  restore(uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`);\n\n    if (!this.getState().currentUploads[uploadID]) {\n      _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n\n      return Promise.reject(new Error('Nonexistent upload'));\n    }\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @returns {string} ID of this upload.\n   */\n\n\n  [_Symbol$for2](...args) {\n    return _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](...args);\n  }\n\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */\n  addResultData(uploadID, data) {\n    if (!_classPrivateFieldLooseBase(this, _getUpload)[_getUpload](uploadID)) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n      return;\n    }\n\n    const {\n      currentUploads\n    } = this.getState();\n    const currentUpload = { ...currentUploads[uploadID],\n      result: { ...currentUploads[uploadID].result,\n        ...data\n      }\n    };\n    this.setState({\n      currentUploads: { ...currentUploads,\n        [uploadID]: currentUpload\n      }\n    });\n  }\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @returns {Promise}\n   */\n  upload() {\n    var _classPrivateFieldLoo;\n\n    if (!((_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _plugins)[_plugins].uploader) != null && _classPrivateFieldLoo.length)) {\n      this.log('No uploader type plugins are used', 'warning');\n    }\n\n    let {\n      files\n    } = this.getState();\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files);\n\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));\n    }\n\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult; // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n\n      this.setState({\n        files\n      });\n    }\n\n    return Promise.resolve().then(() => {\n      _classPrivateFieldLooseBase(this, _checkMinNumberOfFiles)[_checkMinNumberOfFiles](files);\n\n      _classPrivateFieldLooseBase(this, _checkRequiredMetaFields)[_checkRequiredMetaFields](files);\n    }).catch(err => {\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err);\n    }).then(() => {\n      const {\n        currentUploads\n      } = this.getState(); // get a list of files that are currently assigned to uploads\n\n      const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs);\n      const waitingFileIDs = [];\n      Object.keys(files).forEach(fileID => {\n        const file = this.getFile(fileID); // if the file hasn't started uploading and hasn't already been assigned to an upload..\n\n        if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {\n          waitingFileIDs.push(file.id);\n        }\n      });\n\n      const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](waitingFileIDs);\n\n      return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n    }).catch(err => {\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n        showInformer: false\n      });\n    });\n  }\n\n}\n\nfunction _checkRestrictions2(file, files = this.getFiles()) {\n  const {\n    maxFileSize,\n    minFileSize,\n    maxTotalFileSize,\n    maxNumberOfFiles,\n    allowedFileTypes\n  } = this.opts.restrictions;\n\n  if (maxNumberOfFiles) {\n    if (files.length + 1 > maxNumberOfFiles) {\n      throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', {\n        smart_count: maxNumberOfFiles\n      })}`);\n    }\n  }\n\n  if (allowedFileTypes) {\n    const isCorrectFileType = allowedFileTypes.some(type => {\n      // check if this is a mime-type\n      if (type.indexOf('/') > -1) {\n        if (!file.type) return false;\n        return match(file.type.replace(/;.*?$/, ''), type);\n      } // otherwise this is likely an extension\n\n\n      if (type[0] === '.' && file.extension) {\n        return file.extension.toLowerCase() === type.substr(1).toLowerCase();\n      }\n\n      return false;\n    });\n\n    if (!isCorrectFileType) {\n      const allowedFileTypesString = allowedFileTypes.join(', ');\n      throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {\n        types: allowedFileTypesString\n      }));\n    }\n  } // We can't check maxTotalFileSize if the size is unknown.\n\n\n  if (maxTotalFileSize && file.size != null) {\n    let totalFilesSize = 0;\n    totalFilesSize += file.size;\n    files.forEach(f => {\n      totalFilesSize += f.size;\n    });\n\n    if (totalFilesSize > maxTotalFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxTotalFileSize),\n        file: file.name\n      }));\n    }\n  } // We can't check maxFileSize if the size is unknown.\n\n\n  if (maxFileSize && file.size != null) {\n    if (file.size > maxFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxFileSize),\n        file: file.name\n      }));\n    }\n  } // We can't check minFileSize if the size is unknown.\n\n\n  if (minFileSize && file.size != null) {\n    if (file.size < minFileSize) {\n      throw new RestrictionError(this.i18n('inferiorSize', {\n        size: prettierBytes(minFileSize)\n      }));\n    }\n  }\n}\n\nfunction _checkMinNumberOfFiles2(files) {\n  const {\n    minNumberOfFiles\n  } = this.opts.restrictions;\n\n  if (Object.keys(files).length < minNumberOfFiles) {\n    throw new RestrictionError(`${this.i18n('youHaveToAtLeastSelectX', {\n      smart_count: minNumberOfFiles\n    })}`);\n  }\n}\n\nfunction _checkRequiredMetaFields2(files) {\n  const {\n    requiredMetaFields\n  } = this.opts.restrictions;\n  const {\n    hasOwnProperty\n  } = Object.prototype;\n  const errors = [];\n\n  for (const fileID of Object.keys(files)) {\n    const file = this.getFile(fileID);\n\n    for (let i = 0; i < requiredMetaFields.length; i++) {\n      if (!hasOwnProperty.call(file.meta, requiredMetaFields[i]) || file.meta[requiredMetaFields[i]] === '') {\n        const err = new RestrictionError(`${this.i18n('missingRequiredMetaFieldOnFile', {\n          fileName: file.name\n        })}`);\n        errors.push(err);\n\n        _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n          file,\n          showInformer: false,\n          throwErr: false\n        });\n      }\n    }\n  }\n\n  if (errors.length) {\n    throw new AggregateRestrictionError(`${this.i18n('missingRequiredMetaField')}`, errors);\n  }\n}\n\nfunction _showOrLogErrorAndThrow2(err, {\n  showInformer = true,\n  file = null,\n  throwErr = true\n} = {}) {\n  const message = typeof err === 'object' ? err.message : err;\n  const details = typeof err === 'object' && err.details ? err.details : ''; // Restriction errors should be logged, but not as errors,\n  // as they are expected and shown in the UI.\n\n  let logMessageWithDetails = message;\n\n  if (details) {\n    logMessageWithDetails += ` ${details}`;\n  }\n\n  if (err.isRestriction) {\n    this.log(logMessageWithDetails);\n    this.emit('restriction-failed', file, err);\n  } else {\n    this.log(logMessageWithDetails, 'error');\n  } // Sometimes informer has to be shown manually by the developer,\n  // for example, in `onBeforeFileAdded`.\n\n\n  if (showInformer) {\n    this.info({\n      message,\n      details\n    }, 'error', this.opts.infoTimeout);\n  }\n\n  if (throwErr) {\n    throw typeof err === 'object' ? err : new Error(err);\n  }\n}\n\nfunction _assertNewUploadAllowed2(file) {\n  const {\n    allowNewUpload\n  } = this.getState();\n\n  if (allowNewUpload === false) {\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError(this.i18n('noMoreFilesAllowed')), {\n      file\n    });\n  }\n}\n\nfunction _checkAndCreateFileStateObject2(files, fileDescriptor) {\n  const fileType = getFileType(fileDescriptor);\n  const fileName = getFileName(fileType, fileDescriptor);\n  const fileExtension = getFileNameAndExtension(fileName).extension;\n  const isRemote = Boolean(fileDescriptor.isRemote);\n  const fileID = generateFileID({ ...fileDescriptor,\n    type: fileType\n  });\n\n  if (this.checkIfFileAlreadyExists(fileID)) {\n    const error = new RestrictionError(this.i18n('noDuplicates', {\n      fileName\n    }));\n\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {\n      file: fileDescriptor\n    });\n  }\n\n  const meta = fileDescriptor.meta || {};\n  meta.name = fileName;\n  meta.type = fileType; // `null` means the size is unknown.\n\n  const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null;\n  let newFile = {\n    source: fileDescriptor.source || '',\n    id: fileID,\n    name: fileName,\n    extension: fileExtension || '',\n    meta: { ...this.getState().meta,\n      ...meta\n    },\n    type: fileType,\n    data: fileDescriptor.data,\n    progress: {\n      percentage: 0,\n      bytesUploaded: 0,\n      bytesTotal: size,\n      uploadComplete: false,\n      uploadStarted: null\n    },\n    size,\n    isRemote,\n    remote: fileDescriptor.remote || '',\n    preview: fileDescriptor.preview\n  };\n  const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files);\n\n  if (onBeforeFileAddedResult === false) {\n    // Donâ€™t show UI info for this error, as it should be done by the developer\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.'), {\n      showInformer: false,\n      fileDescriptor\n    });\n  } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {\n    newFile = onBeforeFileAddedResult;\n  }\n\n  try {\n    const filesArray = Object.keys(files).map(i => files[i]);\n\n    _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](newFile, filesArray);\n  } catch (err) {\n    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n      file: newFile\n    });\n  }\n\n  return newFile;\n}\n\nfunction _startIfAutoProceed2() {\n  if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n    this.scheduledAutoProceed = setTimeout(() => {\n      this.scheduledAutoProceed = null;\n      this.upload().catch(err => {\n        if (!err.isRestriction) {\n          this.log(err.stack || err.message || err);\n        }\n      });\n    }, 4);\n  }\n}\n\nfunction _addListeners2() {\n  /**\n   * @param {Error} error\n   * @param {object} [file]\n   * @param {object} [response]\n   */\n  const errorHandler = (error, file, response) => {\n    let errorMsg = error.message || 'Unknown error';\n\n    if (error.details) {\n      errorMsg += ` ${error.details}`;\n    }\n\n    this.setState({\n      error: errorMsg\n    });\n\n    if (file != null && file.id in this.getState().files) {\n      this.setFileState(file.id, {\n        error: errorMsg,\n        response\n      });\n    }\n  };\n\n  this.on('error', errorHandler);\n  this.on('upload-error', (file, error, response) => {\n    errorHandler(error, file, response);\n\n    if (typeof error === 'object' && error.message) {\n      const newError = new Error(error.message);\n      newError.details = error.message;\n\n      if (error.details) {\n        newError.details += ` ${error.details}`;\n      }\n\n      newError.message = this.i18n('failedToUpload', {\n        file: file.name\n      });\n\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](newError, {\n        throwErr: false\n      });\n    } else {\n      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {\n        throwErr: false\n      });\n    }\n  });\n  this.on('upload', () => {\n    this.setState({\n      error: null\n    });\n  });\n  this.on('upload-started', file => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: {\n        uploadStarted: Date.now(),\n        uploadComplete: false,\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: file.size\n      }\n    });\n  });\n  this.on('upload-progress', this.calculateProgress);\n  this.on('upload-success', (file, uploadResp) => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    const currentProgress = this.getFile(file.id).progress;\n    this.setFileState(file.id, {\n      progress: { ...currentProgress,\n        postprocess: _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].size > 0 ? {\n          mode: 'indeterminate'\n        } : null,\n        uploadComplete: true,\n        percentage: 100,\n        bytesUploaded: currentProgress.bytesTotal\n      },\n      response: uploadResp,\n      uploadURL: uploadResp.uploadURL,\n      isPaused: false\n    }); // Remote providers sometimes don't tell us the file size,\n    // but we can know how many bytes we uploaded once the upload is complete.\n\n    if (file.size == null) {\n      this.setFileState(file.id, {\n        size: uploadResp.bytesUploaded || currentProgress.bytesTotal\n      });\n    }\n\n    this.calculateTotalProgress();\n  });\n  this.on('preprocess-progress', (file, progress) => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: { ...this.getFile(file.id).progress,\n        preprocess: progress\n      }\n    });\n  });\n  this.on('preprocess-complete', file => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    const files = { ...this.getState().files\n    };\n    files[file.id] = { ...files[file.id],\n      progress: { ...files[file.id].progress\n      }\n    };\n    delete files[file.id].progress.preprocess;\n    this.setState({\n      files\n    });\n  });\n  this.on('postprocess-progress', (file, progress) => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: { ...this.getState().files[file.id].progress,\n        postprocess: progress\n      }\n    });\n  });\n  this.on('postprocess-complete', file => {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n      return;\n    }\n\n    const files = { ...this.getState().files\n    };\n    files[file.id] = { ...files[file.id],\n      progress: { ...files[file.id].progress\n      }\n    };\n    delete files[file.id].progress.postprocess;\n    this.setState({\n      files\n    });\n  });\n  this.on('restored', () => {\n    // Files may have changed--ensure progress is still accurate.\n    this.calculateTotalProgress();\n  }); // show informer if offline\n\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    window.addEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    setTimeout(_classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus], 3000);\n  }\n}\n\nfunction _createUpload2(fileIDs, opts = {}) {\n  // uppy.retryAll sets this to true â€” when retrying we want to ignore `allowNewUpload: false`\n  const {\n    forceAllowNewUpload = false\n  } = opts;\n  const {\n    allowNewUpload,\n    currentUploads\n  } = this.getState();\n\n  if (!allowNewUpload && !forceAllowNewUpload) {\n    throw new Error('Cannot create a new upload: already uploading.');\n  }\n\n  const uploadID = nanoid();\n  this.emit('upload', {\n    id: uploadID,\n    fileIDs\n  });\n  this.setState({\n    allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,\n    currentUploads: { ...currentUploads,\n      [uploadID]: {\n        fileIDs,\n        step: 0,\n        result: {}\n      }\n    }\n  });\n  return uploadID;\n}\n\nfunction _getUpload2(uploadID) {\n  const {\n    currentUploads\n  } = this.getState();\n  return currentUploads[uploadID];\n}\n\nfunction _removeUpload2(uploadID) {\n  const currentUploads = { ...this.getState().currentUploads\n  };\n  delete currentUploads[uploadID];\n  this.setState({\n    currentUploads\n  });\n}\n\nasync function _runUpload2(uploadID) {\n  let {\n    currentUploads\n  } = this.getState();\n  let currentUpload = currentUploads[uploadID];\n  const restoreStep = currentUpload.step || 0;\n  const steps = [..._classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors], ..._classPrivateFieldLooseBase(this, _uploaders)[_uploaders], ..._classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors]];\n\n  try {\n    for (let step = restoreStep; step < steps.length; step++) {\n      if (!currentUpload) {\n        break;\n      }\n\n      const fn = steps[step];\n      const updatedUpload = { ...currentUpload,\n        step\n      };\n      this.setState({\n        currentUploads: { ...currentUploads,\n          [uploadID]: updatedUpload\n        }\n      }); // TODO give this the `updatedUpload` object as its only parameter maybe?\n      // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n\n      await fn(updatedUpload.fileIDs, uploadID); // Update currentUpload value in case it was modified asynchronously.\n\n      currentUploads = this.getState().currentUploads;\n      currentUpload = currentUploads[uploadID];\n    }\n  } catch (err) {\n    this.emit('error', err);\n\n    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n\n    throw err;\n  } // Set result data.\n\n\n  if (currentUpload) {\n    // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n    // stuck in the postprocessing UI while the upload is fully complete.\n    // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n    // all, and never mark the postprocessing as complete. This is fine on its own but we\n    // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n    // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n    // before the postprocessing plugins can emit events.\n    //\n    // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n    // postprocessing completion, we do it instead.\n    currentUpload.fileIDs.forEach(fileID => {\n      const file = this.getFile(fileID);\n\n      if (file && file.progress.postprocess) {\n        this.emit('postprocess-complete', file);\n      }\n    });\n    const files = currentUpload.fileIDs.map(fileID => this.getFile(fileID));\n    const successful = files.filter(file => !file.error);\n    const failed = files.filter(file => file.error);\n    await this.addResultData(uploadID, {\n      successful,\n      failed,\n      uploadID\n    }); // Update currentUpload value in case it was modified asynchronously.\n\n    currentUploads = this.getState().currentUploads;\n    currentUpload = currentUploads[uploadID];\n  } // Emit completion events.\n  // This is in a separate function so that the `currentUploads` variable\n  // always refers to the latest state. In the handler right above it refers\n  // to an outdated object without the `.result` property.\n\n\n  let result;\n\n  if (currentUpload) {\n    result = currentUpload.result;\n    this.emit('complete', result);\n\n    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n  }\n\n  if (result == null) {\n    this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n  }\n\n  return result;\n}\n\nUppy.VERSION = \"2.1.1\";\nmodule.exports = Uppy;"]},"metadata":{},"sourceType":"script"}