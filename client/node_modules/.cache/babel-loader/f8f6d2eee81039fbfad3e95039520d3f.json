{"ast":null,"code":"\"use strict\";\n\nvar DATA_URL_PATTERN = /^data:([^/]+\\/[^,;]+(?:[^,]*?))(;base64)?,([\\s\\S]*)$/;\n\nmodule.exports = function dataURItoBlob(dataURI, opts, toFile) {\n  var _ref, _opts$mimeType; // get the base64 data\n\n\n  var dataURIData = DATA_URL_PATTERN.exec(dataURI); // user may provide mime type, if not get it from data URI\n\n  var mimeType = (_ref = (_opts$mimeType = opts.mimeType) != null ? _opts$mimeType : dataURIData == null ? void 0 : dataURIData[1]) != null ? _ref : 'plain/text';\n  var data;\n\n  if (dataURIData[2] != null) {\n    var binary = atob(decodeURIComponent(dataURIData[3]));\n    var bytes = new Uint8Array(binary.length);\n\n    for (var i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n\n    data = [bytes];\n  } else {\n    data = [decodeURIComponent(dataURIData[3])];\n  } // Convert to a File?\n\n\n  if (toFile) {\n    return new File(data, opts.name || '', {\n      type: mimeType\n    });\n  }\n\n  return new Blob(data, {\n    type: mimeType\n  });\n};","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/utils/lib/dataURItoBlob.js"],"names":["DATA_URL_PATTERN","module","exports","dataURItoBlob","dataURI","opts","toFile","_ref","_opts$mimeType","dataURIData","exec","mimeType","data","binary","atob","decodeURIComponent","bytes","Uint8Array","length","i","charCodeAt","File","name","type","Blob"],"mappings":"AAAA;;AAEA,IAAMA,gBAAgB,GAAG,sDAAzB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,MAAtC,EAA8C;AAC7D,MAAIC,IAAJ,EAAUC,cAAV,CAD6D,CAG7D;;;AACA,MAAMC,WAAW,GAAGT,gBAAgB,CAACU,IAAjB,CAAsBN,OAAtB,CAApB,CAJ6D,CAIT;;AAEpD,MAAMO,QAAQ,GAAG,CAACJ,IAAI,GAAG,CAACC,cAAc,GAAGH,IAAI,CAACM,QAAvB,KAAoC,IAApC,GAA2CH,cAA3C,GAA4DC,WAAW,IAAI,IAAf,GAAsB,KAAK,CAA3B,GAA+BA,WAAW,CAAC,CAAD,CAA9G,KAAsH,IAAtH,GAA6HF,IAA7H,GAAoI,YAArJ;AACA,MAAIK,IAAJ;;AAEA,MAAIH,WAAW,CAAC,CAAD,CAAX,IAAkB,IAAtB,EAA4B;AAC1B,QAAMI,MAAM,GAAGC,IAAI,CAACC,kBAAkB,CAACN,WAAW,CAAC,CAAD,CAAZ,CAAnB,CAAnB;AACA,QAAMO,KAAK,GAAG,IAAIC,UAAJ,CAAeJ,MAAM,CAACK,MAAtB,CAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACK,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtCH,MAAAA,KAAK,CAACG,CAAD,CAAL,GAAWN,MAAM,CAACO,UAAP,CAAkBD,CAAlB,CAAX;AACD;;AAEDP,IAAAA,IAAI,GAAG,CAACI,KAAD,CAAP;AACD,GATD,MASO;AACLJ,IAAAA,IAAI,GAAG,CAACG,kBAAkB,CAACN,WAAW,CAAC,CAAD,CAAZ,CAAnB,CAAP;AACD,GApB4D,CAoB3D;;;AAGF,MAAIH,MAAJ,EAAY;AACV,WAAO,IAAIe,IAAJ,CAAST,IAAT,EAAeP,IAAI,CAACiB,IAAL,IAAa,EAA5B,EAAgC;AACrCC,MAAAA,IAAI,EAAEZ;AAD+B,KAAhC,CAAP;AAGD;;AAED,SAAO,IAAIa,IAAJ,CAASZ,IAAT,EAAe;AACpBW,IAAAA,IAAI,EAAEZ;AADc,GAAf,CAAP;AAGD,CAhCD","sourcesContent":["\"use strict\";\n\nconst DATA_URL_PATTERN = /^data:([^/]+\\/[^,;]+(?:[^,]*?))(;base64)?,([\\s\\S]*)$/;\n\nmodule.exports = function dataURItoBlob(dataURI, opts, toFile) {\n  var _ref, _opts$mimeType;\n\n  // get the base64 data\n  const dataURIData = DATA_URL_PATTERN.exec(dataURI); // user may provide mime type, if not get it from data URI\n\n  const mimeType = (_ref = (_opts$mimeType = opts.mimeType) != null ? _opts$mimeType : dataURIData == null ? void 0 : dataURIData[1]) != null ? _ref : 'plain/text';\n  let data;\n\n  if (dataURIData[2] != null) {\n    const binary = atob(decodeURIComponent(dataURIData[3]));\n    const bytes = new Uint8Array(binary.length);\n\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n\n    data = [bytes];\n  } else {\n    data = [decodeURIComponent(dataURIData[3])];\n  } // Convert to a File?\n\n\n  if (toFile) {\n    return new File(data, opts.name || '', {\n      type: mimeType\n    });\n  }\n\n  return new Blob(data, {\n    type: mimeType\n  });\n};"]},"metadata":{},"sourceType":"script"}