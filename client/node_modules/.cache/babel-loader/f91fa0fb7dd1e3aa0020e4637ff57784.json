{"ast":null,"code":"\"use strict\";\n\nconst debounce = require('lodash.debounce');\n\nconst FOCUSABLE_ELEMENTS = require('@uppy/utils/lib/FOCUSABLE_ELEMENTS');\n\nconst getActiveOverlayEl = require('./getActiveOverlayEl');\n/*\n  Focuses on some element in the currently topmost overlay.\n\n  1. If there are some [data-uppy-super-focusable] elements rendered already - focuses\n     on the first superfocusable element, and leaves focus up to the control of\n     a user (until currently focused element disappears from the screen [which\n     can happen when overlay changes, or, e.g., when we click on a folder in googledrive]).\n  2. If there are no [data-uppy-super-focusable] elements yet (or ever) - focuses\n     on the first focusable element, but switches focus if superfocusable elements appear on next render.\n*/\n\n\nmodule.exports = function createSuperFocus() {\n  let lastFocusWasOnSuperFocusableEl = false;\n\n  const superFocus = (dashboardEl, activeOverlayType) => {\n    const overlayEl = getActiveOverlayEl(dashboardEl, activeOverlayType);\n    const isFocusInOverlay = overlayEl.contains(document.activeElement); // If focus is already in the topmost overlay, AND on last update we focused on the superfocusable\n    // element - then leave focus up to the user.\n    // [Practical check] without this line, typing in the search input in googledrive overlay won't work.\n\n    if (isFocusInOverlay && lastFocusWasOnSuperFocusableEl) return;\n    const superFocusableEl = overlayEl.querySelector('[data-uppy-super-focusable]'); // If we are already in the topmost overlay, AND there are no super focusable elements yet, - leave focus up to the user.\n    // [Practical check] without this line, if you are in an empty folder in google drive, and something's uploading in the\n    // bg, - focus will be jumping to Done all the time.\n\n    if (isFocusInOverlay && !superFocusableEl) return;\n\n    if (superFocusableEl) {\n      superFocusableEl.focus({\n        preventScroll: true\n      });\n      lastFocusWasOnSuperFocusableEl = true;\n    } else {\n      const firstEl = overlayEl.querySelector(FOCUSABLE_ELEMENTS);\n      firstEl == null ? void 0 : firstEl.focus({\n        preventScroll: true\n      });\n      lastFocusWasOnSuperFocusableEl = false;\n    }\n  }; // ___Why do we need to debounce?\n  //    1. To deal with animations: overlay changes via animations, which results in the DOM updating AFTER plugin.update()\n  //       already executed.\n  //    [Practical check] without debounce, if we open the Url overlay, and click 'Done', Dashboard won't get focused again.\n  //    [Practical check] if we delay 250ms instead of 260ms - IE11 won't get focused in same situation.\n  //    2. Performance: there can be many state update()s in a second, and this function is called every time.\n\n\n  return debounce(superFocus, 260);\n};","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/dashboard/lib/utils/createSuperFocus.js"],"names":["debounce","require","FOCUSABLE_ELEMENTS","getActiveOverlayEl","module","exports","createSuperFocus","lastFocusWasOnSuperFocusableEl","superFocus","dashboardEl","activeOverlayType","overlayEl","isFocusInOverlay","contains","document","activeElement","superFocusableEl","querySelector","focus","preventScroll","firstEl"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AAEA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,oCAAD,CAAlC;;AAEA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,sBAAD,CAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAG,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,GAA4B;AAC3C,MAAIC,8BAA8B,GAAG,KAArC;;AAEA,QAAMC,UAAU,GAAG,CAACC,WAAD,EAAcC,iBAAd,KAAoC;AACrD,UAAMC,SAAS,GAAGR,kBAAkB,CAACM,WAAD,EAAcC,iBAAd,CAApC;AACA,UAAME,gBAAgB,GAAGD,SAAS,CAACE,QAAV,CAAmBC,QAAQ,CAACC,aAA5B,CAAzB,CAFqD,CAEgB;AACrE;AACA;;AAEA,QAAIH,gBAAgB,IAAIL,8BAAxB,EAAwD;AACxD,UAAMS,gBAAgB,GAAGL,SAAS,CAACM,aAAV,CAAwB,6BAAxB,CAAzB,CAPqD,CAO4B;AACjF;AACA;;AAEA,QAAIL,gBAAgB,IAAI,CAACI,gBAAzB,EAA2C;;AAE3C,QAAIA,gBAAJ,EAAsB;AACpBA,MAAAA,gBAAgB,CAACE,KAAjB,CAAuB;AACrBC,QAAAA,aAAa,EAAE;AADM,OAAvB;AAGAZ,MAAAA,8BAA8B,GAAG,IAAjC;AACD,KALD,MAKO;AACL,YAAMa,OAAO,GAAGT,SAAS,CAACM,aAAV,CAAwBf,kBAAxB,CAAhB;AACAkB,MAAAA,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACF,KAAR,CAAc;AACvCC,QAAAA,aAAa,EAAE;AADwB,OAAd,CAA3B;AAGAZ,MAAAA,8BAA8B,GAAG,KAAjC;AACD;AACF,GAzBD,CAH2C,CA4BxC;AACH;AACA;AACA;AACA;AACA;;;AAGA,SAAOP,QAAQ,CAACQ,UAAD,EAAa,GAAb,CAAf;AACD,CArCD","sourcesContent":["\"use strict\";\n\nconst debounce = require('lodash.debounce');\n\nconst FOCUSABLE_ELEMENTS = require('@uppy/utils/lib/FOCUSABLE_ELEMENTS');\n\nconst getActiveOverlayEl = require('./getActiveOverlayEl');\n/*\n  Focuses on some element in the currently topmost overlay.\n\n  1. If there are some [data-uppy-super-focusable] elements rendered already - focuses\n     on the first superfocusable element, and leaves focus up to the control of\n     a user (until currently focused element disappears from the screen [which\n     can happen when overlay changes, or, e.g., when we click on a folder in googledrive]).\n  2. If there are no [data-uppy-super-focusable] elements yet (or ever) - focuses\n     on the first focusable element, but switches focus if superfocusable elements appear on next render.\n*/\n\n\nmodule.exports = function createSuperFocus() {\n  let lastFocusWasOnSuperFocusableEl = false;\n\n  const superFocus = (dashboardEl, activeOverlayType) => {\n    const overlayEl = getActiveOverlayEl(dashboardEl, activeOverlayType);\n    const isFocusInOverlay = overlayEl.contains(document.activeElement); // If focus is already in the topmost overlay, AND on last update we focused on the superfocusable\n    // element - then leave focus up to the user.\n    // [Practical check] without this line, typing in the search input in googledrive overlay won't work.\n\n    if (isFocusInOverlay && lastFocusWasOnSuperFocusableEl) return;\n    const superFocusableEl = overlayEl.querySelector('[data-uppy-super-focusable]'); // If we are already in the topmost overlay, AND there are no super focusable elements yet, - leave focus up to the user.\n    // [Practical check] without this line, if you are in an empty folder in google drive, and something's uploading in the\n    // bg, - focus will be jumping to Done all the time.\n\n    if (isFocusInOverlay && !superFocusableEl) return;\n\n    if (superFocusableEl) {\n      superFocusableEl.focus({\n        preventScroll: true\n      });\n      lastFocusWasOnSuperFocusableEl = true;\n    } else {\n      const firstEl = overlayEl.querySelector(FOCUSABLE_ELEMENTS);\n      firstEl == null ? void 0 : firstEl.focus({\n        preventScroll: true\n      });\n      lastFocusWasOnSuperFocusableEl = false;\n    }\n  }; // ___Why do we need to debounce?\n  //    1. To deal with animations: overlay changes via animations, which results in the DOM updating AFTER plugin.update()\n  //       already executed.\n  //    [Practical check] without debounce, if we open the Url overlay, and click 'Done', Dashboard won't get focused again.\n  //    [Practical check] if we delay 250ms instead of 260ms - IE11 won't get focused in same situation.\n  //    2. Performance: there can be many state update()s in a second, and this function is called every time.\n\n\n  return debounce(superFocus, 260);\n};"]},"metadata":{},"sourceType":"script"}