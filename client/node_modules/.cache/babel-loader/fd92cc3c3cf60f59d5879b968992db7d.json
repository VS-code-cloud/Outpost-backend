{"ast":null,"code":"\"use strict\";\n\nvar PropTypes = require('prop-types');\n\nvar UppyCore = require('@uppy/core').Uppy; // The `uppy` prop receives the Uppy core instance.\n\n\nvar uppy = PropTypes.instanceOf(UppyCore).isRequired; // A list of plugins to mount inside this component.\n\nvar plugins = PropTypes.arrayOf(PropTypes.string); // Language strings for this component.\n\nvar locale = PropTypes.shape({\n  strings: PropTypes.object,\n  // eslint-disable-line react/forbid-prop-types\n  pluralize: PropTypes.func\n}); // List of meta fields for the editor in the Dashboard.\n\nvar metaField = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string\n});\nvar metaFields = PropTypes.oneOfType([PropTypes.arrayOf(metaField), PropTypes.func]); // A size in pixels (number) or with some other unit (string).\n\nvar cssSize = PropTypes.oneOfType([PropTypes.string, PropTypes.number]); // Common props for dashboardy components (Dashboard and DashboardModal).\n\nvar dashboard = {\n  uppy: uppy,\n  inline: PropTypes.bool,\n  plugins: plugins,\n  width: cssSize,\n  height: cssSize,\n  showProgressDetails: PropTypes.bool,\n  hideUploadButton: PropTypes.bool,\n  hideProgressAfterFinish: PropTypes.bool,\n  note: PropTypes.string,\n  metaFields: metaFields,\n  proudlyDisplayPoweredByUppy: PropTypes.bool,\n  disableStatusBar: PropTypes.bool,\n  disableInformer: PropTypes.bool,\n  disableThumbnailGenerator: PropTypes.bool,\n  // pass-through to ThumbnailGenerator\n  thumbnailWidth: PropTypes.number,\n  locale: locale\n};\nmodule.exports = {\n  uppy: uppy,\n  locale: locale,\n  dashboard: dashboard\n};","map":{"version":3,"sources":["/Users/albertshay/Desktop/silkroad/client/node_modules/@uppy/react/lib/propTypes.js"],"names":["PropTypes","require","UppyCore","Uppy","uppy","instanceOf","isRequired","plugins","arrayOf","string","locale","shape","strings","object","pluralize","func","metaField","id","name","placeholder","metaFields","oneOfType","cssSize","number","dashboard","inline","bool","width","height","showProgressDetails","hideUploadButton","hideProgressAfterFinish","note","proudlyDisplayPoweredByUppy","disableStatusBar","disableInformer","disableThumbnailGenerator","thumbnailWidth","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAP,CAAsBE,IAAvC,C,CAA6C;;;AAG7C,IAAMC,IAAI,GAAGJ,SAAS,CAACK,UAAV,CAAqBH,QAArB,EAA+BI,UAA5C,C,CAAwD;;AAExD,IAAMC,OAAO,GAAGP,SAAS,CAACQ,OAAV,CAAkBR,SAAS,CAACS,MAA5B,CAAhB,C,CAAqD;;AAErD,IAAMC,MAAM,GAAGV,SAAS,CAACW,KAAV,CAAgB;AAC7BC,EAAAA,OAAO,EAAEZ,SAAS,CAACa,MADU;AAE7B;AACAC,EAAAA,SAAS,EAAEd,SAAS,CAACe;AAHQ,CAAhB,CAAf,C,CAII;;AAEJ,IAAMC,SAAS,GAAGhB,SAAS,CAACW,KAAV,CAAgB;AAChCM,EAAAA,EAAE,EAAEjB,SAAS,CAACS,MAAV,CAAiBH,UADW;AAEhCY,EAAAA,IAAI,EAAElB,SAAS,CAACS,MAAV,CAAiBH,UAFS;AAGhCa,EAAAA,WAAW,EAAEnB,SAAS,CAACS;AAHS,CAAhB,CAAlB;AAKA,IAAMW,UAAU,GAAGpB,SAAS,CAACqB,SAAV,CAAoB,CAACrB,SAAS,CAACQ,OAAV,CAAkBQ,SAAlB,CAAD,EAA+BhB,SAAS,CAACe,IAAzC,CAApB,CAAnB,C,CAAwF;;AAExF,IAAMO,OAAO,GAAGtB,SAAS,CAACqB,SAAV,CAAoB,CAACrB,SAAS,CAACS,MAAX,EAAmBT,SAAS,CAACuB,MAA7B,CAApB,CAAhB,C,CAA2E;;AAE3E,IAAMC,SAAS,GAAG;AAChBpB,EAAAA,IAAI,EAAJA,IADgB;AAEhBqB,EAAAA,MAAM,EAAEzB,SAAS,CAAC0B,IAFF;AAGhBnB,EAAAA,OAAO,EAAPA,OAHgB;AAIhBoB,EAAAA,KAAK,EAAEL,OAJS;AAKhBM,EAAAA,MAAM,EAAEN,OALQ;AAMhBO,EAAAA,mBAAmB,EAAE7B,SAAS,CAAC0B,IANf;AAOhBI,EAAAA,gBAAgB,EAAE9B,SAAS,CAAC0B,IAPZ;AAQhBK,EAAAA,uBAAuB,EAAE/B,SAAS,CAAC0B,IARnB;AAShBM,EAAAA,IAAI,EAAEhC,SAAS,CAACS,MATA;AAUhBW,EAAAA,UAAU,EAAVA,UAVgB;AAWhBa,EAAAA,2BAA2B,EAAEjC,SAAS,CAAC0B,IAXvB;AAYhBQ,EAAAA,gBAAgB,EAAElC,SAAS,CAAC0B,IAZZ;AAahBS,EAAAA,eAAe,EAAEnC,SAAS,CAAC0B,IAbX;AAchBU,EAAAA,yBAAyB,EAAEpC,SAAS,CAAC0B,IAdrB;AAehB;AACAW,EAAAA,cAAc,EAAErC,SAAS,CAACuB,MAhBV;AAiBhBb,EAAAA,MAAM,EAANA;AAjBgB,CAAlB;AAmBA4B,MAAM,CAACC,OAAP,GAAiB;AACfnC,EAAAA,IAAI,EAAJA,IADe;AAEfM,EAAAA,MAAM,EAANA,MAFe;AAGfc,EAAAA,SAAS,EAATA;AAHe,CAAjB","sourcesContent":["\"use strict\";\n\nconst PropTypes = require('prop-types');\n\nconst UppyCore = require('@uppy/core').Uppy; // The `uppy` prop receives the Uppy core instance.\n\n\nconst uppy = PropTypes.instanceOf(UppyCore).isRequired; // A list of plugins to mount inside this component.\n\nconst plugins = PropTypes.arrayOf(PropTypes.string); // Language strings for this component.\n\nconst locale = PropTypes.shape({\n  strings: PropTypes.object,\n  // eslint-disable-line react/forbid-prop-types\n  pluralize: PropTypes.func\n}); // List of meta fields for the editor in the Dashboard.\n\nconst metaField = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string\n});\nconst metaFields = PropTypes.oneOfType([PropTypes.arrayOf(metaField), PropTypes.func]); // A size in pixels (number) or with some other unit (string).\n\nconst cssSize = PropTypes.oneOfType([PropTypes.string, PropTypes.number]); // Common props for dashboardy components (Dashboard and DashboardModal).\n\nconst dashboard = {\n  uppy,\n  inline: PropTypes.bool,\n  plugins,\n  width: cssSize,\n  height: cssSize,\n  showProgressDetails: PropTypes.bool,\n  hideUploadButton: PropTypes.bool,\n  hideProgressAfterFinish: PropTypes.bool,\n  note: PropTypes.string,\n  metaFields,\n  proudlyDisplayPoweredByUppy: PropTypes.bool,\n  disableStatusBar: PropTypes.bool,\n  disableInformer: PropTypes.bool,\n  disableThumbnailGenerator: PropTypes.bool,\n  // pass-through to ThumbnailGenerator\n  thumbnailWidth: PropTypes.number,\n  locale\n};\nmodule.exports = {\n  uppy,\n  locale,\n  dashboard\n};"]},"metadata":{},"sourceType":"script"}