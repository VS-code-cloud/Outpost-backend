{"version":3,"sources":["index.js"],"names":["UIPlugin","require","getSpeed","getBytesRemaining","getTextDirection","statusBarStates","StatusBarUI","module","exports","StatusBar","constructor","uppy","opts","startUpload","recoveredState","getState","emit","undefined","upload","catch","id","title","type","defaultLocale","strings","uploading","complete","uploadFailed","paused","retry","retryUpload","cancel","pause","resume","done","filesUploadedOfTotal","dataUploadedOfTotal","xTimeLeft","uploadXFiles","uploadXNewFiles","xMoreFilesAdded","defaultOptions","target","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","i18nInit","render","bind","install","state","capabilities","files","allowNewUpload","totalProgress","error","newFiles","startedFiles","completeFiles","inProgressNotPausedFiles","isUploadStarted","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","getObjectOfFilesPerState","newFilesOrRecovered","Object","values","totalETA","getTotalETA","resumableUploads","supportsUploadProgress","uploadProgress","totalSize","totalUploadedSize","forEach","file","progress","bytesTotal","bytesUploaded","uploadState","getUploadingState","length","numUploads","i18n","isTargetDOMEl","onMount","element","el","direction","dir","mount","uninstall","unmount","VERSION","getTotalSpeed","totalSpeed","totalBytesRemaining","reduce","total","Math","round","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","fileIDs","keys","i","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING"],"mappings":"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","sourcesContent":["const { UIPlugin } = require('@uppy/core')\nconst getSpeed = require('@uppy/utils/lib/getSpeed')\nconst getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining')\nconst getTextDirection = require('@uppy/utils/lib/getTextDirection')\nconst statusBarStates = require('./StatusBarStates')\nconst StatusBarUI = require('./StatusBar')\n\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\nmodule.exports = class StatusBar extends UIPlugin {\n  // eslint-disable-next-line global-require\n  static VERSION = require('../package.json').version;\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'StatusBar'\n    this.title = 'StatusBar'\n    this.type = 'progressindicator'\n\n    this.defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        upload: 'Upload',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        paused: 'Paused',\n        retry: 'Retry',\n        retryUpload: 'Retry upload',\n        cancel: 'Cancel',\n        pause: 'Pause',\n        resume: 'Resume',\n        done: 'Done',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded',\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files',\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files',\n        },\n        xMoreFilesAdded: {\n          0: '%{smart_count} more file added',\n          1: '%{smart_count} more files added',\n        },\n      },\n    }\n\n    // set default options\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.i18nInit()\n\n    this.render = this.render.bind(this)\n    this.install = this.install.bind(this)\n  }\n\n  startUpload = () => {\n    const { recoveredState } = this.uppy.getState()\n\n    if (recoveredState) {\n      this.uppy.emit('restore-confirmed')\n      return undefined\n    }\n\n    return this.uppy.upload().catch(() => {\n      // Error logged in Core\n    })\n  };\n\n  render (state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState,\n    } = state\n\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n      inProgressNotPausedFiles,\n\n      isUploadStarted,\n      isAllComplete,\n      isAllErrored,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost,\n    } = this.uppy.getObjectOfFilesPerState()\n\n    // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n    const newFilesOrRecovered = recoveredState\n      ? Object.values(files)\n      : newFiles\n    const totalETA = getTotalETA(inProgressNotPausedFiles)\n    const resumableUploads = !!capabilities.resumableUploads\n    const supportsUploadProgress = capabilities.uploadProgress !== false\n\n    let totalSize = 0\n    let totalUploadedSize = 0\n\n    startedFiles.forEach((file) => {\n      totalSize += file.progress.bytesTotal || 0\n      totalUploadedSize += file.progress.bytesUploaded || 0\n    })\n\n    return StatusBarUI({\n      error,\n      uploadState: getUploadingState(\n        isAllErrored,\n        isAllComplete,\n        recoveredState,\n        state.files || {}\n      ),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete: false,\n      isAllPaused,\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl,\n    })\n  }\n\n  onMount () {\n    // Set the text direction if the page has not defined one.\n    const element = this.el\n    const direction = getTextDirection(element)\n    if (!direction) {\n      element.dir = 'ltr'\n    }\n  }\n\n  install () {\n    const { target } = this.opts\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n\nfunction getTotalSpeed (files) {\n  let totalSpeed = 0\n  files.forEach((file) => {\n    totalSpeed += getSpeed(file.progress)\n  })\n  return totalSpeed\n}\n\nfunction getTotalETA (files) {\n  const totalSpeed = getTotalSpeed(files)\n  if (totalSpeed === 0) {\n    return 0\n  }\n\n  const totalBytesRemaining = files.reduce((total, file) => {\n    return total + getBytesRemaining(file.progress)\n  }, 0)\n\n  return Math.round((totalBytesRemaining / totalSpeed) * 10) / 10\n}\n\nfunction getUploadingState (isAllErrored, isAllComplete, recoveredState, files) {\n  if (isAllErrored) {\n    return statusBarStates.STATE_ERROR\n  }\n\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE\n  }\n\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING\n  }\n\n  let state = statusBarStates.STATE_WAITING\n  const fileIDs = Object.keys(files)\n  for (let i = 0; i < fileIDs.length; i++) {\n    const { progress } = files[fileIDs[i]]\n    // If ANY files are being uploaded right now, show the uploading state.\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING\n    }\n    // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n    if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n      state = statusBarStates.STATE_PREPROCESSING\n    }\n    // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n    if (\n      progress.postprocess\n      && state !== statusBarStates.STATE_UPLOADING\n      && state !== statusBarStates.STATE_PREPROCESSING\n    ) {\n      state = statusBarStates.STATE_POSTPROCESSING\n    }\n  }\n  return state\n}\n"]}